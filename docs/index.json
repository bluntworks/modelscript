[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/ColumnVectorizer.mjs",
    "content": "// import { ml, } from './ml';\r\nimport { nlp, } from './nlp';\r\n// import { util as utils, } from './util';\r\nimport { DataSet, } from './DataSet';\r\n\r\n/**\r\n * class creating sparse matrices from a corpus\r\n * @class ColumnVectorizer\r\n * @memberOf nlp\r\n */\r\nexport class ColumnVectorizer {\r\n  /**\r\n   * creates a new instance for classifying text data for machine learning\r\n   * @example\r\n   * const dataset = new ms.nlp.ColumnVectorizer(csvData);\r\n   * @param {Object} [options={}]\r\n   * @prop {Object[]} this.data - Array of strings\r\n   * @prop {Set} this.tokens - Unique collection of all tokenized strings\r\n   * @prop {Object[]} this.vectors - Array of tokenized words with value of count of appreance in string\r\n   * @prop {Object} this.wordMap - Object of all unique words, with value of 0\r\n   * @prop {Object} this.wordCountMap - Object of all unique words, with value as total count of appearances\r\n   * @prop {number} this.maxFeatures - max number of features\r\n   * @prop {String[]} this.sortedWordCount - list of words as tokens sorted by total appearances\r\n   * @prop {String[]} this.limitedFeatures - subset list of maxFeatures words as tokens sorted by total appearances\r\n   * @prop {Array[]} this.matrix - words in sparse matrix\r\n   * @prop {Function} this.replacer - clean string function\r\n   * @returns {this} \r\n   */\r\n  constructor(options = {}) {\r\n    this.data = options.data || [];\r\n    this.tokens = new Set();\r\n    this.vectors = [];\r\n    this.wordMap = {};\r\n    this.wordCountMap = {};\r\n    this.maxFeatures = options.maxFeatures;\r\n    this.sortedWordCount = [];\r\n    this.limitedFeatures = [];\r\n    this.matrix = [];\r\n    this.replacer = (value='') => {\r\n      const cleanedValue = value\r\n        .toLowerCase()\r\n        .replace(/[^a-zA-Z]/gi, ' ');\r\n      return nlp.PorterStemmer\r\n        .tokenizeAndStem(cleanedValue)\r\n        .join(' ');\r\n    };\r\n    return this;\r\n  }\r\n  /** \r\n   * Returns a distinct array of all tokens\r\n   * @return {String[]} returns a distinct array of all tokens\r\n  */\r\n  get_tokens() {\r\n    return Array.from(this.tokens);\r\n  }\r\n  /** \r\n   * Returns array of arrays of strings for dependent features from sparse matrix word map\r\n   * @return {String[]} returns array of dependent features for DataSet column matrics\r\n  */\r\n  get_vector_array() {\r\n    return this.get_tokens().map(tok => [\r\n      tok,\r\n    ]);\r\n  }\r\n  /**\r\n   * Fits and transforms data by creating column vectors (a sparse matrix where each row has every word in the corpus as a column and the count of appearances in the corpus)\r\n   * @param {Object} options \r\n   * @param {Object[]} options.data - array of corpus data \r\n   */\r\n  fit_transform(options = {}) {\r\n    const data = options.data || this.data;\r\n    data.forEach(datum => {\r\n      const datums = {};\r\n      this.replacer(datum)\r\n        .split(' ')\r\n        .forEach(tok => {\r\n          const token = tok.toLowerCase();\r\n          datums[ token ] = (datums[ token ])\r\n            ? datums[ token ] + 1\r\n            : 1;\r\n          this.wordCountMap[token] = (this.wordCountMap[token])\r\n            ? this.wordCountMap[token] + 1\r\n            : 1;\r\n          this.tokens.add(token);\r\n        });\r\n      this.vectors.push(datums);\r\n    });\r\n    this.wordMap = Array.from(this.tokens).reduce((result, value) => { \r\n      result[ value ] = 0;\r\n      return result;\r\n    }, {});\r\n    this.sortedWordCount = Object.keys(this.wordCountMap)\r\n      .sort((a, b) => this.wordCountMap[ b ] - this.wordCountMap[ a ]);\r\n    this.vectors = this.vectors.map(vector => Object.assign({}, this.wordMap, vector));\r\n    const vectorData = new DataSet(this.vectors);\r\n    this.limitedFeatures = this.get_limited_features(options);\r\n    this.matrix = vectorData.columnMatrix(this.limitedFeatures);\r\n    return this.matrix;\r\n  }\r\n  /**\r\n   * Returns limited sets of dependent features or all dependent features sorted by word count\r\n   * @param {*} options \r\n   * @param {number} options.maxFeatures - max number of features \r\n   */\r\n  get_limited_features(options = {}) {\r\n    const maxFeatures = options.maxFeatures || this.maxFeatures || this.tokens.size;\r\n \r\n    return this.sortedWordCount\r\n      .slice(0, maxFeatures)\r\n      .map(feature => [ feature, ]);\r\n  }\r\n  /**\r\n   * returns word map with counts\r\n   * @example \r\nColumnVectorizer.evaluateString('I would rate everything Great, views Great, food Great') => { realli: 0,\r\n     good: 0,\r\n     definit: 0,\r\n     recommend: 0,\r\n     wait: 0,\r\n     staff: 0,\r\n     rude: 0,\r\n     great: 3,\r\n     view: 1,\r\n     food: 1,\r\n     not: 0,\r\n     cold: 0,\r\n     took: 0,\r\n     forev: 0,\r\n     seat: 0,\r\n     time: 0,\r\n     prompt: 0,\r\n     attent: 0,\r\n     bland: 0,\r\n     flavor: 0,\r\n     kind: 0 }\r\n   * @param {String} testString \r\n   * @return {Object} object of corpus words with accounts\r\n   */\r\n  evaluateString(testString = '') {\r\n    const evalString = this.replacer(testString);\r\n    const evalStringWordMap = evalString.split(' ').reduce((result, value) => { \r\n      if (this.tokens.has(value)) {\r\n        result[ value ] = (result[ value ]!==undefined)\r\n          ? result[ value ] + 1\r\n          : 1;\r\n      }\r\n      return result;\r\n    }, {});\r\n    return Object.assign({}, this.wordMap, evalStringWordMap);\r\n  }\r\n  /**\r\n   * returns new matrix of words with counts in columns\r\n   * @example \r\nColumnVectorizer.evaluate('I would rate everything Great, views Great, food Great') => [ [ 0, 1, 3, 0, 0, 0, 0, 0, 1 ] ]\r\n   * @param {String} testString \r\n   * @return {number[][]} sparse matrix row for new classification predictions\r\n   */\r\n  evaluate(testString='', options) {\r\n    const stringObj = this.evaluateString(testString);\r\n    const limitedFeatures = this.get_limited_features(options);\r\n    const vectorData = new DataSet([\r\n      stringObj,\r\n    ]);\r\n    return vectorData.columnMatrix(limitedFeatures);\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/ColumnVectorizer.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "ColumnVectorizer",
    "memberof": "src/ColumnVectorizer.mjs",
    "static": true,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/ColumnVectorizer.mjs",
    "importStyle": "{ColumnVectorizer}",
    "description": "class creating sparse matrices from a corpus",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ColumnVectorizer"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "nlp"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#constructor",
    "access": "public",
    "description": "creates a new instance for classifying text data for machine learning",
    "examples": [
      "const dataset = new ms.nlp.ColumnVectorizer(csvData);"
    ],
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Object[]} this.data - Array of strings"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Set} this.tokens - Unique collection of all tokenized strings"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object[]} this.vectors - Array of tokenized words with value of count of appreance in string"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} this.wordMap - Object of all unique words, with value of 0"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Object} this.wordCountMap - Object of all unique words, with value as total count of appearances"
      },
      {
        "tagName": "@prop",
        "tagValue": "{number} this.maxFeatures - max number of features"
      },
      {
        "tagName": "@prop",
        "tagValue": "{String[]} this.sortedWordCount - list of words as tokens sorted by total appearances"
      },
      {
        "tagName": "@prop",
        "tagValue": "{String[]} this.limitedFeatures - subset list of maxFeatures words as tokens sorted by total appearances"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array[]} this.matrix - words in sparse matrix"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Function} this.replacer - clean string function"
      },
      {
        "tagName": "@returns",
        "tagValue": "{this} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "data",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#data",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "member",
    "name": "tokens",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#tokens",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "vectors",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#vectors",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "wordMap",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#wordMap",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "wordCountMap",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#wordCountMap",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true
  },
  {
    "__docId__": 8,
    "kind": "member",
    "name": "maxFeatures",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#maxFeatures",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true
  },
  {
    "__docId__": 9,
    "kind": "member",
    "name": "sortedWordCount",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#sortedWordCount",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 10,
    "kind": "member",
    "name": "limitedFeatures",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#limitedFeatures",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 11,
    "kind": "member",
    "name": "matrix",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 12,
    "kind": "member",
    "name": "replacer",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#replacer",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "method",
    "name": "get_tokens",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#get_tokens",
    "access": "public",
    "description": "Returns a distinct array of all tokens",
    "lineNumber": 53,
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "returns a distinct array of all tokens"
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "get_vector_array",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#get_vector_array",
    "access": "public",
    "description": "Returns array of arrays of strings for dependent features from sparse matrix word map",
    "lineNumber": 60,
    "return": {
      "nullable": null,
      "types": [
        "String[]"
      ],
      "spread": false,
      "description": "returns array of dependent features for DataSet column matrics"
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "fit_transform",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#fit_transform",
    "access": "public",
    "description": "Fits and transforms data by creating column vectors (a sparse matrix where each row has every word in the corpus as a column and the count of appearances in the corpus)",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.data",
        "description": "array of corpus data"
      }
    ]
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "get_limited_features",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#get_limited_features",
    "access": "public",
    "description": "Returns limited sets of dependent features or all dependent features sorted by word count",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.maxFeatures",
        "description": "max number of features"
      }
    ]
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "evaluateString",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#evaluateString",
    "access": "public",
    "description": "returns word map with counts",
    "examples": [
      "ColumnVectorizer.evaluateString('I would rate everything Great, views Great, food Great') => { realli: 0,\ngood: 0,\ndefinit: 0,\nrecommend: 0,\nwait: 0,\nstaff: 0,\nrude: 0,\ngreat: 3,\nview: 1,\nfood: 1,\nnot: 0,\ncold: 0,\ntook: 0,\nforev: 0,\nseat: 0,\ntime: 0,\nprompt: 0,\nattent: 0,\nbland: 0,\nflavor: 0,\nkind: 0 }"
    ],
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "testString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "object of corpus words with accounts"
    }
  },
  {
    "__docId__": 23,
    "kind": "method",
    "name": "evaluate",
    "memberof": "src/ColumnVectorizer.mjs~ColumnVectorizer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ColumnVectorizer.mjs~ColumnVectorizer#evaluate",
    "access": "public",
    "description": "returns new matrix of words with counts in columns",
    "examples": [
      "ColumnVectorizer.evaluate('I would rate everything Great, views Great, food Great') => [ [ 0, 1, 3, 0, 0, 0, 0, 0, 1 ] ]"
    ],
    "lineNumber": 158,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "testString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[][]"
      ],
      "spread": false,
      "description": "sparse matrix row for new classification predictions"
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "src/DataSet.mjs",
    "content": "import { ml, } from './ml';\r\nimport { util as utils, } from './util';\r\n\r\nconst transformConfigMap = {\r\n  scale: 'scaleOptions',\r\n  descale: 'descaleOptions',\r\n  label: 'labelOptions',\r\n  labelEncoder: 'labelOptions',\r\n  labeldecode: 'labelOptions',\r\n  labelDecode: 'labelOptions',\r\n  labelDecoder: 'labelOptions',\r\n  onehot: 'oneHotOptions',\r\n  oneHot: 'oneHotOptions',\r\n  oneHotEncode: 'oneHotOptions',\r\n  oneHotEncoder: 'oneHotOptions',\r\n  reducer: 'reducerOptions',\r\n  reduce: 'reducerOptions',\r\n  merge: 'mergeData',\r\n};\r\n\r\n/**\r\n * class for manipulating an array of objects, typically from CSV data\r\n * @class DataSet\r\n * @memberOf preprocessing\r\n */\r\nexport class DataSet {\r\n  /**\r\n   * Allows for fit transform short hand notation\r\n   * @example\r\nDataSet.getTransforms({\r\n  Age: ['scale',],\r\n  Rating: ['label',],  }); //=> [\r\n//   {\r\n//    name: 'Age', options: { strategy: 'scale', }, },\r\n//   },\r\n//   { \r\n//    name: 'Rating', options: { strategy: 'label', }, \r\n//   },\r\n// ];\r\n   * @param {Object} transforms \r\n   * @returns {Array<Object>} returns fit columns, columns property\r\n   */\r\n  static getTransforms(transforms = {}) {\r\n    return Object.keys(transforms).reduce((result, columnName) => {\r\n      const transformColumnObject = transforms[ columnName ];\r\n      const transformObject = {\r\n        name: columnName,\r\n        options: {\r\n          strategy: (Array.isArray(transformColumnObject))\r\n            ? transformColumnObject[ 0 ]\r\n            : transformColumnObject,\r\n        },\r\n      };\r\n      if (Array.isArray(transformColumnObject) && transformColumnObject.length > 1) {\r\n        transformObject.options[ transformConfigMap[ transformColumnObject[ 0 ] ] ] = transformColumnObject[ 1 ];\r\n      }\r\n      result.push(transformObject);\r\n      return result;\r\n    }, []);\r\n  }\r\n  /**\r\n   * returns an array of objects by applying labels to matrix of columns\r\n   * @example\r\nconst data = [{ Age: '44', Salary: '44' },\r\n{ Age: '27', Salary: '27' }]\r\nconst AgeDataSet = new MS.DataSet(data);\r\nconst dependentVariables = [ [ 'Age', ], [ 'Salary', ], ];\r\nconst AgeSalMatrix = AgeDataSet.columnMatrix(dependentVariables); // =>\r\n//  [ [ '44', '72000' ],\r\n//  [ '27', '48000' ] ];\r\nMS.DataSet.reverseColumnMatrix({vectors:AgeSalMatrix,labels:dependentVariables}); // => [{ Age: '44', Salary: '44' },\r\n{ Age: '27', Salary: '27' }]\r\n   * \r\n   * @param {*} options \r\n   * @param {Array[]} options.vectors - array of vectors\r\n   * @param {String[]} options.labels - array of labels\r\n   * @returns {Object[]} an array of objects with properties derived from options.labels\r\n   */\r\n  static reverseColumnMatrix(options = {}) {\r\n    const { vectors, labels, } = options;\r\n    const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))\r\n      ? labels\r\n      : labels.map(label => [label, ]);\r\n    return vectors.reduce((result, val) => {\r\n      result.push(val.reduce((prop, value, index) => {\r\n        prop[ features[ index ][ 0 ] ] = val[ index ];\r\n        return prop;\r\n      }, {}));\r\n      return result;\r\n    }, []);\r\n  }\r\n  static reverseColumnVector(options = {}) {\r\n    const { vector, labels, } = options;\r\n    const features = (Array.isArray(labels) && Array.isArray(labels[ 0 ]))\r\n      ? labels\r\n      : labels.map(label => [label, ]);\r\n    return vector.reduce((result, val) => {\r\n      result.push(\r\n        { [ features[ 0 ][ 0 ] ]: val, }\r\n      );\r\n      return result;\r\n    }, []);\r\n  }\r\n  /**\r\n   * Returns an object into an one hot encoded object\r\n   * @example\r\nconst labels = ['apple', 'orange', 'banana',];\r\nconst prefix = 'fruit_';\r\nconst name = 'fruit';\r\nconst options = { labels, prefix, name, };\r\nconst data = {\r\n  fruit: 'apple',\r\n};\r\nEncodedCSVDataSet.encodeObject(data, options); // => { fruit_apple: 1, fruit_orange: 0, fruit_banana: 0, }\r\n   * @param {Object} data - object to encode \r\n   * @param {{labels:Array<String>,prefix:String,name:String}} options - encoded object options\r\n   * @returns {Object} one hot encoded object\r\n   */\r\n  static encodeObject(data, options) {\r\n    const { labels, prefix, name, } = options;\r\n    const encodedData = labels.reduce((encodedObj, label) => {\r\n      const oneHotLabelArrayName = `${prefix}${label}`;\r\n      encodedObj[ oneHotLabelArrayName ] = (label && data[ name ] && data[ name ].toString() === label.toString()) ? 1 : 0;\r\n      return encodedObj;\r\n    }, {});\r\n    return encodedData;\r\n  }\r\n  /**\r\n * returns a new object of one hot encoded values\r\n * @example\r\n * // [ 'Brazil','Mexico','Ghana','Mexico','Ghana','Brazil','Mexico','Brazil','Ghana', 'Brazil' ]\r\nconst originalCountry = dataset.columnArray('Country'); \r\n\r\n// { originalCountry:\r\n//    { Country_Brazil: [ 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ],\r\n//      Country_Mexico: [ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0 ],\r\n//      Country_Ghana: [ 0, 0, 1, 0, 1, 0, 0, 0, 1, 0 ] },\r\n//     }\r\nconst oneHotCountryColumn = dataset.oneHotEncoder('Country'); \r\n  * @param {string} name - csv column header, or JSON object property name \r\n  * @param options \r\n  * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html}\r\n  * @return {Object}\r\n  */\r\n  static oneHotEncoder(name, options) {\r\n    const config = Object.assign({\r\n      merge: true,\r\n    }, options);\r\n    const labelData = config.data || this.columnArray(name, config.columnArrayOptions);\r\n    const labels = Array.from(new Set(labelData).values());\r\n    const prefix = config.prefix || `${name}_`;\r\n    const encodedData = labelData.reduce(\r\n      (result, val, index, arr) => {\r\n        labels.forEach(encodedLabel => {\r\n          const oneHotLabelArrayName = `${prefix}${encodedLabel}`;\r\n          const oneHotVal = (val === encodedLabel) ? 1 : 0;\r\n          if (Array.isArray(result[ oneHotLabelArrayName ])) {\r\n            result[ oneHotLabelArrayName ].push(oneHotVal);\r\n          } else {\r\n            result[ oneHotLabelArrayName ] = [oneHotVal, ];\r\n          }\r\n        });\r\n        return result;\r\n      }, {});\r\n    if (this.encoders.has(name) && config.merge) {\r\n      this.encoders.get(name).labels = Array.from(new Set(labels.concat(this.encoders.get(name).labels)));\r\n      // this.encoders.get(name);\r\n    } else {\r\n      this.encoders.set(name, {\r\n        name,\r\n        labels,\r\n        prefix,\r\n      });\r\n    }\r\n    return encodedData;\r\n  }\r\n  /**\r\n   * Return one hot encoded data\r\n   * @example\r\nconst csvData = [{\r\n    'Country': 'Brazil',\r\n    'Age': '44',\r\n    'Salary': '72000',\r\n    'Purchased': 'N',\r\n  },\r\n  {\r\n    'Country': 'Mexico',\r\n    'Age': '27',\r\n    'Salary': '48000',\r\n    'Purchased': 'Yes',\r\n  },\r\n  ...\r\n];\r\nconst EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);\r\nEncodedCSVDataSet.fitColumns({\r\n  columns: [\r\n    {\r\n      name: 'Country',\r\n      options: { strategy: 'onehot', },\r\n    },\r\n  ],\r\n});\r\n\r\nEncodedCSVDataSet.oneHotDecoder('Country);// =>\r\n// [ { Country: 'Brazil' },\r\n//  { Country: 'Mexico' },\r\n//  { Country: 'Ghana' },\r\n//  { Country: 'Mexico' },\r\n//   ...]\r\n   * @param {string} name - column name \r\n   * @param options \r\n   * @returns {Array<Object>} returns an array of objects from an one hot encoded column\r\n   */\r\n  static oneHotDecoder(name, options) {\r\n    const config = Object.assign({\r\n      // handle_unknown: 'error'\r\n    }, options);\r\n    const encoderMap = config.encoders || this.encoders;\r\n    const prefix = config.prefix || encoderMap.get(name).prefix;\r\n    const labels = config.labels || encoderMap.get(name).labels;\r\n    const encodedData = config.data || this.oneHotColumnArray(name, config.oneHotColumnArrayOptions);\r\n    // console.log({ encodedData, encoderMap, prefix });\r\n    return encodedData.reduce((result, val) => {\r\n      const columnNames = Object.keys(val).filter(prop => val[ prop ] === 1 && (labels.indexOf(prop.replace(prefix, '')) !== -1 || labels.map(label => String(label)).indexOf(prop.replace(prefix, '')) !== -1));\r\n      const columnName = columnNames[ 0 ] || '';\r\n      // console.log({ columnName, columnNames, labels, val},Object.keys(val));\r\n      const datum = {\r\n        [ name ]: columnName.replace(prefix, ''),\r\n      };\r\n      result.push(datum);\r\n      return result;\r\n    }, []);\r\n  }\r\n  /**\r\n   * returns a list of objects with only selected columns as properties\r\n * @example\r\nconst data = [{ Age: '44', Salary: '44' , Height: '34' },\r\n{ Age: '27', Salary: '44' , Height: '50'  }]\r\nconst AgeDataSet = new MS.DataSet(data);\r\nconst cols = [ 'Age', 'Salary' ];\r\nconst selectedCols = CSVDataSet.selectColumns(cols); // => [{ Age: '44', Salary: '44' },\r\n{ Age: '27', Salary: '27' }]\r\n   * \r\n   * @param {String[]} names - array of selected columns\r\n   * @param {*} options \r\n   * @returns {Object[]} an array of objects with properties derived from names\r\n   */\r\n  static selectColumns(names, options = {}) {\r\n    const config = Object.assign({}, options);\r\n    const data = config.data || this.data;\r\n    return data.reduce((result, val) => {\r\n      const selectedData = {};\r\n      names.forEach(name => {\r\n        selectedData[ name ] = val[ name ];\r\n      });\r\n      result.push(selectedData);\r\n      return result;\r\n    }, []);\r\n  }\r\n  /**\r\n   * returns a new array of a selected column from an array of objects, can filter, scale and replace values\r\n   * @example \r\n   * //column Array returns column of data by name\r\n// [ '44','27','30','38','40','35','','48','50', '37' ]\r\nconst OringalAgeColumn = dataset.columnArray('Age'); \r\n  * @param {string} name - csv column header, or JSON object property name \r\n  * @param options \r\n  * @param {function} [options.prefilter=(arr[val])=>true] - prefilter values to return\r\n  * @param {function} [options.filter=(arr[val])=>true] - filter values to return\r\n  * @param {function} [options.replace.test=undefined] - test function for replacing values (arr[val])\r\n  * @param {(string|number|function)} [options.replace.value=undefined] - value to replace (arr[val]) if replace test is true, if a function (result,val,index,arr,name)=>your custom value\r\n  * @param {number} [options.parseIntBase=10] - radix value for parseInt\r\n  * @param {boolean} [options.parseFloat=false] - convert values to floats \r\n  * @param {boolean} [options.parseInt=false] - converts values to ints \r\n  * @param {boolean} [options.scale=false] - standard or minmax feature scale values \r\n  * @returns {array}\r\n  */\r\n  static columnArray(name, options = {}) {\r\n    const config = Object.assign({\r\n      prefilter: () => true,\r\n      filter: () => true,\r\n      replace: {\r\n        test: undefined,\r\n        value: undefined,\r\n      },\r\n      parseInt: false,\r\n      parseIntBase: 10,\r\n      parseFloat: (options.scale) ? true : false,\r\n      scale: false,\r\n    }, options);\r\n    const data = config.data || this.data;\r\n    const modifiedColumn = data\r\n      .filter(config.prefilter)\r\n      .reduce((result, val, index, arr) => {\r\n        let objVal = val[ name ];\r\n        let returnVal = (typeof config.replace.test === 'function') ?\r\n          config.replace.test(objVal) ?\r\n            typeof config.replace.value === 'function' ?\r\n              config.replace.value(result, val, index, arr, name) :\r\n              config.replace.value :\r\n            objVal :\r\n          objVal;\r\n        if (config.filter(returnVal)) {\r\n          if (config.parseInt) result.push(parseInt(returnVal, config.parseIntBase));\r\n          else if (config.parseFloat) result.push(parseFloat(returnVal));\r\n          else result.push(returnVal);\r\n        }\r\n        return result;\r\n      }, []);\r\n    if (typeof config.scale === 'function') {\r\n      return modifiedColumn.map(config.scale);\r\n    } else if (config.scale) {\r\n      switch (config.scale) {\r\n      case 'standard':\r\n        return utils.StandardScaler(modifiedColumn);\r\n      case 'log':\r\n        return utils.LogScaler(modifiedColumn);\r\n      case 'exp':\r\n        return utils.ExpScaler(modifiedColumn);\r\n      case 'normalize':\r\n      default:\r\n        return utils.MinMaxScaler(modifiedColumn);\r\n      }\r\n    } else {\r\n      return modifiedColumn;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * returns a matrix of values by combining column arrays into a matrix\r\n   * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\r\ncsvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>\r\n//[ \r\n//  [1,5], \r\n//  [2,6], \r\n//]\r\n  * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix\r\n  * @param {Array} [data=[]] - array of data to convert to matrix\r\n  * @returns {Array} a matrix of column values \r\n  */\r\n  static columnMatrix(vectors = [], data = []) {\r\n    const options = (data.length) ? { data, } : {};\r\n    const columnVectors = (Array.isArray(vectors) && Array.isArray(vectors[ 0 ]))\r\n      ? vectors\r\n      : vectors.map(vector => [vector, options, ]);\r\n    const vectorArrays = columnVectors\r\n      .map(vec => DataSet.columnArray.call(this, ...vec));\r\n        \r\n    return utils.pivotArrays(vectorArrays);\r\n  }\r\n  /**\r\n   * returns a JavaScript Object from a Map (supports nested Map Objects)\r\n   * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\r\ncsvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>\r\n//[ \r\n//  [1,5], \r\n//  [2,6], \r\n//]\r\n  * @param {Map} mapObj - Map to convert into JavaScript Object\r\n  * @returns {Object} JavaScript Object converted from a Map\r\n  */\r\n  static mapToObject(mapObj = new Map()){\r\n    return Array.from(mapObj.keys())\r\n      .reduce((result, val) => {\r\n        const mapVal = mapObj.get(val);\r\n        if (mapVal instanceof Map) {\r\n          result[ val ] = DataSet.mapToObject(mapVal);\r\n        } else if (typeof mapVal === 'function') {\r\n          result[ val ] = `[Function ${mapVal.name}]`;\r\n        } else {\r\n          result[ val ] = JSON.parse(JSON.stringify(mapVal));\r\n        }\r\n        return result;\r\n      }, {});\r\n  }\r\n  /**\r\n   * returns 0 or 1 depending on the input value\r\n   * @example DataSet.getBinaryValue('true') // => 1\r\nDataSet.getBinaryValue('false') // => 0\r\nDataSet.getBinaryValue('No') // => 0\r\nDataSet.getBinaryValue(false) // => 0\r\n  * @param {String|Number} [value=''] - value to convert to a 1 or a 0\r\n  * @returns {Number} 0 or 1 depending on truthiness of value\r\n  */\r\n  static getBinaryValue(value='') {\r\n    if (!value) return 0;\r\n    switch (value) {\r\n    case false:\r\n    case 'N':\r\n    case 'n':\r\n    case 'NO':\r\n    case 'No':\r\n    case 'no':\r\n    case 'False':\r\n    case 'F':\r\n    case 'f':\r\n      return 0;\r\n    default:\r\n      return 1;\r\n    }\r\n  }\r\n  /**\r\n   * creates a new raw data instance for preprocessing data for machine learning\r\n   * @example\r\n   * const dataset = new ms.DataSet(csvData);\r\n   * @param {Object[]} dataset\r\n   * @returns {this} \r\n   */\r\n  constructor(data = [], options = {}) {\r\n    this.config = Object.assign({\r\n      debug: true,\r\n    }, options);\r\n    this.data = [...data, ];\r\n    this.labels = new Map();\r\n    this.encoders = new Map();\r\n    this.scalers = new Map();\r\n    this.selectColumns = DataSet.selectColumns;\r\n    this.columnArray = DataSet.columnArray;\r\n    this.encodeObject = DataSet.encodeObject;\r\n    this.oneHotEncoder = DataSet.oneHotEncoder;\r\n    this.oneHotDecoder = DataSet.oneHotDecoder;\r\n    this.columnMatrix = DataSet.columnMatrix;\r\n    this.reverseColumnMatrix = DataSet.reverseColumnMatrix;\r\n    this.reverseColumnVector = DataSet.reverseColumnVector;\r\n    this.getTransforms = DataSet.getTransforms;\r\n    if (this.config.labels || this.config.encoders || this.config.scalers) {\r\n      this.importFeatures({\r\n        labels: this.config.labels,\r\n        encoders: this.config.encoders,\r\n        scalers: this.config.scalers,\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * returns Object of all encoders and scalers \r\n   * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);\r\nDataSet.fitColumns({col1:['label',{binary:true}]}); \r\nDataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]\r\nDataset.exportFeatures() //=> { labels: { col1: { \"0\": false, \"1\": true, \"N\": 0, \"Yes\": 1, \"No\": 0, \"f\": 0, \"false\": 1, } } }\r\n  * @param {Function} [filter=()=>true] - filter function\r\n  * @returns {{labels:Map,encoders:Map,scalers:map}} JavaScript Object of transforms encoders and scalers(labels, encoders, scalers) \r\n  */\r\n  exportFeatures(options = {}) {\r\n    const config = Object.assign({\r\n    }, options);\r\n    return {\r\n      encoders: DataSet.mapToObject(this.encoders),\r\n      labels: DataSet.mapToObject(this.labels),\r\n      scalers: DataSet.mapToObject(this.scalers),\r\n    };\r\n  }\r\n  /**\r\n   * set encoders, labels and scalers \r\n   * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);\r\nDataSet.fitColumns({col1:['label',{binary:true}]}); \r\nDataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]\r\nDataset.exportFeatures() //=> { labels: { col1: { \"0\": false, \"1\": true, \"N\": 0, \"Yes\": 1, \"No\": 0, \"f\": 0, \"false\": 1, } } }\r\n  * @param {{labels:Map,encoders:Map,scalers:map}} [features={}] - JavaScript Object of transforms encoders and scalers(labels, encoders, scalers) \r\n  */\r\n  importFeatures(features = {}) {\r\n    Object.keys(features.encoders || {}).forEach(encoderName => { \r\n      const encoder = features.encoders[ encoderName ];\r\n      this.encoders.set(encoderName, encoder);\r\n    });\r\n    Object.keys(features.labels || {}).forEach(labelName => {\r\n      const labelData = features.labels[labelName];\r\n      const labels = Object.keys(labelData)\r\n        .map(labelProp => [labelProp, labelData[ labelProp ], ]);\r\n      if (typeof labelData[ '0' ] !== 'undefined' && typeof labelData[ '1' ] !== 'undefined') {\r\n        labels.push(...[\r\n          [ 0, false, ],\r\n          [ false, 0, ],\r\n          [ null, 0, ],\r\n          [ 'no', 0, ],\r\n          [ 'No', 0, ],\r\n          [ 'NO', 0, ],\r\n          [ 'F', 0, ],\r\n          [ 'f', 0, ],\r\n          [ 'null', 0, ],\r\n          [ '', 0, ],\r\n          [ undefined, 0, ],\r\n          [ 'undefined', 0, ],\r\n          [ 1, true, ],\r\n          [ true, 1, ],\r\n        ]);\r\n      }\r\n      this.labels.set(labelName, new Map(labels));\r\n    });\r\n    Object.keys(features.scalers || {}).forEach(scalerName => {\r\n      let transforms;\r\n      const scalerData = features.scalers[ scalerName ];\r\n      const { config, } = scalerData;\r\n      switch (config.strategy) {\r\n      case 'standard':\r\n        transforms = utils.StandardScalerTransforms(...[undefined, config.nan_value, config.return_nan, scalerData.components,]);\r\n        scalerData.scale = transforms.scale;  \r\n        scalerData.descale = transforms.descale;  \r\n        break;\r\n      case 'normalize':\r\n      case 'minmax':\r\n        transforms = utils.MinMaxScalerTransforms(...[undefined, config.nan_value, config.return_nan, scalerData.components,]);\r\n        scalerData.scale = transforms.scale;  \r\n        scalerData.descale = transforms.descale;   \r\n        break;\r\n      case 'log':\r\n      default:\r\n        scalerData.scale = Math.log;  \r\n        scalerData.descale = Math.exp;  \r\n        break;\r\n      }\r\n      this.scalers.set(scalerName, scalerData);\r\n    });\r\n  }\r\n  /**\r\n   * returns filtered rows of data \r\n   * @example const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\r\ncsvObj.filterColumn((row)=>row.col1>=2); // =>\r\n//[ \r\n//  [2,6], \r\n//]\r\n  * @param {Function} [filter=()=>true] - filter function\r\n  * @returns {Array} filtered array of data \r\n  */\r\n  filterColumn(filter = () => true) {\r\n    return this.data.filter(filter);\r\n  }\r\n  /**\r\n   * Returns a new array of scaled values which can be reverse (descaled). The scaling transformations are stored on the DataSet\r\n   * @example\r\n//dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\r\ndataset.columnScale('Age',{strategy:'log'}) // => [ 3.784189633918261,\r\n  3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]\r\ndataset.scalers.get('Age').scale(45) // => 3.8066624897703196\r\ndataset.scalers.get('Age').descale(3.8066624897703196) // => 45\r\n//this supports, log/exponent, minmax/normalization and standardscaling\r\n   * @param {string} name - name - csv column header, or JSON object property name \r\n   * @param {string} [options.strategy=\"log\"] - strategy for scaling values \r\n   * @returns {number[]} returns an array of scaled values\r\n   */\r\n  columnScale(name, options = {}) {\r\n    const input = (typeof options === 'string')\r\n      ? { strategy: options, }\r\n      : options;\r\n    const config = Object.assign({\r\n      strategy: 'log',\r\n      forced_coercion: false,\r\n    }, input);\r\n    let scaleData = config.data || this.columnArray(name, config.columnArrayOptions);\r\n    let scaledData;\r\n    let transforms;\r\n      \r\n    scaleData = scaleData.filter(datum => typeof datum !== 'undefined')\r\n      .map((datum, i) => {\r\n        if (typeof datum !== 'number') {\r\n          if (this.config.debug && config.forced_coercion===false) {\r\n            console.error(TypeError(`Each value must be a number, error at index [${name}][${i}]: <${typeof datum}>${datum}`));\r\n          }\r\n          const num = Number(datum);\r\n          if (isNaN(num) && config.forced_coercion) {\r\n            return 0;\r\n          } else if (isNaN(num)) {\r\n            throw TypeError(`Only numerical values in (${name}) can be scaled i: ${i} datum: ${datum}`);\r\n          }\r\n          return num;\r\n        } else return datum;\r\n      });\r\n    switch (config.strategy) {\r\n    case 'standard':\r\n      transforms = utils.StandardScalerTransforms(...[scaleData, config.nan_value, config.return_nan,]);\r\n      this.scalers.set(name, {\r\n        name,\r\n        scale: transforms.scale,\r\n        descale: transforms.descale,\r\n        components: transforms.components,\r\n      });\r\n      scaledData = transforms.values;\r\n      break;\r\n    case 'normalize':\r\n    case 'minmax':\r\n      transforms = utils.MinMaxScalerTransforms(...[scaleData, config.nan_value, config.return_nan,]);     \r\n      this.scalers.set(name, {\r\n        name,\r\n        scale: transforms.scale,\r\n        descale: transforms.descale,\r\n        components: transforms.components,\r\n      });\r\n      scaledData = transforms.values;\r\n      break;\r\n    case 'log':\r\n    default:\r\n      this.scalers.set(name, {\r\n        name,\r\n        scale: Math.log,\r\n        descale: Math.exp,\r\n        components: {\r\n          average : utils.avg(scaleData),\r\n          standard_dev : utils.sd(scaleData),\r\n          maximum : utils.max(scaleData),\r\n          minimum : utils.min(scaleData),\r\n        },\r\n      });\r\n      scaledData = utils.LogScaler(scaleData);\r\n      break;\r\n    }\r\n    this.scalers.get(name).config = config;\r\n    return scaledData;\r\n  }\r\n  /**\r\n   * Returns a new array of descaled values\r\n   * @example\r\n//dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\r\nconst scaledData = [ 3.784189633918261,\r\n  3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]\r\ndataset.columnDescale('Age') // => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\r\n   * @param {string} name - name - csv column header, or JSON object property name \r\n   * @param {string} [options.strategy=\"log\"] - strategy for scaling values \r\n   * @returns {number[]} returns an array of scaled values\r\n   */\r\n  columnDescale(name, options) {\r\n    const config = Object.assign({ }, options);\r\n    const scaledData = config.data || this.columnArray(name, config.columnArrayOptions);\r\n    const descaleFunction = this.scalers.get(name).descale;\r\n    return scaledData.map(descaleFunction);\r\n  }\r\n  /**\r\n   * returns a new array and label encodes a selected column\r\n   * @example\r\n   * const oneHotCountryColumn = dataset.oneHotEncoder('Country'); \r\n\r\n// [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ] \r\nconst originalPurchasedColumn = dataset.labelEncoder('Purchased');\r\n// [ 0, 1, 0, 0, 1, 1, 1, 1, 0, 1 ]\r\nconst encodedBinaryPurchasedColumn = dataset.labelEncoder('Purchased',{ binary:true });\r\n// [ 0, 1, 2, 3, 1, 1, 4, 1, 2, 1 ]\r\nconst encodedPurchasedColumn = dataset.labelEncoder('Purchased'); \r\n  * @param {string} name - csv column header, or JSON object property name \r\n  * @param options\r\n  * @param {boolean} [options.binary=false] - only replace with (0,1) with binary values \r\n  * @param {function} options.sortFunction - custom label encoding value sort function\r\n  * @see {@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html} \r\n  * @returns {array}\r\n  */\r\n  labelEncoder(name, options) {\r\n    const config = Object.assign({\r\n      binary: false,\r\n      merge: true,\r\n    }, options);\r\n    const labelData = config.data || this.columnArray(name, config.columnArrayOptions);\r\n    let labelDataUniqueValues = Array.from(new Set(labelData).values()).sort(config.sortFunction);\r\n    const labels = new Map(\r\n      labelDataUniqueValues\r\n        .reduce((result, val, i) => {\r\n          if (config.binary) {\r\n            if (i === 0) {\r\n              result.push(...[\r\n                [0, false,],\r\n                ['0', false,],\r\n                [1, true,],\r\n                ['1', true,],\r\n              ]);\r\n            }\r\n            result.push([val, DataSet.getBinaryValue(val),]);\r\n          } else {\r\n            result.push([val, i,]);\r\n            result.push([i, val,]);\r\n          }\r\n          return result;\r\n        }, [])\r\n    );\r\n    if (this.labels.has(name) && config.merge) {\r\n      this.labels.set(name, new Map([...this.labels.get(name), ...labels,]));\r\n    } else this.labels.set(name, labels);\r\n    const labeledData = (config.binary) ?\r\n      labelData.map(DataSet.getBinaryValue) :\r\n      labelData.map(label => labels.get(label));\r\n    return labeledData;\r\n  }\r\n  /**\r\n     * returns a new array and decodes an encoded column back to the original array values\r\n     * @param {string} name - csv column header, or JSON object property name \r\n     * @param options\r\n     * @returns {array}\r\n     */\r\n  labelDecode(name, options) {\r\n    const config = Object.assign({}, options);\r\n    const labelData = config.data || this.columnArray(name, config.columnArrayOptions);\r\n    return labelData.map(val => this.labels.get(name).get(val));\r\n  }\r\n  /**\r\n   * Return one hot encoded data\r\n   * @example\r\nconst csvData = [{\r\n    'Country': 'Brazil',\r\n    'Age': '44',\r\n    'Salary': '72000',\r\n    'Purchased': 'N',\r\n  },\r\n  {\r\n    'Country': 'Mexico',\r\n    'Age': '27',\r\n    'Salary': '48000',\r\n    'Purchased': 'Yes',\r\n  },\r\n  ...\r\n];\r\nconst EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);\r\nEncodedCSVDataSet.fitColumns({\r\n  columns: [\r\n    {\r\n      name: 'Country',\r\n      options: { strategy: 'onehot', },\r\n    },\r\n  ],\r\n});\r\n\r\nEncodedCSVDataSet.oneHotColumnArray('Country);// =>\r\n// [ { Country_Brazil: 1, Country_Mexico: 0, Country_Ghana: 0 },\r\n//   { Country_Brazil: 0, Country_Mexico: 1, Country_Ghana: 0 },\r\n//   { Country_Brazil: 0, Country_Mexico: 0, Country_Ghana: 1 },\r\n//   ...]\r\n   * @param {string} name - column name \r\n   * @param options \r\n   * @returns {Array<Object>} returns an array of objects from an one hot encoded column\r\n   */\r\n  oneHotColumnArray(name, options) {\r\n    const config = Object.assign({\r\n      // handle_unknown: 'error'\r\n    }, options);\r\n    const labels = config.labels || this.encoders.get(name).labels;\r\n    const prefix = config.prefix || this.encoders.get(name).prefix;\r\n    return this.selectColumns(labels.map(label => `${prefix}${label}`));\r\n  }\r\n  /**\r\n * it returns a new column that reduces a column into a new column object, this is used in data prep to create new calculated columns for aggregrate statistics\r\n * @example \r\nconst reducer = (result, value, index, arr) => {\r\nresult.push(value * 2);\r\nreturn result;\r\n};\r\nCSVDataSet.columnReducer('DoubleAge', {\r\ncolumnName: 'Age',\r\nreducer,\r\n}); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }\r\n  * @param {String} name - name of new Column \r\n  * @param {Object} options \r\n  * @param {String} options.columnName - name property for columnArray selection \r\n  * @param {Object} options.columnOptions - options property for columnArray  \r\n  * @param {Function} options.reducer - reducer function to reduce into new array, it should push values into the resulting array  \r\n  * @returns {Object} a new object that has reduced array as the value\r\n  */\r\n  columnReducer(name, options) {\r\n    const newColumn = {\r\n      [ name ]: this.columnArray(options.columnName, options.columnOptions).reduce(options.reducer, []),\r\n    };\r\n    return newColumn;\r\n  }\r\n  /**\r\n   * it returns a new column that is merged onto the data set\r\n   * @example \r\nCSVDataSet.columnMerge('DoubleAge', [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ]); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }\r\n    * @param {String} name - name of new Column \r\n    * @param {Array} data - new dataset data  \r\n    * @returns {Object} \r\n    */\r\n  columnMerge(name, data=[]) {\r\n    if (this.data.length !== data.length) throw new RangeError(`Merged data column must have the same length(${data.length}) as the DataSet's length (${this.data.length})`);\r\n    return {\r\n      [name]: data,\r\n    };\r\n  }\r\n  /**\r\n   * Inverses transform on an object\r\n   * @example\r\nDataSet.data; //[{\r\n//   Age: 0.6387122698222066,\r\n//   Salary: 72000,\r\n//   Purchased: 0,\r\n//   Country_Brazil: 1,\r\n//   Country_Mexico: 0,\r\n//   Country_Ghana: 0,\r\n// }, ...] \r\nDataSet.inverseTransformObject(DataSet.data[0]); // => {\r\n//  Country: 'Brazil', \r\n//  Age: 44, \r\n//  Salary: 72000, \r\n//  Purchased: 'N', \r\n// };\r\n   * @param data \r\n   * @param options \r\n   * @returns {Object} returns object with inverse transformed data\r\n   */\r\n  inverseTransformObject(data, options) {\r\n    const config = Object.assign({\r\n      removeValues: false,\r\n    }, options);\r\n    const removedColumns = [];\r\n    let transformedObject = Object.assign({}, data);\r\n    const columnNames = Object.keys(this.data[ 0 ]);\r\n    const scaledData = columnNames.reduce((scaleObject, columnName) => {\r\n      if (this.scalers.has(columnName)){\r\n        scaleObject[ columnName ] = this.scalers.get(columnName).descale(data[ columnName ]);\r\n      }\r\n      return scaleObject;\r\n    }, {});\r\n    const labeledData = columnNames.reduce((labelObject, columnName) => {\r\n      if (this.labels.has(columnName)){\r\n        labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);\r\n      }\r\n      return labelObject;\r\n    }, {});\r\n    const encodedData = columnNames.reduce((encodedObject, columnName) => {\r\n      if (this.encoders.has(columnName)) {\r\n        const encoded = this.oneHotDecoder(columnName, {\r\n          data: [data,],\r\n        });\r\n        // console.log({encoded})\r\n        encodedObject = Object.assign({}, encodedObject, encoded[ 0 ]);\r\n        if (config.removeValues) {\r\n          removedColumns.push(...this.encoders.get(columnName).labels.map(label=>`${this.encoders.get(columnName).prefix}${label}`));\r\n        }\r\n      }\r\n      return encodedObject;\r\n    }, {});\r\n    transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);\r\n    if (config.removeValues && removedColumns.length) {\r\n      transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {\r\n        if (removedColumns.indexOf(propertyName) === -1) {\r\n          removedObject[ propertyName ] = transformedObject[ propertyName ];\r\n        }\r\n        return removedObject;\r\n      }, {});\r\n    }\r\n    return transformedObject;\r\n  }\r\n  /**\r\n   * transforms an object and replaces values that have been scaled or encoded\r\n   * @example\r\nDataSet.transformObject({\r\n  'Country': 'Brazil',\r\n  'Age': '44',\r\n  'Salary': '72000',\r\n  'Purchased': 'N',\r\n}); // =>\r\n// { \r\n//  Country: 'Brazil',\r\n//  Age: 3.784189633918261,\r\n//  Salary: '72000',\r\n//  Purchased: 'N',\r\n//  Country_Brazil: 1,\r\n//  Country_Mexico: 0,\r\n//  Country_Ghana: 0\r\n// }\r\n   * @param data \r\n   * @param options \r\n   * @returns {Object} \r\n   */\r\n  transformObject(data, options) {\r\n    const config = Object.assign({\r\n      removeValues: false,\r\n      checkColumnLength: true,\r\n    }, options);\r\n    const removedColumns = [];\r\n    // if (Array.isArray(data)) return data.map(datum => this.transformObject);\r\n    const encodedColumns = [].concat(...Array.from(this.encoders.keys())\r\n      .map(encodedColumn => this.encoders.get(encodedColumn).labels\r\n        .map(label=>`${this.encoders.get(encodedColumn).prefix}${label}`)\r\n      )\r\n    );\r\n    const currentColumns = (this.data.length)\r\n      ? Object.keys(this.data[ 0 ])\r\n      : Object.keys(data);\r\n    const objectColumns = Object.keys(data).concat(encodedColumns);\r\n    // console.log({ encodedColumns,currentColumns,objectColumns });\r\n    const differentKeys = objectColumns.reduce((diffKeys, val) => {\r\n      if (currentColumns.indexOf(val) === -1 && encodedColumns.indexOf(val) === -1) diffKeys.push(val);\r\n      return diffKeys;\r\n    }, []);\r\n    let transformedObject = Object.assign({}, data);\r\n    if (config.checkColumnLength && currentColumns.length !== objectColumns.length && currentColumns.length+encodedColumns.length !== objectColumns.length ) {\r\n      throw new RangeError(`Object must have the same number of keys (${objectColumns.length}) as data in your dataset(${currentColumns.length})`);\r\n    } else if (config.checkColumnLength && differentKeys.length) {\r\n      throw new ReferenceError(`Object must have identical keys as data in your DataSet. Invalid keys: ${differentKeys.join(',')}`);\r\n    } else {\r\n      const scaledData = objectColumns.reduce((scaleObject, columnName) => {\r\n        if (this.scalers.has(columnName)){\r\n          scaleObject[ columnName ] = this.scalers.get(columnName).scale(data[ columnName ]);\r\n        }\r\n        return scaleObject;\r\n      }, {});\r\n      const labeledData = objectColumns.reduce((labelObject, columnName) => {\r\n        if (this.labels.has(columnName)){\r\n          labelObject[ columnName ] = this.labels.get(columnName).get(data[ columnName ]);\r\n        }\r\n        return labelObject;\r\n      }, {});\r\n      const encodedData = objectColumns.reduce((encodedObject, columnName) => {\r\n        if (this.encoders.has(columnName)) {\r\n          encodedObject = Object.assign({}, encodedObject, this.encodeObject(data, this.encoders.get(columnName)));\r\n          if (config.removeValues) {\r\n            removedColumns.push(columnName);\r\n          }\r\n        }\r\n        return encodedObject;\r\n      }, {});\r\n      transformedObject = Object.assign(transformedObject, scaledData, labeledData, encodedData);\r\n      if (config.removeValues && removedColumns.length) {\r\n        transformedObject = Object.keys(transformedObject).reduce((removedObject, propertyName) => {\r\n          if (removedColumns.indexOf(propertyName) === -1) removedObject[ propertyName ] = transformedObject[ propertyName ];\r\n          return removedObject;\r\n        }, {});\r\n      }\r\n    }\r\n    return transformedObject;\r\n  } \r\n  /**\r\n   * returns a new array of a selected column from an array of objects and replaces empty values, encodes values and scales values\r\n   * @example\r\n   * //column Replace returns new Array with replaced missing data\r\n//[ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\r\nconst ReplacedAgeMeanColumn = dataset.columnReplace('Age',{strategy:'mean'});\r\n  * @param {string} name - csv column header, or JSON object property name \r\n  * @param options \r\n  * @param {boolean} [options.empty=true] - replace empty values \r\n  * @param {boolean} [options.strategy=\"mean\"] - strategy for replacing value, any array stat method from ml.js (mean, standardDeviation, median) or (label,labelEncoder,onehot,oneHotEncoder)\r\n  * @returns {array|Object[]}\r\n  */\r\n  columnReplace(name, options = {}) {\r\n    const config = Object.assign({\r\n      strategy: 'mean',\r\n      empty: true,\r\n      arrayOptions: {\r\n        parseFloat: true,\r\n        filter: val => val,\r\n      },\r\n      labelOptions: {},\r\n    }, options);\r\n    let replaceVal;\r\n    let replace = {\r\n      test: val => !val,\r\n      value: replaceVal,\r\n    };\r\n    switch (config.strategy) {\r\n    case 'scale':\r\n      replaceVal = this.columnScale(name, config.scaleOptions);\r\n      replace = {\r\n        test: val => true,\r\n        value: (result, val, index, arr) => replaceVal[index],\r\n      };\r\n      break;\r\n    case 'descale':\r\n      replaceVal = this.columnDescale(name, config.descaleOptions);\r\n      replace = {\r\n        test: val => true,\r\n        value: (result, val, index, arr) => replaceVal[index],\r\n      };\r\n      break;\r\n    case 'label':\r\n    case 'labelEncoder':\r\n      replaceVal = this.labelEncoder(name, config.labelOptions);\r\n      replace = {\r\n        test: val => true,\r\n        value: (result, val, index, arr) => replaceVal[index],\r\n      };\r\n      break;\r\n    case 'labeldecode':\r\n    case 'labelDecode':\r\n    case 'labelDecoder':\r\n      replaceVal = this.labelDecode(name, config.labelOptions);\r\n      replace = {\r\n        test: val => true,\r\n        value: (result, val, index, arr) => replaceVal[index],\r\n      };\r\n      break;\r\n    case 'onehot':\r\n    case 'oneHot':\r\n    case 'oneHotEncode':\r\n    case 'oneHotEncoder':\r\n      replaceVal = this.oneHotEncoder(name, config.oneHotOptions);\r\n      replace = {\r\n        test: val => true,\r\n        value: (result, val, index, arr) => replaceVal[index],\r\n      };\r\n      return replaceVal;\r\n      // break;\r\n    case 'reducer':\r\n    case 'reduce':\r\n      replaceVal = this.columnReducer(name, config.reducerOptions); \r\n      return replaceVal;  \r\n    case 'merge':\r\n      replaceVal = this.columnMerge(name, config.mergeData); \r\n      return replaceVal; \r\n    case 'parseNumber':\r\n      replaceVal = this.columnArray(name).map(num => Number(num)); \r\n      return replaceVal; \r\n    default:\r\n      replaceVal = ml.ArrayStat[config.strategy](this.columnArray(name, config.arrayOptions));\r\n      replace.value = replaceVal;\r\n      break;\r\n    }\r\n    return this.columnArray(name,\r\n      Object.assign({}, {\r\n        replace,\r\n        scale: options.scale,\r\n      }, options.columnOptions));\r\n  }\r\n  /**\r\n     * mutates data property of DataSet by replacing multiple columns in a single command\r\n     * @example\r\n     * //fit Columns, mutates dataset\r\ndataset.fitColumns({\r\n  columns:[{name:'Age',options:{ strategy:'mean'} }]\r\n});\r\n// dataset\r\n// class DataSet\r\n//   data:[\r\n//     {\r\n//       'Country': 'Brazil',\r\n//       'Age': '38.77777777777778',\r\n//       'Salary': '72000',\r\n//       'Purchased': 'N',\r\n//     }\r\n//     ...\r\n//   ]\r\n  * @param {Boolean} options.returnData - return updated DataSet data property \r\n  * @param {Object[]} options.columns - {name:'columnName',options:{strategy:'mean',labelOoptions:{}},}\r\n  * @returns {Object[]}\r\n  */\r\n  fitColumns(options = {}, mockDataOptions = {}) {\r\n    const config = Object.assign({\r\n      returnData:true,\r\n      columns: [],\r\n    }, options);\r\n    if ( !options.columns || Array.isArray(options.columns) ===false) {\r\n      config.columns = (options.columns)\r\n        ? DataSet.getTransforms(options.columns)\r\n        : DataSet.getTransforms(options);\r\n    }\r\n    const fittedColumns = config.columns\r\n      .reduce((result, val, index, arr) => {\r\n        let replacedColumn = this.columnReplace(val.name, val.options);\r\n        if (Array.isArray(replacedColumn)) {\r\n          replacedColumn = replacedColumn.map(columnVal => ({\r\n            [val.name]: columnVal,\r\n          }));\r\n          result[val.name] = replacedColumn;\r\n        } else {\r\n          Object.keys(replacedColumn).forEach(repColName => {\r\n            result[repColName] = replacedColumn[repColName].map(columnVal => ({\r\n              [repColName]: columnVal,\r\n            }));\r\n          });\r\n        }\r\n        return result;\r\n      }, {});\r\n    if (Object.keys(fittedColumns) && Object.keys(fittedColumns).length) {\r\n      const columnNames = Object.keys(fittedColumns);\r\n      const fittedData = fittedColumns[columnNames[0]]\r\n        .reduce((result, val, index, arr) => {\r\n          const returnObj = {};\r\n          columnNames.forEach(colName => {\r\n            returnObj[colName] = fittedColumns[colName][index][colName];\r\n          });\r\n          result.push(returnObj);\r\n          return result;\r\n        }, []);\r\n      this.data = this.data.map((val, index) => Object.assign({}, val, fittedData[index]));\r\n    }\r\n    return config.returnData ? this.data : this;\r\n  }\r\n  /**\r\n   * Mutate dataset data by inversing all transforms\r\n   * @example\r\nDataSet.data;\r\n// [{ \r\n//  Country: 'Brazil',\r\n//  Age: 3.784189633918261,\r\n//  Salary: '72000',\r\n//  Purchased: 'N',\r\n//  Country_Brazil: 1,\r\n//  Country_Mexico: 0,\r\n//  Country_Ghana: 0\r\n// },\r\n// ...\r\n// ]\r\nDataSet.fitInverseTransforms(); // =>\r\n// [{\r\n//   'Country': 'Brazil',\r\n//   'Age': '44',\r\n//   'Salary': '72000',\r\n//   'Purchased': 'N',\r\n// },\r\n// ...\r\n// ]\r\n   * @param options \r\n   */\r\n  fitInverseTransforms(options = {}) {\r\n    const config = Object.assign({\r\n      returnData: true,\r\n    }, options);\r\n    this.data = this.data.map(val => {\r\n      return (options.removeValues)\r\n        ? this.inverseTransformObject(val, options)\r\n        : Object.assign({}, val, this.inverseTransformObject(val, options));\r\n    });\r\n    return config.returnData ? this.data : this;\r\n  }\r\n  /**\r\n   * Mutate dataset data with all transforms\r\n   * @param options\r\n   * @example\r\nDataSet.data;\r\n// [{\r\n//   'Country': 'Brazil',\r\n//   'Age': '44',\r\n//   'Salary': '72000',\r\n//   'Purchased': 'N',\r\n// },\r\n// ...\r\n// ]\r\nDataSet.fitTransforms(); // =>\r\n// [{ \r\n//  Country: 'Brazil',\r\n//  Age: 3.784189633918261,\r\n//  Salary: '72000',\r\n//  Purchased: 'N',\r\n//  Country_Brazil: 1,\r\n//  Country_Mexico: 0,\r\n//  Country_Ghana: 0\r\n// },\r\n// ...\r\n// ] \r\n   */\r\n  fitTransforms(options = {}) {\r\n    const config = Object.assign({\r\n      returnData: true,\r\n    }, options);\r\n    this.data = this.data.map(val => {\r\n      return (options.removeValues)\r\n        ? this.transformObject(val, options)\r\n        : Object.assign({}, val, this.transformObject(val, options));\r\n    });\r\n    return config.returnData ? this.data : this;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/DataSet.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "name": "transformConfigMap",
    "memberof": "src/DataSet.mjs",
    "static": true,
    "longname": "src/DataSet.mjs~transformConfigMap",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/DataSet.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 26,
    "kind": "class",
    "name": "DataSet",
    "memberof": "src/DataSet.mjs",
    "static": true,
    "longname": "src/DataSet.mjs~DataSet",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/DataSet.mjs",
    "importStyle": "{DataSet}",
    "description": "class for manipulating an array of objects, typically from CSV data",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DataSet"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "preprocessing"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "getTransforms",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.getTransforms",
    "access": "public",
    "description": "Allows for fit transform short hand notation",
    "examples": [
      "DataSet.getTransforms({\nAge: ['scale',],\nRating: ['label',],  }); //=> [\n//   {\n//    name: 'Age', options: { strategy: 'scale', }, },\n//   },\n//   { \n//    name: 'Rating', options: { strategy: 'label', }, \n//   },\n// ];"
    ],
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} returns fit columns, columns property"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "transforms",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "returns fit columns, columns property"
    }
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "reverseColumnMatrix",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.reverseColumnMatrix",
    "access": "public",
    "description": "returns an array of objects by applying labels to matrix of columns",
    "examples": [
      "const data = [{ Age: '44', Salary: '44' },\n{ Age: '27', Salary: '27' }]\nconst AgeDataSet = new MS.DataSet(data);\nconst dependentVariables = [ [ 'Age', ], [ 'Salary', ], ];\nconst AgeSalMatrix = AgeDataSet.columnMatrix(dependentVariables); // =>\n//  [ [ '44', '72000' ],\n//  [ '27', '48000' ] ];\nMS.DataSet.reverseColumnMatrix({vectors:AgeSalMatrix,labels:dependentVariables}); // => [{ Age: '44', Salary: '44' },\n{ Age: '27', Salary: '27' }]"
    ],
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object[]} an array of objects with properties derived from options.labels"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.vectors",
        "description": "array of vectors"
      },
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.labels",
        "description": "array of labels"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "an array of objects with properties derived from options.labels"
    }
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "reverseColumnVector",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.reverseColumnVector",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "encodeObject",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.encodeObject",
    "access": "public",
    "description": "Returns an object into an one hot encoded object",
    "examples": [
      "const labels = ['apple', 'orange', 'banana',];\nconst prefix = 'fruit_';\nconst name = 'fruit';\nconst options = { labels, prefix, name, };\nconst data = {\nfruit: 'apple',\n};\nEncodedCSVDataSet.encodeObject(data, options); // => { fruit_apple: 1, fruit_orange: 0, fruit_banana: 0, }"
    ],
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} one hot encoded object"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "object to encode"
      },
      {
        "nullable": null,
        "types": [
          "{labels:Array<String>,prefix:String,name:String}"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "encoded object options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "one hot encoded object"
    }
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "oneHotEncoder",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.oneHotEncoder",
    "access": "public",
    "description": "returns a new object of one hot encoded values",
    "examples": [
      "// [ 'Brazil','Mexico','Ghana','Mexico','Ghana','Brazil','Mexico','Brazil','Ghana', 'Brazil' ]\nconst originalCountry = dataset.columnArray('Country'); \n\n// { originalCountry:\n//    { Country_Brazil: [ 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ],\n//      Country_Mexico: [ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0 ],\n//      Country_Ghana: [ 0, 0, 1, 0, 1, 0, 0, 0, 1, 0 ] },\n//     }\nconst oneHotCountryColumn = dataset.oneHotEncoder('Country'); "
    ],
    "see": [
      "{@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html}"
    ],
    "lineNumber": 145,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "oneHotDecoder",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.oneHotDecoder",
    "access": "public",
    "description": "Return one hot encoded data",
    "examples": [
      "const csvData = [{\n'Country': 'Brazil',\n'Age': '44',\n'Salary': '72000',\n'Purchased': 'N',\n},\n{\n'Country': 'Mexico',\n'Age': '27',\n'Salary': '48000',\n'Purchased': 'Yes',\n},\n...\n];\nconst EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);\nEncodedCSVDataSet.fitColumns({\ncolumns: [\n{\nname: 'Country',\noptions: { strategy: 'onehot', },\n},\n],\n});\n\nEncodedCSVDataSet.oneHotDecoder('Country);// =>\n// [ { Country: 'Brazil' },\n//  { Country: 'Mexico' },\n//  { Country: 'Ghana' },\n//  { Country: 'Mexico' },\n//   ...]"
    ],
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} returns an array of objects from an one hot encoded column"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "column name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "returns an array of objects from an one hot encoded column"
    }
  },
  {
    "__docId__": 33,
    "kind": "method",
    "name": "selectColumns",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.selectColumns",
    "access": "public",
    "description": "returns a list of objects with only selected columns as properties",
    "examples": [
      "const data = [{ Age: '44', Salary: '44' , Height: '34' },\n{ Age: '27', Salary: '44' , Height: '50'  }]\nconst AgeDataSet = new MS.DataSet(data);\nconst cols = [ 'Age', 'Salary' ];\nconst selectedCols = CSVDataSet.selectColumns(cols); // => [{ Age: '44', Salary: '44' },\n{ Age: '27', Salary: '27' }]"
    ],
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object[]} an array of objects with properties derived from names"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "names",
        "description": "array of selected columns"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "an array of objects with properties derived from names"
    }
  },
  {
    "__docId__": 34,
    "kind": "method",
    "name": "columnArray",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.columnArray",
    "access": "public",
    "description": "returns a new array of a selected column from an array of objects, can filter, scale and replace values",
    "examples": [
      "//column Array returns column of data by name\n// [ '44','27','30','38','40','35','','48','50', '37' ]\nconst OringalAgeColumn = dataset.columnArray('Age'); "
    ],
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.prefilter",
        "description": "prefilter values to return"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.filter",
        "description": "filter values to return"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options.replace.test",
        "description": "test function for replacing values (arr[val])"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number",
          "function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "options.replace.value",
        "description": "value to replace (arr[val]) if replace test is true, if a function (result,val,index,arr,name)=>your custom value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "options.parseIntBase",
        "description": "radix value for parseInt"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.parseFloat",
        "description": "convert values to floats"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.parseInt",
        "description": "converts values to ints"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.scale",
        "description": "standard or minmax feature scale values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 35,
    "kind": "method",
    "name": "columnMatrix",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.columnMatrix",
    "access": "public",
    "description": "returns a matrix of values by combining column arrays into a matrix",
    "examples": [
      "const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\ncsvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>\n//[ \n//  [1,5], \n//  [2,6], \n//]"
    ],
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} a matrix of column values "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "vectors",
        "description": "array of arguments for columnArray to merge columns into a matrix"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "data",
        "description": "array of data to convert to matrix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "a matrix of column values"
    }
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "mapToObject",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.mapToObject",
    "access": "public",
    "description": "returns a JavaScript Object from a Map (supports nested Map Objects)",
    "examples": [
      "const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\ncsvObj.columnMatrix([['col1',{parseInt:true}],['col2']]); // =>\n//[ \n//  [1,5], \n//  [2,6], \n//]"
    ],
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} JavaScript Object converted from a Map"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": false,
        "name": "mapObj",
        "description": "Map to convert into JavaScript Object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "JavaScript Object converted from a Map"
    }
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "getBinaryValue",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/DataSet.mjs~DataSet.getBinaryValue",
    "access": "public",
    "description": "returns 0 or 1 depending on the input value",
    "examples": [
      "DataSet.getBinaryValue('true') // => 1\nDataSet.getBinaryValue('false') // => 0\nDataSet.getBinaryValue('No') // => 0\nDataSet.getBinaryValue(false) // => 0"
    ],
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} 0 or 1 depending on truthiness of value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "value",
        "description": "value to convert to a 1 or a 0"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "0 or 1 depending on truthiness of value"
    }
  },
  {
    "__docId__": 38,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#constructor",
    "access": "public",
    "description": "creates a new raw data instance for preprocessing data for machine learning",
    "examples": [
      "const dataset = new ms.DataSet(csvData);"
    ],
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{this} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "config",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#config",
    "access": "public",
    "description": null,
    "lineNumber": 410,
    "undocument": true
  },
  {
    "__docId__": 40,
    "kind": "member",
    "name": "data",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#data",
    "access": "public",
    "description": null,
    "lineNumber": 413,
    "undocument": true
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "labels",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#labels",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "encoders",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#encoders",
    "access": "public",
    "description": null,
    "lineNumber": 415,
    "undocument": true
  },
  {
    "__docId__": 43,
    "kind": "member",
    "name": "scalers",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#scalers",
    "access": "public",
    "description": null,
    "lineNumber": 416,
    "undocument": true
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "selectColumns",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#selectColumns",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "columnArray",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnArray",
    "access": "public",
    "description": null,
    "lineNumber": 418,
    "undocument": true
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "encodeObject",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#encodeObject",
    "access": "public",
    "description": null,
    "lineNumber": 419,
    "undocument": true
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "oneHotEncoder",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#oneHotEncoder",
    "access": "public",
    "description": null,
    "lineNumber": 420,
    "undocument": true
  },
  {
    "__docId__": 48,
    "kind": "member",
    "name": "oneHotDecoder",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#oneHotDecoder",
    "access": "public",
    "description": null,
    "lineNumber": 421,
    "undocument": true
  },
  {
    "__docId__": 49,
    "kind": "member",
    "name": "columnMatrix",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 422,
    "undocument": true
  },
  {
    "__docId__": 50,
    "kind": "member",
    "name": "reverseColumnMatrix",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#reverseColumnMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "reverseColumnVector",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#reverseColumnVector",
    "access": "public",
    "description": null,
    "lineNumber": 424,
    "undocument": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "getTransforms",
    "memberof": "src/DataSet.mjs~DataSet",
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#getTransforms",
    "access": "public",
    "description": null,
    "lineNumber": 425,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "exportFeatures",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#exportFeatures",
    "access": "public",
    "description": "returns Object of all encoders and scalers ",
    "examples": [
      "const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);\nDataSet.fitColumns({col1:['label',{binary:true}]}); \nDataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]\nDataset.exportFeatures() //=> { labels: { col1: { \"0\": false, \"1\": true, \"N\": 0, \"Yes\": 1, \"No\": 0, \"f\": 0, \"false\": 1, } } }"
    ],
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{labels:Map,encoders:Map,scalers:map}} JavaScript Object of transforms encoders and scalers(labels, encoders, scalers) "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "filter",
        "description": "filter function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{labels:Map,encoders:Map,scalers:map}"
      ],
      "spread": false,
      "description": "JavaScript Object of transforms encoders and scalers(labels, encoders, scalers)"
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "importFeatures",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#importFeatures",
    "access": "public",
    "description": "set encoders, labels and scalers ",
    "examples": [
      "const csvObj = new DataSet([{col1:1,col2:5},{col1:false,col2:6}]);\nDataSet.fitColumns({col1:['label',{binary:true}]}); \nDataset.data // => [{col1:true,col2:5},{col1:false,col2:6}]\nDataset.exportFeatures() //=> { labels: { col1: { \"0\": false, \"1\": true, \"N\": 0, \"Yes\": 1, \"No\": 0, \"f\": 0, \"false\": 1, } } }"
    ],
    "lineNumber": 461,
    "params": [
      {
        "nullable": null,
        "types": [
          "{labels:Map,encoders:Map,scalers:map}"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "features",
        "description": "JavaScript Object of transforms encoders and scalers(labels, encoders, scalers)"
      }
    ]
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "filterColumn",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#filterColumn",
    "access": "public",
    "description": "returns filtered rows of data ",
    "examples": [
      "const csvObj = new DataSet([{col1:1,col2:5},{col1:2,col2:6}]);\ncsvObj.filterColumn((row)=>row.col1>=2); // =>\n//[ \n//  [2,6], \n//]"
    ],
    "lineNumber": 525,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} filtered array of data "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "filter",
        "description": "filter function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "filtered array of data"
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "columnScale",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnScale",
    "access": "public",
    "description": "Returns a new array of scaled values which can be reverse (descaled). The scaling transformations are stored on the DataSet",
    "examples": [
      "//dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\ndataset.columnScale('Age',{strategy:'log'}) // => [ 3.784189633918261,\n3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]\ndataset.scalers.get('Age').scale(45) // => 3.8066624897703196\ndataset.scalers.get('Age').descale(3.8066624897703196) // => 45\n//this supports, log/exponent, minmax/normalization and standardscaling"
    ],
    "lineNumber": 541,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} returns an array of scaled values"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name - csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"log\"",
        "defaultRaw": "log",
        "name": "options.strategy",
        "description": "strategy for scaling values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "returns an array of scaled values"
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "columnDescale",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnDescale",
    "access": "public",
    "description": "Returns a new array of descaled values",
    "examples": [
      "//dataset.columnArray('Age') => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\nconst scaledData = [ 3.784189633918261,\n3.295836866004329, 3.4011973816621555, 3.6375861597263857, 3.6888794541139363, 3.5553480614894135, 3.657847344866208, 3.8712010109078907, 3.912023005428146, 3.6109179126442243 ]\ndataset.columnDescale('Age') // => [ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]"
    ],
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} returns an array of scaled values"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name - csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"log\"",
        "defaultRaw": "log",
        "name": "options.strategy",
        "description": "strategy for scaling values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "returns an array of scaled values"
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "labelEncoder",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#labelEncoder",
    "access": "public",
    "description": "returns a new array and label encodes a selected column",
    "examples": [
      "const oneHotCountryColumn = dataset.oneHotEncoder('Country'); \n\n// [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ] \nconst originalPurchasedColumn = dataset.labelEncoder('Purchased');\n// [ 0, 1, 0, 0, 1, 1, 1, 1, 0, 1 ]\nconst encodedBinaryPurchasedColumn = dataset.labelEncoder('Purchased',{ binary:true });\n// [ 0, 1, 2, 3, 1, 1, 4, 1, 2, 1 ]\nconst encodedPurchasedColumn = dataset.labelEncoder('Purchased'); "
    ],
    "see": [
      "{@link http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html} "
    ],
    "lineNumber": 644,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.binary",
        "description": "only replace with (0,1) with binary values"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.sortFunction",
        "description": "custom label encoding value sort function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "labelDecode",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#labelDecode",
    "access": "public",
    "description": "returns a new array and decodes an encoded column back to the original array values",
    "lineNumber": 685,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "oneHotColumnArray",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#oneHotColumnArray",
    "access": "public",
    "description": "Return one hot encoded data",
    "examples": [
      "const csvData = [{\n'Country': 'Brazil',\n'Age': '44',\n'Salary': '72000',\n'Purchased': 'N',\n},\n{\n'Country': 'Mexico',\n'Age': '27',\n'Salary': '48000',\n'Purchased': 'Yes',\n},\n...\n];\nconst EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData);\nEncodedCSVDataSet.fitColumns({\ncolumns: [\n{\nname: 'Country',\noptions: { strategy: 'onehot', },\n},\n],\n});\n\nEncodedCSVDataSet.oneHotColumnArray('Country);// =>\n// [ { Country_Brazil: 1, Country_Mexico: 0, Country_Ghana: 0 },\n//   { Country_Brazil: 0, Country_Mexico: 1, Country_Ghana: 0 },\n//   { Country_Brazil: 0, Country_Mexico: 0, Country_Ghana: 1 },\n//   ...]"
    ],
    "lineNumber": 726,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} returns an array of objects from an one hot encoded column"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "column name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "returns an array of objects from an one hot encoded column"
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "columnReducer",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnReducer",
    "access": "public",
    "description": "it returns a new column that reduces a column into a new column object, this is used in data prep to create new calculated columns for aggregrate statistics",
    "examples": [
      "const reducer = (result, value, index, arr) => {\nresult.push(value * 2);\nreturn result;\n};\nCSVDataSet.columnReducer('DoubleAge', {\ncolumnName: 'Age',\nreducer,\n}); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }"
    ],
    "lineNumber": 752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} a new object that has reduced array as the value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of new Column"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "options.columnName",
        "description": "name property for columnArray selection"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.columnOptions",
        "description": "options property for columnArray"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.reducer",
        "description": "reducer function to reduce into new array, it should push values into the resulting array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "a new object that has reduced array as the value"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "columnMerge",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnMerge",
    "access": "public",
    "description": "it returns a new column that is merged onto the data set",
    "examples": [
      "CSVDataSet.columnMerge('DoubleAge', [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ]); //=> { DoubleAge: [ 88, 54, 60, 76, 80, 70, 0, 96, 100, 74 ] }"
    ],
    "lineNumber": 766,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of new Column"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "new dataset data"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "inverseTransformObject",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#inverseTransformObject",
    "access": "public",
    "description": "Inverses transform on an object",
    "examples": [
      "DataSet.data; //[{\n//   Age: 0.6387122698222066,\n//   Salary: 72000,\n//   Purchased: 0,\n//   Country_Brazil: 1,\n//   Country_Mexico: 0,\n//   Country_Ghana: 0,\n// }, ...] \nDataSet.inverseTransformObject(DataSet.data[0]); // => {\n//  Country: 'Brazil', \n//  Age: 44, \n//  Salary: 72000, \n//  Purchased: 'N', \n// };"
    ],
    "lineNumber": 793,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} returns object with inverse transformed data"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "returns object with inverse transformed data"
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "transformObject",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#transformObject",
    "access": "public",
    "description": "transforms an object and replaces values that have been scaled or encoded",
    "examples": [
      "DataSet.transformObject({\n'Country': 'Brazil',\n'Age': '44',\n'Salary': '72000',\n'Purchased': 'N',\n}); // =>\n// { \n//  Country: 'Brazil',\n//  Age: 3.784189633918261,\n//  Salary: '72000',\n//  Purchased: 'N',\n//  Country_Brazil: 1,\n//  Country_Mexico: 0,\n//  Country_Ghana: 0\n// }"
    ],
    "lineNumber": 858,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "columnReplace",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#columnReplace",
    "access": "public",
    "description": "returns a new array of a selected column from an array of objects and replaces empty values, encodes values and scales values",
    "examples": [
      "//column Replace returns new Array with replaced missing data\n//[ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\nconst ReplacedAgeMeanColumn = dataset.columnReplace('Age',{strategy:'mean'});"
    ],
    "lineNumber": 928,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array|Object[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "csv column header, or JSON object property name"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.empty",
        "description": "replace empty values"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"mean\"",
        "defaultRaw": "mean",
        "name": "options.strategy",
        "description": "strategy for replacing value, any array stat method from ml.js (mean, standardDeviation, median) or (label,labelEncoder,onehot,oneHotEncoder)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array",
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "fitColumns",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#fitColumns",
    "access": "public",
    "description": "mutates data property of DataSet by replacing multiple columns in a single command",
    "examples": [
      "//fit Columns, mutates dataset\ndataset.fitColumns({\ncolumns:[{name:'Age',options:{ strategy:'mean'} }]\n});\n// dataset\n// class DataSet\n//   data:[\n//     {\n//       'Country': 'Brazil',\n//       'Age': '38.77777777777778',\n//       'Salary': '72000',\n//       'Purchased': 'N',\n//     }\n//     ...\n//   ]"
    ],
    "lineNumber": 1029,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.returnData",
        "description": "return updated DataSet data property"
      },
      {
        "nullable": null,
        "types": [
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "options.columns",
        "description": "{name:'columnName',options:{strategy:'mean',labelOoptions:{}},}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "fitInverseTransforms",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#fitInverseTransforms",
    "access": "public",
    "description": "Mutate dataset data by inversing all transforms",
    "examples": [
      "DataSet.data;\n// [{ \n//  Country: 'Brazil',\n//  Age: 3.784189633918261,\n//  Salary: '72000',\n//  Purchased: 'N',\n//  Country_Brazil: 1,\n//  Country_Mexico: 0,\n//  Country_Ghana: 0\n// },\n// ...\n// ]\nDataSet.fitInverseTransforms(); // =>\n// [{\n//   'Country': 'Brazil',\n//   'Age': '44',\n//   'Salary': '72000',\n//   'Purchased': 'N',\n// },\n// ...\n// ]"
    ],
    "lineNumber": 1097,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "fitTransforms",
    "memberof": "src/DataSet.mjs~DataSet",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/DataSet.mjs~DataSet#fitTransforms",
    "access": "public",
    "description": "Mutate dataset data with all transforms",
    "examples": [
      "DataSet.data;\n// [{\n//   'Country': 'Brazil',\n//   'Age': '44',\n//   'Salary': '72000',\n//   'Purchased': 'N',\n// },\n// ...\n// ]\nDataSet.fitTransforms(); // =>\n// [{ \n//  Country: 'Brazil',\n//  Age: 3.784189633918261,\n//  Salary: '72000',\n//  Purchased: 'N',\n//  Country_Brazil: 1,\n//  Country_Mexico: 0,\n//  Country_Ghana: 0\n// },\n// ...\n// ] "
    ],
    "lineNumber": 1134,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/ReinforcedLearning.mjs",
    "content": "import { default as PD, } from 'probability-distributions';\r\n\r\n/**\r\n * base interface class for reinforced learning\r\n * @class ReinforcedLearningBase\r\n * @memberOf ml\r\n */\r\nexport class ReinforcedLearningBase{\r\n  /**\r\n   * base class for reinforced learning\r\n   * @param {Object} [options={}]\r\n   * @prop {Number} options.bounds - number of bounds / bandits\r\n   * @prop {Function} options.getBound - get value of bound\r\n   * @prop {Number} this.bounds - number of bounds / bandits\r\n   * @prop {Array} this.last_selected - list of selections\r\n   * @prop {Number} this.total_reward - total rewards\r\n   * @prop {Number} this.iteration - total number of iterations\r\n   * @returns {this} \r\n   */\r\n  constructor(options = {}) {\r\n    this.bounds = options.bounds || 5;\r\n    this.getBound = options.getBound || function getBound(bound) {\r\n      return bound;\r\n    };\r\n    this.last_selected = [];\r\n    this.total_reward = 0;\r\n    this.iteration = 0;\r\n    return this;\r\n  }\r\n  /** \r\n   * interface instance method for reinforced learning step\r\n  */\r\n  learn() {\r\n    throw new ReferenceError('Missing learn method implementation');\r\n  }\r\n  /** \r\n   * interface instance method for reinforced training step\r\n  */\r\n  train() {\r\n    throw new ReferenceError('Missing train method implementation');\r\n  }\r\n  /** \r\n   * interface instance method for reinforced prediction step\r\n  */\r\n  predict() {\r\n    throw new ReferenceError('Missing predict method implementation');\r\n  }\r\n}\r\n\r\n/**\r\n * Implementation of the Upper Confidence Bound algorithm\r\n * @class UpperConfidenceBound\r\n * @memberOf ml\r\n */\r\nexport class UpperConfidenceBound extends ReinforcedLearningBase{\r\n  /**\r\n   * creates a new instance of the Upper confidence bound(UCB) algorithm. UCB is based on the principle of optimism in the face of uncertainty, which is to choose your actions as if the environment (in this case bandit) is as nice as is plausibly possible\r\n   * @see {@link http://banditalgs.com/2016/09/18/the-upper-confidence-bound-algorithm/}\r\n   * @example\r\n   * const dataset = new ms.ml.UpperConfidenceBound({bounds:10});\r\n   * @param {Object} [options={}]\r\n   * @prop {Map} this.numbers_of_selections - map of all bound selections\r\n   * @prop {Map} this.sums_of_rewards - successful bound selections\r\n   * @returns {this} \r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n    this.numbers_of_selections = new Map();\r\n    this.sums_of_rewards = new Map();\r\n    for (let i = 0; i < this.bounds; i++){\r\n      this.numbers_of_selections.set(i, 0);\r\n      this.sums_of_rewards.set(i, 0);\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * returns next action based off of the upper confidence bound\r\n   * @return {number} returns bound selection\r\n   */\r\n  predict() {\r\n    let ad = 0; //ad is each bandit\r\n    let max_upper_bound = 0;\r\n    for (let i = 0; i < this.bounds; i++){\r\n      let upper_bound = 1e400;\r\n      if (this.numbers_of_selections.get( i ) > 0) {\r\n        // if selected at least once\r\n        let average_reward = this.sums_of_rewards.get( i ) / this.numbers_of_selections.get( i );\r\n        let delta_i = Math.sqrt(3 / 2 * Math.log(this.iteration + 1) / this.numbers_of_selections.get( i ));\r\n        upper_bound = average_reward + delta_i;\r\n      } \r\n      if (upper_bound > max_upper_bound) { //get max at each round\r\n        max_upper_bound = upper_bound;\r\n        ad = i;\r\n      }\r\n    }\r\n    return ad;\r\n  }\r\n  /**\r\n   * single step trainning method\r\n   * @param {Object} ucbRow - row of bound selections\r\n   * @param {Function} [getBound=this.getBound] - select value of ucbRow by selection value\r\n   * @return {this} \r\n   */\r\n  learn(options={}) {\r\n    const { ucbRow, getBound, } = options;\r\n    let ad = this.predict();\r\n    this.last_selected.push(ad);\r\n    this.numbers_of_selections.set(ad,  this.numbers_of_selections.get(ad) + 1);\r\n    let reward = ucbRow[getBound(ad)];\r\n    this.sums_of_rewards.set(ad,  this.sums_of_rewards.get(ad) + reward);\r\n    this.total_reward = this.total_reward + reward;\r\n    this.iteration++;\r\n    return this;\r\n  }\r\n  /**\r\n   * training method for upper confidence bound calculations\r\n   * @param {Object|Object[]} ucbRow - row of bound selections\r\n   * @param {Function} [getBound=this.getBound] - select value of ucbRow by selection value\r\n   * @return {this} \r\n   */\r\n  train(options) {\r\n    const {\r\n      ucbRow,\r\n      getBound = this.getBound,\r\n    } = options;\r\n    if (Array.isArray(ucbRow)) {\r\n      for (let i in ucbRow) {\r\n        this.learn({\r\n          ucbRow: ucbRow[i],\r\n          getBound,\r\n        });\r\n      }\r\n    } else {\r\n      this.learn({\r\n        ucbRow,\r\n        getBound,\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n}\r\n\r\n/**\r\n * Implementation of the Thompson Sampling algorithm\r\n * @class ThompsonSampling\r\n * @memberOf ml\r\n */\r\nexport class ThompsonSampling extends ReinforcedLearningBase{\r\n  /**\r\n   * creates a new instance of the Thompson Sampling(TS) algorithm. TS a heuristic for choosing actions that addresses the exploration-exploitation dilemma in the multi-armed bandit problem. It consists in choosing the action that maximizes the expected reward with respect to a randomly drawn belief\r\n   * @see {@link https://en.wikipedia.org/wiki/Thompson_sampling}\r\n   * @example\r\n   * const dataset = new ms.ml.ThompsonSampling({bounds:10});\r\n   * @param {Object} [options={}]\r\n   * @prop {Map} this.numbers_of_rewards_1 - map of all reward 1 selections\r\n   * @prop {Map} this.numbers_of_rewards_0 - map of all reward 0 selections\r\n   * @returns {this} \r\n   */\r\n  constructor(options = {}) {\r\n    super(options);\r\n    this.numbers_of_rewards_1 = new Map();\r\n    this.numbers_of_rewards_0 = new Map();\r\n    for (let i = 0; i < this.bounds; i++){\r\n      this.numbers_of_rewards_1.set(i, 0);\r\n      this.numbers_of_rewards_0.set(i, 0);\r\n    }\r\n    return this;\r\n  }\r\n  /**\r\n   * returns next action based off of the thompson sampling\r\n   * @return {number} returns thompson sample\r\n   */\r\n  predict() {\r\n    let ad = 0; //ad is each bandit\r\n    let max_random = 0;\r\n    for (let i = 0; i < this.bounds; i++){\r\n      let random_beta = PD.rbeta(1, this.numbers_of_rewards_1.get(i) + 1, this.numbers_of_rewards_0.get(i) + 1);\r\n      if (random_beta > max_random) {\r\n        max_random = random_beta;\r\n        ad = i;\r\n      }\r\n    }\r\n    return ad;\r\n  }\r\n  /**\r\n   * single step trainning method\r\n   * @param {Object} tsRow - row of bound selections\r\n   * @param {Function} [getBound=this.getBound] - select value of tsRow by selection value\r\n   * @return {this} \r\n   */\r\n  learn(options = {}) {\r\n    const { tsRow, getBound, } = options;\r\n    let ad = this.predict();\r\n    this.last_selected.push(ad);\r\n    let reward = tsRow[ getBound(ad) ];\r\n    if (reward === 1) {\r\n      this.numbers_of_rewards_1.set(ad,  this.numbers_of_rewards_1.get(ad) + 1);\r\n    } else {\r\n      this.numbers_of_rewards_0.set(ad,  this.numbers_of_rewards_0.get(ad) + 1);\r\n    }\r\n    this.total_reward = this.total_reward + reward;\r\n    this.iteration++;\r\n    return this;\r\n  }\r\n  /**\r\n   * training method for thompson sampling calculations\r\n   * @param {Object|Object[]} tsRow - row of bound selections\r\n   * @param {Function} [getBound=this.getBound] - select value of tsRow by selection value\r\n   * @return {this} \r\n   */\r\n  train(options) {\r\n    const {\r\n      tsRow,\r\n      getBound = this.getBound,\r\n    } = options;\r\n    if (Array.isArray(tsRow)) {\r\n      for (let i in tsRow) {\r\n        this.learn({\r\n          tsRow: tsRow[i],\r\n          getBound,\r\n        });\r\n      }\r\n    } else {\r\n      this.learn({\r\n        tsRow,\r\n        getBound,\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n}",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/ReinforcedLearning.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "ReinforcedLearningBase",
    "memberof": "src/ReinforcedLearning.mjs",
    "static": true,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/ReinforcedLearning.mjs",
    "importStyle": "{ReinforcedLearningBase}",
    "description": "base interface class for reinforced learning",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ReinforcedLearningBase"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "ml"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#constructor",
    "access": "public",
    "description": "base class for reinforced learning",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Number} options.bounds - number of bounds / bandits"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Function} options.getBound - get value of bound"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Number} this.bounds - number of bounds / bandits"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Array} this.last_selected - list of selections"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Number} this.total_reward - total rewards"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Number} this.iteration - total number of iterations"
      },
      {
        "tagName": "@returns",
        "tagValue": "{this} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "bounds",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#bounds",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "getBound",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#getBound",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "last_selected",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#last_selected",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "total_reward",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#total_reward",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "iteration",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#iteration",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "learn",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#learn",
    "access": "public",
    "description": "interface instance method for reinforced learning step",
    "lineNumber": 33
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "train",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#train",
    "access": "public",
    "description": "interface instance method for reinforced training step",
    "lineNumber": 39
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "predict",
    "memberof": "src/ReinforcedLearning.mjs~ReinforcedLearningBase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ReinforcedLearningBase#predict",
    "access": "public",
    "description": "interface instance method for reinforced prediction step",
    "lineNumber": 45
  },
  {
    "__docId__": 83,
    "kind": "class",
    "name": "UpperConfidenceBound",
    "memberof": "src/ReinforcedLearning.mjs",
    "static": true,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/ReinforcedLearning.mjs",
    "importStyle": "{UpperConfidenceBound}",
    "description": "Implementation of the Upper Confidence Bound algorithm",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UpperConfidenceBound"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "ml"
      }
    ],
    "interface": false,
    "extends": [
      "ReinforcedLearningBase"
    ]
  },
  {
    "__docId__": 84,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#constructor",
    "access": "public",
    "description": "creates a new instance of the Upper confidence bound(UCB) algorithm. UCB is based on the principle of optimism in the face of uncertainty, which is to choose your actions as if the environment (in this case bandit) is as nice as is plausibly possible",
    "examples": [
      "const dataset = new ms.ml.UpperConfidenceBound({bounds:10});"
    ],
    "see": [
      "{@link http://banditalgs.com/2016/09/18/the-upper-confidence-bound-algorithm/}"
    ],
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Map} this.numbers_of_selections - map of all bound selections"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Map} this.sums_of_rewards - successful bound selections"
      },
      {
        "tagName": "@returns",
        "tagValue": "{this} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "numbers_of_selections",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#numbers_of_selections",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true
  },
  {
    "__docId__": 86,
    "kind": "member",
    "name": "sums_of_rewards",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#sums_of_rewards",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "predict",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#predict",
    "access": "public",
    "description": "returns next action based off of the upper confidence bound",
    "lineNumber": 80,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "returns bound selection"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "learn",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#learn",
    "access": "public",
    "description": "single step trainning method",
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ucbRow",
        "description": "row of bound selections"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.getBound",
        "defaultRaw": "this.getBound",
        "name": "getBound",
        "description": "select value of ucbRow by selection value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "total_reward",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#total_reward",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "train",
    "memberof": "src/ReinforcedLearning.mjs~UpperConfidenceBound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~UpperConfidenceBound#train",
    "access": "public",
    "description": "training method for upper confidence bound calculations",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "ucbRow",
        "description": "row of bound selections"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.getBound",
        "defaultRaw": "this.getBound",
        "name": "getBound",
        "description": "select value of ucbRow by selection value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 91,
    "kind": "class",
    "name": "ThompsonSampling",
    "memberof": "src/ReinforcedLearning.mjs",
    "static": true,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/ReinforcedLearning.mjs",
    "importStyle": "{ThompsonSampling}",
    "description": "Implementation of the Thompson Sampling algorithm",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ThompsonSampling"
      },
      {
        "tagName": "@memberOf",
        "tagValue": "ml"
      }
    ],
    "interface": false,
    "extends": [
      "ReinforcedLearningBase"
    ]
  },
  {
    "__docId__": 92,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#constructor",
    "access": "public",
    "description": "creates a new instance of the Thompson Sampling(TS) algorithm. TS a heuristic for choosing actions that addresses the exploration-exploitation dilemma in the multi-armed bandit problem. It consists in choosing the action that maximizes the expected reward with respect to a randomly drawn belief",
    "examples": [
      "const dataset = new ms.ml.ThompsonSampling({bounds:10});"
    ],
    "see": [
      "{@link https://en.wikipedia.org/wiki/Thompson_sampling}"
    ],
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@prop",
        "tagValue": "{Map} this.numbers_of_rewards_1 - map of all reward 1 selections"
      },
      {
        "tagName": "@prop",
        "tagValue": "{Map} this.numbers_of_rewards_0 - map of all reward 0 selections"
      },
      {
        "tagName": "@returns",
        "tagValue": "{this} "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "numbers_of_rewards_1",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#numbers_of_rewards_1",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "numbers_of_rewards_0",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#numbers_of_rewards_0",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "predict",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#predict",
    "access": "public",
    "description": "returns next action based off of the thompson sampling",
    "lineNumber": 173,
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "returns thompson sample"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "learn",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#learn",
    "access": "public",
    "description": "single step trainning method",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "tsRow",
        "description": "row of bound selections"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.getBound",
        "defaultRaw": "this.getBound",
        "name": "getBound",
        "description": "select value of tsRow by selection value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "total_reward",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#total_reward",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "train",
    "memberof": "src/ReinforcedLearning.mjs~ThompsonSampling",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/ReinforcedLearning.mjs~ThompsonSampling#train",
    "access": "public",
    "description": "training method for thompson sampling calculations",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Object[]"
        ],
        "spread": false,
        "optional": false,
        "name": "tsRow",
        "description": "row of bound selections"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this.getBound",
        "defaultRaw": "this.getBound",
        "name": "getBound",
        "description": "select value of tsRow by selection value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "this"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 99,
    "kind": "file",
    "name": "src/calc.mjs",
    "content": "import { default as fpg, } from 'node-fpgrowth';\r\nconst { FPGrowth, } = fpg;\r\n// import { default as ObjectValues, } from 'object.values';\r\n// if (!Object.values) {\r\n//   ObjectValues.shim();\r\n// }\r\n\r\n/**\r\n * Formats an array of transactions into a sparse matrix like format for Apriori/Eclat\r\n * @memberOf calc\r\n * @see {@link https://github.com/alexisfacques/Node-FPGrowth}\r\n * @param {Array} data - CSV data of transactions \r\n * @param {Object} options \r\n * @param {Boolean} [options.exludeEmptyTranscations=true] - exclude empty rows of transactions \r\n * @returns {Object} {values - unique list of all values, valuesMap - map of values and labels, transactions - formatted sparse array}\r\n */\r\nexport function getTransactions(data, options) {\r\n  const config = Object.assign({}, {\r\n    exludeEmptyTranscations: true,\r\n  }, options);\r\n  const values = new Set();\r\n  const valuesMap = new Map();\r\n  const transactions = data\r\n    .map(csvRow => {\r\n      [\r\n        ...Object.values(csvRow),\r\n      ].forEach(csvVal => {\r\n        values.add(csvVal);\r\n      });\r\n      values.forEach(val => {\r\n        if (!valuesMap.get(val)) {\r\n          const index = (valuesMap.size < 0)\r\n            ? 0\r\n            : parseInt(valuesMap.size / 2, 10);\r\n          valuesMap.set(val, index.toString());\r\n          valuesMap.set(index.toString(), val);\r\n        }\r\n      });\r\n      return Object.values(csvRow)\r\n        .map(csvCell =>\r\n          valuesMap.get(csvCell))\r\n        .filter(val => val !== undefined);\r\n    });\r\n  return {\r\n    values,\r\n    valuesMap,\r\n    transactions: (config.exludeEmptyTranscations)\r\n      ? transactions.filter(csvRow => csvRow.length)\r\n      : transactions,\r\n  };\r\n}\r\n\r\n/**\r\n * returns association rule learning results\r\n * @memberOf calc\r\n * @see {@link https://github.com/alexisfacques/Node-FPGrowth}\r\n * @param {Array} transactions - sparse matrix of transactions \r\n * @param {Object} options \r\n * @param {Number} [options.support=0.4] - support level\r\n * @param {Number} [options.minLength=2] - minimum assocation array size\r\n * @param {Boolean} [options.summary=true] - return summarized results\r\n * @param {Map} [options.valuesMap=new Map()] - map of values and labels (used for summary results)\r\n * @returns {Object} Returns the result from Node-FPGrowth or a summary of support and strong associations\r\n */\r\nexport function assocationRuleLearning(transactions =[], options) {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const config = Object.assign({}, {\r\n        support: 0.4,\r\n        minLength: 2,\r\n        summary: true,\r\n        valuesMap: new Map(),\r\n      }, options);\r\n      const fpgrowth = new FPGrowth(config.support);\r\n      fpgrowth.exec(transactions)\r\n        .then(results => {\r\n          const itemsets = (results.itemsets) ? results.itemsets : results;\r\n          // console.log('itemsets', itemsets)\r\n          if (config.summary) {\r\n            resolve(itemsets\r\n              .map(itemset => ({\r\n                items_labels: itemset.items.map(item => config.valuesMap.get(item)),\r\n                items: itemset.items,\r\n                support: itemset.support,\r\n                support_percent: itemset.support / transactions.length,\r\n              }))\r\n              .filter(itemset => itemset.items.length > 1)\r\n              .sort((a, b) => b.support - a.support));\r\n          } else {\r\n            resolve(results);\r\n          }\r\n        })\r\n        .catch(reject);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * @namespace\r\n */\r\nexport const calc = {\r\n  getTransactions,\r\n  assocationRuleLearning,\r\n};",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/calc.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 100,
    "kind": "variable",
    "name": "FPGrowth",
    "memberof": "src/calc.mjs",
    "static": true,
    "longname": "src/calc.mjs~FPGrowth",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/calc.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "getTransactions",
    "memberof": "src/calc.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/calc.mjs~getTransactions",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/calc.mjs",
    "importStyle": "{getTransactions}",
    "description": "Formats an array of transactions into a sparse matrix like format for Apriori/Eclat",
    "see": [
      "{@link https://github.com/alexisfacques/Node-FPGrowth}"
    ],
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "calc"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} {values - unique list of all values, valuesMap - map of values and labels, transactions - formatted sparse array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "CSV data of transactions"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.exludeEmptyTranscations",
        "description": "exclude empty rows of transactions"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "{values - unique list of all values, valuesMap - map of values and labels, transactions - formatted sparse array}"
    }
  },
  {
    "__docId__": 102,
    "kind": "function",
    "name": "assocationRuleLearning",
    "memberof": "src/calc.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/calc.mjs~assocationRuleLearning",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/calc.mjs",
    "importStyle": "{assocationRuleLearning}",
    "description": "returns association rule learning results",
    "see": [
      "{@link https://github.com/alexisfacques/Node-FPGrowth}"
    ],
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "calc"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object} Returns the result from Node-FPGrowth or a summary of support and strong associations"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "transactions",
        "description": "sparse matrix of transactions"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.4",
        "defaultRaw": 0.4,
        "name": "options.support",
        "description": "support level"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "options.minLength",
        "description": "minimum assocation array size"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.summary",
        "description": "return summarized results"
      },
      {
        "nullable": null,
        "types": [
          "Map"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "new Map()",
        "defaultRaw": "new Map()",
        "name": "options.valuesMap",
        "description": "map of values and labels (used for summary results)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Returns the result from Node-FPGrowth or a summary of support and strong associations"
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "calc",
    "memberof": "src/calc.mjs",
    "static": true,
    "longname": "src/calc.mjs~calc",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/calc.mjs",
    "importStyle": "{calc}",
    "description": "",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/cross_validation.mjs",
    "content": "import { default as Random, } from 'random-js';\r\nimport { default as range, } from 'lodash.range';\r\nimport { ml, } from './ml';\r\nimport { util, } from './util';\r\nimport { DataSet, } from './DataSet';\r\nimport { default as jgsl, } from 'js-grid-search-lite';\r\nconst { GridSearch, } = jgsl;\r\nconst Matrix = ml.Matrix;\r\nconst ConfusionMatrix = ml.ConfusionMatrix;\r\n\r\n/**\r\n * Split arrays into random train and test subsets\r\n * @memberOf cross_validation\r\n * @example\r\n * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\r\n// { train: [ 50, 20, 34, 33, 10, 23, 90, 42 ], test: [ 25, 19 ] }\r\nconst trainTestSplit = ms.cross_validation.train_test_split(testArray,{ test_size:0.2, random_state: 0, });\r\n * @param {array} dataset - array of data to split\r\n * @param {object} options\r\n * @param {number} [options.test_size=0.2] - represent the proportion of the dataset to include in the test split, can be overwritten by the train_size \r\n * @param {number} [options.train_size=0.8] - represent the proportion of the dataset to include in the train split \r\n * @param {number} [options.random_state=0] - the seed used by the random number generator\r\n * @param {boolean} [options.return_array=false] - will return an object {train,test} of the split dataset by default or [train,test] if returned as an array\r\n * @returns {(Object|array)} returns training and test arrays either as an object or arrays\r\n */\r\nfunction train_test_split(dataset = [], options = {\r\n  test_size: 0.2,\r\n  train_size: 0.8,\r\n  random_state: 0,\r\n  return_array: false,\r\n  parse_int_train_size: true,\r\n}) {\r\n  const engine = Random.engines.mt19937().seed(options.random_state || 0);\r\n  const training_set = [];\r\n  const parse_int_train_size = (typeof options.parse_int_train_size === 'boolean') ? options.parse_int_train_size : true;\r\n  const train_size_length = (options.train_size)\r\n    ? options.train_size * dataset.length\r\n    : (1 - (options.test_size || 0.2)) * dataset.length;\r\n  const train_size = parse_int_train_size\r\n    ? parseInt(train_size_length, 10)\r\n    : train_size_length;\r\n  const dataset_copy = [].concat(dataset);\r\n\r\n  while (training_set.length < train_size) {\r\n    const index = Random.integer(0, (dataset_copy.length - 1))(engine);\r\n    // console.log({ index });\r\n    training_set.push(dataset_copy.splice(index, 1)[0]);\r\n  }\r\n  return (options.return_array) ? [training_set, dataset_copy,] : {\r\n    train: training_set,\r\n    test: dataset_copy,\r\n  };\r\n}\r\n\r\n/**\r\n * Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds.\r\nEach fold is then used once as a validation while the k - 1 remaining folds form the training set.\r\n * @memberOf cross_validation\r\n * @example\r\n * const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\r\n// [ [ 50, 20, 34, 33, 10 ], [ 23, 90, 42, 19, 25 ] ] \r\nconst crossValidationArrayKFolds = ms.cross_validation.cross_validation_split(testArray, { folds: 2, random_state: 0, });\r\n * @param {array} dataset - array of data to split\r\n * @param {object} options\r\n * @param {number} [options.folds=3] - Number of folds \r\n * @param {number} [options.random_state=0] - the seed used by the random number generator\r\n * @returns {array} returns  dataset split into k consecutive folds\r\n */\r\nfunction cross_validation_split(dataset = [], options = {\r\n  folds: 3,\r\n  random_state: 0,\r\n}) { //kfolds\r\n  const engine = Random.engines.mt19937().seed(options.random_state || 0);\r\n  const folds = options.folds || 3;\r\n  const dataset_split = [];\r\n  const dataset_copy = [].concat(dataset);\r\n  const foldsize = parseInt(dataset.length / (folds || 3), 10);\r\n  for (let i in range(folds)) {\r\n    const fold = [];\r\n    while (fold.length < foldsize) {\r\n      const index = Random.integer(0, (dataset_copy.length - 1))(engine);\r\n      fold.push(dataset_copy.splice(index, 1)[0]);\r\n    }\r\n    dataset_split.push(fold);\r\n  }\r\n\r\n  return dataset_split;\r\n}\r\n\r\n/**\r\n * Used to test variance and bias of a prediction\r\n * @memberOf cross_validation\r\n * @param {object} options\r\n * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN\r\n * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression\r\n * @return {number[]} Array of accucracy calculations \r\n */\r\nfunction cross_validate_score(options = {}) {\r\n  const config = Object.assign({}, {\r\n    // classifier,\r\n    // regression,\r\n    // dataset,\r\n    // testingset,\r\n    dependentFeatures: [['X', ], ],\r\n    independentFeatures: [['Y', ], ],\r\n    // random_state,\r\n    folds: 10,\r\n    accuracy: 'standardError',\r\n    use_train_x_matrix: true,\r\n    use_train_y_matrix: false,\r\n    use_train_y_vector: false,\r\n    use_estimates_y_vector: false,\r\n  }, options);\r\n  const classifier = config.classifier;\r\n  const regression = config.regression;\r\n  const folds = cross_validation_split(config.dataset, {\r\n    folds: config.folds,\r\n    random_state: config.random_state,\r\n  });\r\n  const testingDataSet = new DataSet(config.testingset);\r\n  const y_test_matrix = testingDataSet.columnMatrix(config.independentFeatures);\r\n  const x_test_matrix = testingDataSet.columnMatrix(config.dependentFeatures);\r\n  const actuals = util.pivotVector(y_test_matrix)[ 0 ];\r\n  // console.log({ actuals });\r\n  const prediction_accuracies = folds.map(fold => { \r\n    const trainingDataSet = new DataSet(fold);\r\n    const x_train = trainingDataSet.columnMatrix(config.dependentFeatures);\r\n    const y_train = trainingDataSet.columnMatrix(config.independentFeatures);\r\n    const x_train_matrix = (config.use_train_x_matrix)\r\n      ? new Matrix(x_train)\r\n      : x_train;\r\n    const y_train_matrix = (config.use_train_y_matrix)\r\n      ? new Matrix(y_train)\r\n      : (config.use_train_y_vector)\r\n        ? util.pivotVector(y_train)[0]\r\n        : y_train;\r\n    if (regression) {\r\n      let regressor;\r\n      let pred_y_test;\r\n      if (typeof regression.train === 'function') {\r\n        regressor = regression.train(x_train_matrix, y_train_matrix, config.modelOptions);\r\n        pred_y_test = regression.predict(x_test_matrix);\r\n      } else {\r\n        regressor = new regression(x_train_matrix, y_train_matrix, config.modelOptions);\r\n        pred_y_test = regressor.predict(x_test_matrix);\r\n      }\r\n      // console.log({ x_test_matrix });\r\n      // console.log({ pred_y_test });\r\n      const estimates = pred_y_test;//util.pivotVector(pred_y_test)[0];\r\n      // console.log({ estimates, actuals });\r\n      return (config.accuracy === 'standardError')\r\n        ? util.standardError(actuals, estimates)\r\n        : util.rSquared(actuals, estimates);\r\n    } else {\r\n      let classification;\r\n      let estimates;\r\n      if (typeof classifier.train === 'function') {\r\n        classifier.train(x_train_matrix, y_train_matrix, config.modelOptions);\r\n        estimates = classifier.predict(x_test_matrix);\r\n      } else {\r\n        classification = new classifier(x_train_matrix, y_train_matrix, config.modelOptions);\r\n        estimates = classification.predict(x_test_matrix);\r\n      }\r\n      // classification.train(x_train_matrix, y_train_matrix);\r\n      // classifier.train(x_train_matrix, y_train_matrix);\r\n      const compareEstimates = (config.use_estimates_y_vector)\r\n        ? util.pivotVector(estimates)[ 0 ]\r\n        : estimates;\r\n      const CM = ConfusionMatrix.fromLabels(actuals, compareEstimates);\r\n      return CM.getAccuracy();\r\n    }\r\n  });\r\n  return prediction_accuracies;\r\n}\r\n\r\n/**\r\n * Used to test variance and bias of a prediction with parameter tuning\r\n * @memberOf cross_validation\r\n * @param {object} options\r\n * @param {function} options.classifier - instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN\r\n * @param {function} options.regression - instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression\r\n * @return {number[]} Array of accucracy calculations \r\n */\r\nfunction grid_search(options = {}) {\r\n  const config = Object.assign({}, {\r\n    return_parameters: false,\r\n    compare_score:'mean',\r\n    sortAccuracyScore:'desc',\r\n    parameters: {},\r\n  }, options);\r\n  const regressor = config.regression;\r\n  const classification = config.classifier;\r\n  const sortAccuracyScore = (!options.sortAccuracyScore && config.regression)\r\n    ? 'asc'\r\n    : config.sortAccuracyScore;\r\n  \r\n  // const scoreSorter = ;\r\n  const gs = new GridSearch({\r\n    params: config.parameters,\r\n    run_callback: (params) => {\r\n      if (config.regression) {\r\n        config.regression = new regressor(params);\r\n      } else {\r\n        config.classifier = new classification(params);\r\n      }\r\n      const score = cross_validate_score(config);\r\n      return (config.compare_score)\r\n        ? util[config.compare_score](score)\r\n        : score;\r\n    },\r\n  });\r\n  gs.run();\r\n  const accuracySorter = (sortAccuracyScore === 'desc')\r\n    ? (a, b) => b.results - a.results\r\n    : (a, b) => a.results - b.results;\r\n  const results = gs._results.sort(accuracySorter);\r\n  // GridSearch;\r\n  return config.return_parameters\r\n    ? results\r\n    : results[ 0 ];\r\n}\r\n\r\n/**\r\n * @namespace\r\n * @see {@link https://machinelearningmastery.com/implement-resampling-methods-scratch-python/}\r\n */\r\nexport const cross_validation = {\r\n  train_test_split,\r\n  cross_validation_split,\r\n  kfolds: cross_validation_split,\r\n  cross_validate_score,\r\n  grid_search,\r\n  GridSearch,\r\n};",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/cross_validation.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "GridSearch",
    "memberof": "src/cross_validation.mjs",
    "static": true,
    "longname": "src/cross_validation.mjs~GridSearch",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "Matrix",
    "memberof": "src/cross_validation.mjs",
    "static": true,
    "longname": "src/cross_validation.mjs~Matrix",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "ConfusionMatrix",
    "memberof": "src/cross_validation.mjs",
    "static": true,
    "longname": "src/cross_validation.mjs~ConfusionMatrix",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "function",
    "name": "train_test_split",
    "memberof": "src/cross_validation.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cross_validation.mjs~train_test_split",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": "Split arrays into random train and test subsets",
    "examples": [
      "const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\n// { train: [ 50, 20, 34, 33, 10, 23, 90, 42 ], test: [ 25, 19 ] }\nconst trainTestSplit = ms.cross_validation.train_test_split(testArray,{ test_size:0.2, random_state: 0, });"
    ],
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "cross_validation"
      },
      {
        "tagName": "@returns",
        "tagValue": "{(Object|array)} returns training and test arrays either as an object or arrays"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "array of data to split"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.2",
        "defaultRaw": 0.2,
        "name": "options.test_size",
        "description": "represent the proportion of the dataset to include in the test split, can be overwritten by the train_size"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.8",
        "defaultRaw": 0.8,
        "name": "options.train_size",
        "description": "represent the proportion of the dataset to include in the train split"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.random_state",
        "description": "the seed used by the random number generator"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.return_array",
        "description": "will return an object {train,test} of the split dataset by default or [train,test] if returned as an array"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "array"
      ],
      "spread": false,
      "description": "returns training and test arrays either as an object or arrays"
    },
    "ignore": true
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "cross_validation_split",
    "memberof": "src/cross_validation.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cross_validation.mjs~cross_validation_split",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": "Provides train/test indices to split data in train/test sets. Split dataset into k consecutive folds.\nEach fold is then used once as a validation while the k - 1 remaining folds form the training set.",
    "examples": [
      "const testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\n// [ [ 50, 20, 34, 33, 10 ], [ 23, 90, 42, 19, 25 ] ] \nconst crossValidationArrayKFolds = ms.cross_validation.cross_validation_split(testArray, { folds: 2, random_state: 0, });"
    ],
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "cross_validation"
      },
      {
        "tagName": "@returns",
        "tagValue": "{array} returns  dataset split into k consecutive folds"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "dataset",
        "description": "array of data to split"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "3",
        "defaultRaw": 3,
        "name": "options.folds",
        "description": "Number of folds"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "options.random_state",
        "description": "the seed used by the random number generator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "returns  dataset split into k consecutive folds"
    },
    "ignore": true
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "cross_validate_score",
    "memberof": "src/cross_validation.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cross_validation.mjs~cross_validate_score",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": "Used to test variance and bias of a prediction",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "cross_validation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.classifier",
        "description": "instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.regression",
        "description": "instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "Array of accucracy calculations"
    },
    "ignore": true
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "grid_search",
    "memberof": "src/cross_validation.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/cross_validation.mjs~grid_search",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": null,
    "description": "Used to test variance and bias of a prediction with parameter tuning",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "cross_validation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.classifier",
        "description": "instance of classification model used for training, or function to train a model. e.g. new DecisionTreeClassifier({ gainFunction: 'gini', }) or ml.KNN"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "options.regression",
        "description": "instance of regression model used for training, or function to train a model. e.g. new RandomForestRegression({ nEstimators: 300, }) or ml.MultivariateLinearRegression"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "Array of accucracy calculations"
    },
    "ignore": true
  },
  {
    "__docId__": 112,
    "kind": "variable",
    "name": "cross_validation",
    "memberof": "src/cross_validation.mjs",
    "static": true,
    "longname": "src/cross_validation.mjs~cross_validation",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/cross_validation.mjs",
    "importStyle": "{cross_validation}",
    "description": "",
    "see": [
      "{@link https://machinelearningmastery.com/implement-resampling-methods-scratch-python/}"
    ],
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/csv.mjs",
    "content": "import { get as request, } from 'http';\r\nimport { get as requestHTTPS, } from 'https';\r\nimport { default as validURL, } from 'valid-url';\r\nimport { default as csv, } from 'csvtojson';\r\n/**\r\n * Asynchronously loads a CSV from a remote URL and returns an array of objects\r\n * @example\r\n * // returns [{header:value,header2:value2}]\r\n * loadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv').then(csvData).catch(console.error)\r\n * @memberOf csv\r\n * @param {string} filepath - URL to CSV path\r\n * @param {Object} [options] - options passed to csvtojson\r\n * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  \r\n */\r\nexport async function loadCSVURI(filepath, options) {\r\n  const reqMethod = (filepath.search('https', 'gi') > -1) ? requestHTTPS : request;\r\n  return new Promise((resolve, reject) => {\r\n    const csvData = [];\r\n    const config = Object.assign({ checkType: true, }, options);\r\n    const req = reqMethod(filepath, res => {\r\n      csv(config).fromStream(res)\r\n        .on('json', jsonObj => {\r\n          csvData.push(jsonObj);\r\n        })\r\n        .on('error', err => {\r\n          return reject(err);\r\n        })\r\n        .on('done', error => {\r\n          if (error) {\r\n            return reject(error);\r\n          } else {\r\n            return resolve(csvData);\r\n          }\r\n        });\r\n    });\r\n    req.on('error', reject);\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Asynchronously loads a CSV from either a filepath or remote URL and returns an array of objects\r\n * @example\r\n * // returns [{header:value,header2:value2}]\r\n * loadCSV('../mock/invalid-file.csv').then(csvData).catch(console.error)\r\n * @memberOf csv\r\n * @param {string} filepath - URL to CSV path\r\n * @param {Object} [options] - options passed to csvtojson\r\n * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  \r\n */\r\nexport async function loadCSV(filepath, options) {\r\n  if (validURL.isUri(filepath)) {\r\n    return loadCSVURI(filepath, options);\r\n  } else {\r\n    return new Promise((resolve, reject) => {\r\n      const csvData = [];\r\n      const config = Object.assign({ checkType: true, }, options);\r\n      csv(config).fromFile(filepath)\r\n        .on('json', jsonObj => {\r\n          csvData.push(jsonObj);\r\n        })\r\n        .on('error', err => {\r\n          return reject(err);\r\n        })\r\n        .on('done', error => {\r\n          if (error) {\r\n            return reject(error);\r\n          } else {\r\n            return resolve(csvData);\r\n          }\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Asynchronously loads a TSV from either a filepath or remote URL and returns an array of objects\r\n * @example\r\n * // returns [{header:value,header2:value2}]\r\n * loadCSV('../mock/invalid-file.tsv').then(csvData).catch(console.error)\r\n * @memberOf csv\r\n * @param {string} filepath - URL to CSV path\r\n * @param {Object} [options] - options passed to csvtojson\r\n * @returns {Object[]} returns an array of objects from a csv where each column header is the property name  \r\n */\r\nexport async function loadTSV(filepath, options) {\r\n  const tsvOptions = Object.assign({\r\n    checkType: true,\r\n  }, options, {\r\n    delimiter: '\\t',\r\n  });\r\n  return loadCSV(filepath, tsvOptions);\r\n}\r\n",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/csv.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "function",
    "name": "loadCSVURI",
    "memberof": "src/csv.mjs",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/csv.mjs~loadCSVURI",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/csv.mjs",
    "importStyle": "{loadCSVURI}",
    "description": "Asynchronously loads a CSV from a remote URL and returns an array of objects",
    "examples": [
      "// returns [{header:value,header2:value2}]\nloadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv').then(csvData).catch(console.error)"
    ],
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "csv"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object[]} returns an array of objects from a csv where each column header is the property name  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "URL to CSV path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options passed to csvtojson"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "returns an array of objects from a csv where each column header is the property name"
    }
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "loadCSV",
    "memberof": "src/csv.mjs",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/csv.mjs~loadCSV",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/csv.mjs",
    "importStyle": "{loadCSV}",
    "description": "Asynchronously loads a CSV from either a filepath or remote URL and returns an array of objects",
    "examples": [
      "// returns [{header:value,header2:value2}]\nloadCSV('../mock/invalid-file.csv').then(csvData).catch(console.error)"
    ],
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "csv"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object[]} returns an array of objects from a csv where each column header is the property name  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "URL to CSV path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options passed to csvtojson"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "returns an array of objects from a csv where each column header is the property name"
    }
  },
  {
    "__docId__": 116,
    "kind": "function",
    "name": "loadTSV",
    "memberof": "src/csv.mjs",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/csv.mjs~loadTSV",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/csv.mjs",
    "importStyle": "{loadTSV}",
    "description": "Asynchronously loads a TSV from either a filepath or remote URL and returns an array of objects",
    "examples": [
      "// returns [{header:value,header2:value2}]\nloadCSV('../mock/invalid-file.tsv').then(csvData).catch(console.error)"
    ],
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "csv"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object[]} returns an array of objects from a csv where each column header is the property name  "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "URL to CSV path"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options passed to csvtojson"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object[]"
      ],
      "spread": false,
      "description": "returns an array of objects from a csv where each column header is the property name"
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "src/main.mjs",
    "content": "import * as csvUtils from './csv';\r\nimport { util as utils, } from './util';\r\nimport { calc as calcs, } from './calc';\r\nimport { PD as probabilty, } from './pd';\r\nimport { ml as mls, } from './ml';\r\nimport { nlp as nlps, } from './nlp';\r\nimport { DataSet, } from './DataSet';\r\nimport { cross_validation as cross_validations, } from './cross_validation';\r\n\r\nexport const loadCSV = csvUtils.loadCSV;\r\nexport const loadCSVURI = csvUtils.loadCSVURI;\r\n\r\n/**\r\n * @namespace\r\n */\r\nexport const preprocessing = {\r\n  DataSet,\r\n};\r\nexport { DataSet, } from './DataSet';\r\nexport const util = utils;\r\nexport const cross_validation = cross_validations;\r\nexport const model_selection = cross_validations;\r\nexport const calc = calcs;\r\nexport const ml = mls;\r\nexport const nlp = nlps;\r\nexport const csv = csvUtils;\r\nexport const PD = probabilty;",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/main.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "loadCSV",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~loadCSV",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{loadCSV}",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "variable",
    "name": "loadCSVURI",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~loadCSVURI",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{loadCSVURI}",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "preprocessing",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~preprocessing",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{preprocessing}",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "util",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~util",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{util}",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "cross_validation",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~cross_validation",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{cross_validation}",
    "description": null,
    "lineNumber": 21,
    "undocument": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "model_selection",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~model_selection",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{model_selection}",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "calc",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~calc",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{calc}",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 125,
    "kind": "variable",
    "name": "ml",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~ml",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{ml}",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 126,
    "kind": "variable",
    "name": "nlp",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~nlp",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{nlp}",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 127,
    "kind": "variable",
    "name": "csv",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~csv",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{csv}",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "variable",
    "name": "PD",
    "memberof": "src/main.mjs",
    "static": true,
    "longname": "src/main.mjs~PD",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/main.mjs",
    "importStyle": "{PD}",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/ml.mjs",
    "content": "import { default as MachineLearning, } from 'ml';\r\n// import { default as mlf, } from 'ml-random-forest';\r\nimport { default as LogisticRegression, } from 'ml-logistic-regression';\r\nimport * as mlfModule from 'ml-random-forest';\r\nimport * as mlcModule from 'ml-cart';\r\nimport * as mlnModule from 'ml-naivebayes';\r\n/* fix for rollup */\r\n/* istanbul ignore next */\r\nconst mlf = (mlfModule.default) ? mlfModule.default : mlfModule;\r\nconst mlc = (mlcModule.default) ? mlcModule.default : mlcModule;\r\nconst mln = (mlnModule.default) ? mlnModule.default : mlnModule;\r\nconst { RandomForestRegression, RandomForestClassifier, } = mlf;\r\nconst { DecisionTreeRegression, DecisionTreeClassifier, } = mlc;\r\nconst { GaussianNB, } = mln;\r\nimport { default as MultivariateLinearRegression, } from 'ml-regression-multivariate-linear';\r\nimport { default as PCA, } from 'ml-pca';\r\nimport { ReinforcedLearningBase, UpperConfidenceBound, ThompsonSampling, } from './ReinforcedLearning';\r\n\r\nMachineLearning.Regression = Object.assign({},\r\n  MachineLearning.Regression);\r\nMachineLearning.SL = Object.assign({},\r\n  MachineLearning.SL);\r\nMachineLearning.Stat = Object.assign({},\r\n  MachineLearning.Stat);\r\nMachineLearning.RL = Object.assign({},\r\n  MachineLearning.RL, {\r\n    ReinforcedLearningBase,\r\n    UpperConfidenceBound,\r\n    ThompsonSampling,\r\n  });\r\nMachineLearning.UpperConfidenceBound = UpperConfidenceBound;\r\nMachineLearning.ThompsonSampling = ThompsonSampling;\r\nMachineLearning.Regression.DecisionTreeRegression = DecisionTreeRegression;\r\nMachineLearning.Regression.RandomForestRegression = RandomForestRegression;\r\nMachineLearning.Regression.MultivariateLinearRegression = MultivariateLinearRegression;\r\n\r\nMachineLearning.SL.GaussianNB = GaussianNB;\r\nMachineLearning.SL.LogisticRegression = LogisticRegression;\r\nMachineLearning.SL.DecisionTreeClassifier = DecisionTreeClassifier;\r\nMachineLearning.SL.RandomForestClassifier = RandomForestClassifier;\r\n\r\nMachineLearning.Stat.PCA = PCA;\r\n\r\n/**\r\n * @namespace\r\n * @see {@link https://github.com/mljs/ml} \r\n */\r\nexport const ml = MachineLearning;",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/ml.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "name": "mlf",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~mlf",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 131,
    "kind": "variable",
    "name": "mlc",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~mlc",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 132,
    "kind": "variable",
    "name": "mln",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~mln",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "RandomForestRegression",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~RandomForestRegression",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "DecisionTreeRegression",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~DecisionTreeRegression",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "GaussianNB",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~GaussianNB",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "ml",
    "memberof": "src/ml.mjs",
    "static": true,
    "longname": "src/ml.mjs~ml",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/ml.mjs",
    "importStyle": "{ml}",
    "description": "",
    "see": [
      "{@link https://github.com/mljs/ml} "
    ],
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/nlp.mjs",
    "content": "import { default as natural, } from 'natural';\r\nimport { ColumnVectorizer, } from './ColumnVectorizer';\r\n\r\n/**\r\n * @namespace\r\n * @see {@link https://github.com/NaturalNode/natural} \r\n */\r\nexport const nlp = Object.assign({\r\n  ColumnVectorizer,\r\n}, natural);",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/nlp.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "nlp",
    "memberof": "src/nlp.mjs",
    "static": true,
    "longname": "src/nlp.mjs~nlp",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/nlp.mjs",
    "importStyle": "{nlp}",
    "description": "",
    "see": [
      "{@link https://github.com/NaturalNode/natural} "
    ],
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/pd.mjs",
    "content": "import * as probabilty from 'probability-distributions';\r\n\r\n/**\r\n * @namespace\r\n * @see {@link https://github.com/Mattasher/probability-distributions} \r\n */\r\nexport const PD = Object.assign({}, probabilty);",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/pd.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "PD",
    "memberof": "src/pd.mjs",
    "static": true,
    "longname": "src/pd.mjs~PD",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/pd.mjs",
    "importStyle": "{PD}",
    "description": "",
    "see": [
      "{@link https://github.com/Mattasher/probability-distributions} "
    ],
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/util.mjs",
    "content": "import { default as ml, } from 'ml';\r\nimport { default as range, } from 'lodash.range';\r\nimport { default as rangeRight, } from 'lodash.rangeright';\r\n\r\nconst avg = ml.ArrayStat.mean;\r\nconst mean = avg;\r\nconst sum = ml.ArrayStat.sum;\r\nconst scale = (a, d) => a.map(x => (x - avg(a)) / d);\r\nconst max = a => a.concat([]).sort((x, y) => x < y)[0];\r\nconst min = a => a.concat([]).sort((x, y) => x > y)[0];\r\nconst sd = ml.ArrayStat.standardDeviation; //(a, av) => Math.sqrt(avg(a.map(x => (x - av) * x)));\r\n\r\n\r\n/**\r\n * Returns an array of the squared different of two arrays\r\n * @memberOf util\r\n * @param {Number[]} left \r\n * @param {Number[]} right \r\n * @returns {Number[]} Squared difference of left minus right array\r\n */\r\nfunction squaredDifference(left, right) {\r\n  return left.reduce((result, val, index, arr) => { \r\n    result.push(Math.pow((right[index]-val), 2));\r\n    return result;\r\n  }, []);\r\n}\r\n\r\n/**\r\n * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value\r\n * @memberOf util\r\n * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}\r\n * @example\r\n  const actuals = [ 2, 4, 5, 4, 5, ];\r\n  const estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];\r\n  const SE = ms.util.standardError(actuals, estimates);\r\n  SE.toFixed(2) // => 0.89\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} Standard Error of the Estimate\r\n */\r\nfunction standardError(actuals=[], estimates=[]) {\r\n  if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');\r\n  const squaredDiff = squaredDifference(actuals, estimates);\r\n  return Math.sqrt((sum(squaredDiff)) / (actuals.length - 2));\r\n}\r\n\r\n/**\r\n * Calculates the z score of each value in the sample, relative to the sample mean and standard deviation.\r\n * @memberOf util\r\n * @see {@link https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.mstats.zscore.html}\r\n * @param {Number[]} observations - An array like object containing the sample data.\r\n * @returns {Number[]} The z-scores, standardized by mean and standard deviation of input array \r\n */\r\nfunction standardScore(observations = []) {\r\n  const mean = avg(observations);\r\n  const stdDev = sd(observations);\r\n  return observations.map(x => ((x - mean) / stdDev));\r\n}\r\n\r\n/**\r\n * In statistics, the coefficient of determination, denoted R2 or r2 and pronounced \"R squared\", is the proportion of the variance in the dependent variable that is predictable from the independent variable(s). Compares distance of estimated values to the mean.\r\n * {\\bar {y}}={\\frac {1}{n}}\\sum _{i=1}^{n}y_{i}\r\n * @example\r\nconst actuals = [ 2, 4, 5, 4, 5, ];\r\nconst estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];\r\nconst r2 = ms.util.coefficientOfDetermination(actuals, estimates); \r\nr2.toFixed(1) // => 0.6\r\n * @memberOf util\r\n * @see {@link https://en.wikipedia.org/wiki/Coefficient_of_determination} {@link http://statisticsbyjim.com/regression/standard-error-regression-vs-r-squared/}\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} r^2\r\n */\r\nfunction coefficientOfDetermination(actuals = [], estimates = []) {\r\n  if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');\r\n  const actualsMean = mean(actuals);\r\n\r\n  const totalVariation = sum(actuals.reduce((result, val, index) => {\r\n    result.push(Math.pow((actuals[index]-actualsMean), 2));\r\n    return result;\r\n  }, []));\r\n  const unexplainedVariation = sum(actuals.reduce((result, val, index) => {\r\n    result.push(Math.pow((actuals[ index ] - estimates[ index ]), 2));\r\n    return result;\r\n  }, []));\r\n  const rSquared = ((totalVariation - unexplainedVariation) / totalVariation);\r\n\r\n  return rSquared;\r\n  /*\r\n  @see  {@link https://math.tutorvista.com/statistics/coefficient-of-determination.html}\r\n  Some Properties of Coefficient of Determination are as follow:\r\n  It helps to provide the proportion of the variance of one variable which is predictable from the other variable.\r\n  It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.\r\n  It can be taken as a ratio of the explained variation to the total variation.\r\n  It denotes the strength of the linear association between the variables.\r\n  The square of the coefficient of determination will always b e between 0 and1, which is 0 ≤\r\n  ≤\r\n  r2 ≤\r\n  ≤\r\n  1. Here r2 will always be a positive value.\r\n  As r2 gets close to 1, the Y data values get close to the regression line.\r\n  As r2 gets close to 0, the Y data values get further from the regression line.\r\n  It helps to provide the proportion of the variance of one variable which is predictable from the other variable.\r\n  It is a way of measurement which allows determining how clear it can be in making predictions from a certain data provided.\r\n  It can be taken as a ratio of the explained variation to the total variation.\r\n  It denotes the strength of the linear association between the variables.\r\n  */  \r\n}\r\n\r\n/**\r\n * You can use the adjusted coefficient of determination to determine how well a multiple regression equation “fits” the sample data. The adjusted coefficient of determination is closely related to the coefficient of determination (also known as R2) that you use to test the results of a simple regression equation.\r\n * @example\r\nconst adjr2 = ms.util.adjustedCoefficentOfDetermination({\r\n  rSquared: 0.944346527,\r\n  sampleSize: 8,\r\n  independentVariables: 2,\r\n}); \r\nr2.toFixed(3) // => 0.922\r\n * @memberOf util\r\n * @see {@link http://www.dummies.com/education/math/business-statistics/how-to-calculate-the-adjusted-coefficient-of-determination/}\r\n * @param {Object} [options={}] \r\n * @param {Number[]} [options.actuals] - numerical samples \r\n * @param {Number[]} [options.estimates] - estimate values \r\n * @param {Number} [options.rSquared] - coefficent of determination \r\n * @param {Number} [options.sampleSize] - the sample size \r\n * @param {Number} options.independentVariables - the number of independent variables in the regression equation\r\n * @returns {Number} adjusted r^2 for multiple linear regression\r\n */\r\nfunction adjustedCoefficentOfDetermination(options = {}) {\r\n  const { actuals, estimates, rSquared, independentVariables, sampleSize, } = options;\r\n  const r2 = rSquared || coefficientOfDetermination(actuals, estimates);\r\n  const n = sampleSize || actuals.length;\r\n  const k = independentVariables;\r\n\r\n  return (1 - (1 - r2) * ((n - 1) / (n - (k + 1))));\r\n}\r\n\r\n/**\r\n * The coefficent of Correlation is given by R decides how well the given data fits a line or a curve.\r\n * @example\r\nconst actuals = [ 39, 42, 67, 76, ];\r\nconst estimates = [ 44, 40, 60, 84, ];\r\nconst R = ms.util.coefficientOfCorrelation(actuals, estimates); \r\nR.toFixed(4) // => 0.9408\r\n * @memberOf util\r\n * @see {@link https://calculator.tutorvista.com/r-squared-calculator.html}\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} R\r\n */\r\nfunction coefficientOfCorrelation(actuals = [], estimates = []) {\r\n  if (actuals.length !== estimates.length) throw new RangeError('arrays must have the same length');\r\n  const sumX = sum(actuals);\r\n  const sumY = sum(estimates);\r\n  const sumProdXY = actuals.reduce((result, val, index) => { \r\n    result = result + (actuals[ index ] * estimates[ index ]);\r\n    return result;\r\n  }, 0);\r\n  const sumXSquared = actuals.reduce((result, val) => { \r\n    result = result + (val * val);\r\n    return result;\r\n  }, 0);\r\n  const sumYSquared = estimates.reduce((result, val) => { \r\n    result = result + (val * val);\r\n    return result;\r\n  }, 0);\r\n  const N = actuals.length;\r\n  const R = (\r\n    (N * sumProdXY - sumX * sumY) /\r\n    Math.sqrt(\r\n      (N * sumXSquared - Math.pow(sumX, 2)) * (N * sumYSquared - Math.pow(sumY, 2))\r\n    )\r\n  );\r\n  return R;\r\n}\r\n\r\n/**\r\n * The coefficent of determination is given by r^2 decides how well the given data fits a line or a curve.\r\n * \r\n * @param {Number[]} [actuals=[]] \r\n * @param {Number[]}  [estimates=[]]  \r\n * @returns {Number} r^2\r\n */\r\nfunction rSquared(actuals = [], estimates=[]) {\r\n  return Math.pow(coefficientOfCorrelation(actuals, estimates), 2);\r\n}\r\n\r\n/**\r\n * returns an array of vectors as an array of arrays\r\n * @example\r\nconst vectors = [ [1,2,3], [1,2,3], [3,3,4], [3,3,3] ];\r\nconst arrays = pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];\r\n * @memberOf util\r\n * @param {Array[]} vectors \r\n * @returns {Array[]}\r\n */\r\nfunction pivotVector(vectors=[]) {\r\n  return vectors.reduce((result, val, index/*, arr*/) => {\r\n    val.forEach((vecVal, i) => {\r\n      (index === 0)\r\n        ? (result.push([vecVal, ]))\r\n        : (result[ i ].push(vecVal));\r\n    });\r\n    return result;\r\n  }, []);\r\n} \r\n\r\n/**\r\n * returns a matrix of values by combining arrays into a matrix\r\n * @memberOf util\r\n * @example \r\n  const arrays = [\r\n    [ 1, 1, 3, 3 ],\r\n    [ 2, 2, 3, 3 ],\r\n    [ 3, 3, 4, 3 ],\r\n  ];\r\n  pivotArrays(arrays); //=>\r\n  // [\r\n  //   [1, 2, 3,],\r\n  //   [1, 2, 3,],\r\n  //   [3, 3, 4,],\r\n  //   [3, 3, 3,],\r\n  // ];\r\n  * @param {Array} [vectors=[]] - array of arguments for columnArray to merge columns into a matrix\r\n  * @returns {Array} a matrix of column values \r\n  */\r\nfunction pivotArrays(arrays = []) {\r\n  return (arrays.length)\r\n    ? arrays[ 0 ].map((vectorItem, index) => {\r\n      const returnArray = [];\r\n      arrays.forEach((v, i) => {\r\n        returnArray.push(arrays[ i ][ index ]);\r\n      });\r\n      return returnArray;\r\n    })\r\n    : arrays;\r\n}\r\n\r\n/**\r\n  * Standardize features by removing the mean and scaling to unit variance\r\n\r\n  Centering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Mean and standard deviation are then stored to be used on later data using the transform method.\r\n\r\n  Standardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual feature do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance)\r\n  * @memberOf util\r\n  * @param {number[]} z - array of integers or floats\r\n  * @returns {number[]}\r\n  */\r\nconst StandardScaler = (z) => scale(z, sd(z));\r\n\r\n\r\n/** This function returns two functions that can standard scale new inputs and reverse scale new outputs\r\n * @param {Number[]} values - array of numbers\r\n * @returns {Object} - {scale[ Function ], descale[ Function ]}\r\n*/\r\nfunction StandardScalerTransforms(vector = [], nan_value = -1, return_nan = false, inputComponents = {}) {\r\n  const average = typeof inputComponents.average !=='undefined' \r\n    ? inputComponents.average\r\n    : avg(vector);\r\n  const standard_dev = typeof inputComponents.standard_dev !=='undefined' \r\n    ? inputComponents.standard_dev\r\n    : sd(vector);\r\n  const maximum = typeof inputComponents.maximum !=='undefined' \r\n    ? inputComponents.maximum\r\n    : max(vector);\r\n  const minimum = typeof inputComponents.minimum !=='undefined' \r\n    ? inputComponents.minimum\r\n    : min(vector);\r\n  const scale = (z) => {\r\n    const scaledValue = (z - average) / standard_dev;\r\n    if (isNaN(scaledValue) && return_nan) return scaledValue;\r\n    else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;\r\n    else return scaledValue;\r\n  }; // equivalent to MinMaxScaler(z)\r\n  const descale = (scaledZ) => {\r\n    const descaledValue = (scaledZ * standard_dev) + average;\r\n    if (isNaN(descaledValue) && return_nan) return descaledValue;\r\n    else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;\r\n    else return descaledValue;\r\n  };\r\n  const values = vector.map(scale)\r\n    .map(val => {\r\n      if (isNaN(val)) return nan_value;\r\n      else return val;\r\n    });\r\n  return {\r\n    components: {\r\n      average,\r\n      standard_dev,\r\n      maximum,\r\n      minimum,\r\n    },\r\n    scale,\r\n    descale,\r\n    values,\r\n  };\r\n}\r\n\r\n/**\r\n * Transforms features by scaling each feature to a given range.\r\n  This estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one.\r\n  * @memberOf util\r\n  * @param {number[]} z - array of integers or floats\r\n  * @returns {number[]}\r\n  */\r\nconst MinMaxScaler= (z) => scale(z, (max(z) - min(z)));\r\n\r\n/** This function returns two functions that can mix max scale new inputs and reverse scale new outputs\r\n * @param {Number[]} values - array of numbers\r\n * @returns {Object} - {scale[ Function ], descale[ Function ]}\r\n*/\r\nfunction MinMaxScalerTransforms(vector = [], nan_value = -1, return_nan=false, inputComponents = {}) {\r\n  const average = typeof inputComponents.average !=='undefined' \r\n    ? inputComponents.average\r\n    : avg(vector);\r\n  const standard_dev = typeof inputComponents.standard_dev !=='undefined' \r\n    ? inputComponents.standard_dev\r\n    : sd(vector);\r\n  const maximum = typeof inputComponents.maximum !=='undefined' \r\n    ? inputComponents.maximum\r\n    : max(vector);\r\n  const minimum = typeof inputComponents.minimum !=='undefined' \r\n    ? inputComponents.minimum\r\n    : min(vector);\r\n  const scale = (z) => {\r\n    const scaledValue = (z - average) / (maximum - minimum);\r\n    if (isNaN(scaledValue) && return_nan) return scaledValue;\r\n    else if (isNaN(scaledValue) && return_nan === false) return (isNaN(standard_dev)) ? z : standard_dev;\r\n    else return scaledValue;\r\n  }; // equivalent to MinMaxScaler(z)\r\n  const descale = (scaledZ) => {\r\n    const descaledValue = (scaledZ * (maximum - minimum)) + average;\r\n    if (isNaN(descaledValue) && return_nan) return descaledValue;\r\n    else if (isNaN(descaledValue) && return_nan === false) return (isNaN(standard_dev)) ? scaledZ : standard_dev;\r\n    else return descaledValue;\r\n  };\r\n  const values = vector.map(scale)\r\n    .map(val => {\r\n      if (isNaN(val)) return nan_value;\r\n      else return val;\r\n    });\r\n  return {\r\n    components: {\r\n      average,\r\n      standard_dev,\r\n      maximum,\r\n      minimum,\r\n    },\r\n    scale,\r\n    descale,\r\n    values,\r\n  };\r\n}\r\n\r\n/**\r\n  * Converts z-score into the probability\r\n  * @memberOf util\r\n  * @see {@link https://stackoverflow.com/questions/36575743/how-do-i-convert-probability-into-z-score}\r\n  * @param {number} z - Number of standard deviations from the mean.\r\n  * @returns {number} p  - p-value\r\n  */\r\nfunction approximateZPercentile(z, alpha=true) {\r\n  // If z is greater than 6.5 standard deviations from the mean\r\n  // the number of significant digits will be outside of a reasonable \r\n  // range.\r\n  if (z < -6.5)\r\n    return 0.0;\r\n\r\n  if (z > 6.5)\r\n    return 1.0;\r\n\r\n  let factK    = 1;\r\n  let sum      = 0;\r\n  let term     = 1;\r\n  let k        = 0;\r\n  let loopStop = Math.exp(-23);\r\n   \r\n  while (Math.abs(term) > loopStop) {\r\n    term = 0.3989422804 * Math.pow(-1, k) * Math.pow(z, k) / (2 * k + 1) /\r\n            Math.pow(2, k) * Math.pow(z, k + 1) / factK;\r\n    sum += term;\r\n    k++;\r\n    factK *= k;\r\n  }\r\n\r\n  sum += 0.5;\r\n\r\n  return (alpha) ? 1 - sum : sum;\r\n}\r\n\r\n/**\r\n * returns a safe column name / url slug from a string\r\n * @param {String} name \r\n * @returns {String}\r\n */\r\nfunction getSafePropertyName(name) {\r\n  return name.replace(/[^\\w\\s]/gi, '_');\r\n}\r\n\r\n/**\r\n * The errors (residuals) from acutals and estimates\r\n * @memberOf util\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const errors = ms.util.forecastErrors(actuals, estimates); // => [ 4, -5, 2, -3 ]\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number[]} errors (residuals)\r\n */\r\nfunction forecastErrors(actuals, estimates) {\r\n  if (actuals.length !== estimates.length) throw new Error(`Actuals length (${actuals.length}) must equal Estimates length (${estimates.length})`);\r\n  return actuals.map((act, i) => act - estimates[ i ]);\r\n}\r\n\r\n/**\r\n * The bias of forecast accuracy\r\n * @memberOf util\r\n * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const MFE = ms.util.meanForecastError(actuals, estimates); // =>  -0.5\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} MFE (bias)\r\n */\r\nfunction meanForecastError(actuals, estimates) { \r\n  const errors = forecastErrors(actuals, estimates);\r\n  return avg(errors);\r\n}\r\n\r\n/**\r\n * Mean Absolute Deviation (MAD) indicates the absolute size of the errors\r\n * @memberOf util\r\n * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const MAD = ms.util.meanAbsoluteDeviation(actuals, estimates); // =>  3.5\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} MAD\r\n */\r\nfunction meanAbsoluteDeviation(actuals, estimates) { \r\n  const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));\r\n  return avg(errors);\r\n}\r\n\r\n/**\r\n * Tracking Signal - Used to pinpoint forecasting models that need adjustment\r\n * @memberOf util\r\n * @see {@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const trackingSignal = ms.util.trackingSignal(actuals, estimates); \r\n  trackingSignal.toFixed(2) // =>  -0.57\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} trackingSignal\r\n */\r\nfunction trackingSignal(actuals, estimates) {\r\n  const runningSumOfForecastErrors = sum(forecastErrors(actuals, estimates));\r\n  const MAD = meanAbsoluteDeviation(actuals, estimates);\r\n  return runningSumOfForecastErrors / MAD;\r\n}\r\n\r\n/**\r\n * The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value\r\n * @memberOf util\r\n * @see {@link http://onlinestatbook.com/2/regression/accuracy.html}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];   \r\n  const MSE = ms.util.meanSquaredError(actuals, estimates); // => 13.5\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} MSE\r\n */\r\nfunction meanSquaredError(actuals, estimates) {\r\n  const squaredErrors = forecastErrors(actuals, estimates).map(e=>e*e);\r\n  return avg(squaredErrors);\r\n}\r\n\r\n/**\r\n * MAD over Mean Ratio - The MAD/Mean ratio is an alternative to the MAPE that is better suited to intermittent and low-volume data. As stated previously, percentage errors cannot be calculated when the actual equals zero and can take on extreme values when dealing with low-volume data. These issues become magnified when you start to average MAPEs over multiple time series. The MAD/Mean ratio tries to overcome this problem by dividing the MAD by the Mean—essentially rescaling the error to make it comparable across time series of varying scales\r\n * @memberOf util\r\n * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const MMR = ms.util.MADMeanRatio(actuals, estimates);\r\n  MAPE.toFixed(2) // => 0.08\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} MMR\r\n */\r\nfunction MADMeanRatio(actuals, estimates) {\r\n  const MAD = meanAbsoluteDeviation(actuals, estimates);\r\n  const mean = avg(actuals);\r\n  return MAD / mean;\r\n}\r\n\r\n/**\r\n * MAPE (Mean Absolute Percent Error) measures the size of the error in percentage terms\r\n * @memberOf util\r\n * @see {@link https://www.forecastpro.com/Trends/forecasting101August2011.html}\r\n * @example\r\n  const actuals = [ 45, 38, 43, 39 ];\r\n  const estimates = [ 41, 43, 41, 42 ];\r\n  const MAPE = ms.util.meanAbsolutePercentageError(actuals, estimates);\r\n  MAPE.toFixed(2) // => 0.86\r\n * @param {Number[]} actuals - numerical samples \r\n * @param {Number[]} estimates - estimates values\r\n * @returns {Number} MAPE\r\n */\r\nfunction meanAbsolutePercentageError(actuals, estimates) {\r\n  const errors = forecastErrors(actuals, estimates).map(e=>Math.abs(e));\r\n  const absErrorPercent = errors.map((e, i) => e / actuals[ i ]);\r\n  return avg(absErrorPercent);\r\n}\r\n\r\n/**\r\n * @namespace\r\n */\r\nexport const util = {\r\n  range,\r\n  rangeRight,\r\n  scale,\r\n  avg,\r\n  mean: avg,\r\n  sum,\r\n  max,\r\n  min,\r\n  sd,\r\n  StandardScaler,\r\n  StandardScalerTransforms,\r\n  MinMaxScaler,\r\n  MinMaxScalerTransforms,\r\n  LogScaler: (z) => z.map(Math.log),\r\n  ExpScaler: (z) => z.map(Math.exp),\r\n  squaredDifference,\r\n  standardError,\r\n  coefficientOfDetermination,\r\n  coefficientOfCorrelation,\r\n  r: coefficientOfCorrelation,\r\n  rSquared,\r\n  adjustedCoefficentOfDetermination,\r\n  rBarSquared: adjustedCoefficentOfDetermination,\r\n  adjustedRSquared: adjustedCoefficentOfDetermination,\r\n  pivotVector,\r\n  pivotArrays,\r\n  standardScore,\r\n  zScore: standardScore,\r\n  approximateZPercentile,\r\n  // approximatePercentileZ,\r\n  getSafePropertyName,\r\n  forecastErrors,\r\n  meanForecastError,\r\n  MFE: meanForecastError,\r\n  meanAbsoluteDeviation,\r\n  MAD: meanAbsoluteDeviation,\r\n  trackingSignal,\r\n  TS: trackingSignal,\r\n  meanSquaredError,\r\n  MSE: meanSquaredError,\r\n  MADMeanRatio,\r\n  MMR: MADMeanRatio,\r\n  meanAbsolutePercentageError,\r\n  MAPE: meanAbsolutePercentageError,\r\n};",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/src/util.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "avg",
    "memberof": "src/util.mjs",
    "static": true,
    "longname": "src/util.mjs~avg",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "mean",
    "memberof": "src/util.mjs",
    "static": true,
    "longname": "src/util.mjs~mean",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 144,
    "kind": "variable",
    "name": "sum",
    "memberof": "src/util.mjs",
    "static": true,
    "longname": "src/util.mjs~sum",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "scale",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~scale",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "max",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~max",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 147,
    "kind": "function",
    "name": "min",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~min",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "sd",
    "memberof": "src/util.mjs",
    "static": true,
    "longname": "src/util.mjs~sd",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "squaredDifference",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~squaredDifference",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Returns an array of the squared different of two arrays",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number[]} Squared difference of left minus right array"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": "Squared difference of left minus right array"
    },
    "ignore": true
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "standardError",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~standardError",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value",
    "examples": [
      "const actuals = [ 2, 4, 5, 4, 5, ];\nconst estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];\nconst SE = ms.util.standardError(actuals, estimates);\nSE.toFixed(2) // => 0.89"
    ],
    "see": [
      "{@link http://onlinestatbook.com/2/regression/accuracy.html}"
    ],
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} Standard Error of the Estimate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Standard Error of the Estimate"
    },
    "ignore": true
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "standardScore",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~standardScore",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Calculates the z score of each value in the sample, relative to the sample mean and standard deviation.",
    "see": [
      "{@link https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.mstats.zscore.html}"
    ],
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number[]} The z-scores, standardized by mean and standard deviation of input array "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "observations",
        "description": "An array like object containing the sample data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": "The z-scores, standardized by mean and standard deviation of input array"
    },
    "ignore": true
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "coefficientOfDetermination",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~coefficientOfDetermination",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "In statistics, the coefficient of determination, denoted R2 or r2 and pronounced \"R squared\", is the proportion of the variance in the dependent variable that is predictable from the independent variable(s). Compares distance of estimated values to the mean.\n{\\bar {y}}={\\frac {1}{n}}\\sum _{i=1}^{n}y_{i}",
    "examples": [
      "const actuals = [ 2, 4, 5, 4, 5, ];\nconst estimates = [ 2.8, 3.4, 4, 4.6, 5.2, ];\nconst r2 = ms.util.coefficientOfDetermination(actuals, estimates); \nr2.toFixed(1) // => 0.6"
    ],
    "see": [
      "{@link https://en.wikipedia.org/wiki/Coefficient_of_determination} {@link http://statisticsbyjim.com/regression/standard-error-regression-vs-r-squared/}"
    ],
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} r^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "r^2"
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "adjustedCoefficentOfDetermination",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~adjustedCoefficentOfDetermination",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "You can use the adjusted coefficient of determination to determine how well a multiple regression equation “fits” the sample data. The adjusted coefficient of determination is closely related to the coefficient of determination (also known as R2) that you use to test the results of a simple regression equation.",
    "examples": [
      "const adjr2 = ms.util.adjustedCoefficentOfDetermination({\nrSquared: 0.944346527,\nsampleSize: 8,\nindependentVariables: 2,\n}); \nr2.toFixed(3) // => 0.922"
    ],
    "see": [
      "{@link http://www.dummies.com/education/math/business-statistics/how-to-calculate-the-adjusted-coefficient-of-determination/}"
    ],
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} adjusted r^2 for multiple linear regression"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "options.actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "name": "options.estimates",
        "description": "estimate values"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.rSquared",
        "description": "coefficent of determination"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.sampleSize",
        "description": "the sample size"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "options.independentVariables",
        "description": "the number of independent variables in the regression equation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "adjusted r^2 for multiple linear regression"
    },
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "coefficientOfCorrelation",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~coefficientOfCorrelation",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The coefficent of Correlation is given by R decides how well the given data fits a line or a curve.",
    "examples": [
      "const actuals = [ 39, 42, 67, 76, ];\nconst estimates = [ 44, 40, 60, 84, ];\nconst R = ms.util.coefficientOfCorrelation(actuals, estimates); \nR.toFixed(4) // => 0.9408"
    ],
    "see": [
      "{@link https://calculator.tutorvista.com/r-squared-calculator.html}"
    ],
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} R"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "R"
    },
    "ignore": true
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "rSquared",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~rSquared",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The coefficent of determination is given by r^2 decides how well the given data fits a line or a curve.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} r^2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "actuals",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "estimates",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "r^2"
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "pivotVector",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~pivotVector",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "returns an array of vectors as an array of arrays",
    "examples": [
      "const vectors = [ [1,2,3], [1,2,3], [3,3,4], [3,3,3] ];\nconst arrays = pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];"
    ],
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array[]"
        ],
        "spread": false,
        "optional": false,
        "name": "vectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "pivotArrays",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~pivotArrays",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "returns a matrix of values by combining arrays into a matrix",
    "examples": [
      "const arrays = [\n[ 1, 1, 3, 3 ],\n[ 2, 2, 3, 3 ],\n[ 3, 3, 4, 3 ],\n];\npivotArrays(arrays); //=>\n// [\n//   [1, 2, 3,],\n//   [1, 2, 3,],\n//   [3, 3, 4,],\n//   [3, 3, 3,],\n// ];"
    ],
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array} a matrix of column values "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "vectors",
        "description": "array of arguments for columnArray to merge columns into a matrix"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "a matrix of column values"
    },
    "ignore": true
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "StandardScaler",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~StandardScaler",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Standardize features by removing the mean and scaling to unit variance\n\nCentering and scaling happen independently on each feature by computing the relevant statistics on the samples in the training set. Mean and standard deviation are then stored to be used on later data using the transform method.\n\nStandardization of a dataset is a common requirement for many machine learning estimators: they might behave badly if the individual feature do not more or less look like standard normally distributed data (e.g. Gaussian with 0 mean and unit variance)",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "array of integers or floats"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "StandardScalerTransforms",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~StandardScalerTransforms",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "This function returns two functions that can standard scale new inputs and reverse scale new outputs",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - {scale[ Function ], descale[ Function ]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "{scale[ Function ], descale[ Function ]}"
    },
    "ignore": true
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "MinMaxScaler",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~MinMaxScaler",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Transforms features by scaling each feature to a given range.\nThis estimator scales and translates each feature individually such that it is in the given range on the training set, i.e. between zero and one.",
    "lineNumber": 306,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number[]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "array of integers or floats"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "MinMaxScalerTransforms",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~MinMaxScalerTransforms",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "This function returns two functions that can mix max scale new inputs and reverse scale new outputs",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} - {scale[ Function ], descale[ Function ]}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "values",
        "description": "array of numbers"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "{scale[ Function ], descale[ Function ]}"
    },
    "ignore": true
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "approximateZPercentile",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~approximateZPercentile",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Converts z-score into the probability",
    "see": [
      "{@link https://stackoverflow.com/questions/36575743/how-do-i-convert-probability-into-z-score}"
    ],
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number} p  - p-value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Number of standard deviations from the mean."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "p  - p-value"
    },
    "ignore": true
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "getSafePropertyName",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~getSafePropertyName",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "returns a safe column name / url slug from a string",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "forecastErrors",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~forecastErrors",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The errors (residuals) from acutals and estimates",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst errors = ms.util.forecastErrors(actuals, estimates); // => [ 4, -5, 2, -3 ]"
    ],
    "lineNumber": 411,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number[]} errors (residuals)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": "errors (residuals)"
    },
    "ignore": true
  },
  {
    "__docId__": 165,
    "kind": "function",
    "name": "meanForecastError",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~meanForecastError",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The bias of forecast accuracy",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst MFE = ms.util.meanForecastError(actuals, estimates); // =>  -0.5"
    ],
    "see": [
      "{@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}"
    ],
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} MFE (bias)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "MFE (bias)"
    },
    "ignore": true
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "meanAbsoluteDeviation",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~meanAbsoluteDeviation",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Mean Absolute Deviation (MAD) indicates the absolute size of the errors",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst MAD = ms.util.meanAbsoluteDeviation(actuals, estimates); // =>  3.5"
    ],
    "see": [
      "{@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}"
    ],
    "lineNumber": 445,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} MAD"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "MAD"
    },
    "ignore": true
  },
  {
    "__docId__": 167,
    "kind": "function",
    "name": "trackingSignal",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~trackingSignal",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "Tracking Signal - Used to pinpoint forecasting models that need adjustment",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst trackingSignal = ms.util.trackingSignal(actuals, estimates); \ntrackingSignal.toFixed(2) // =>  -0.57"
    ],
    "see": [
      "{@link https://scm.ncsu.edu/scm-articles/article/measuring-forecast-accuracy-approaches-to-forecasting-a-tutorial}"
    ],
    "lineNumber": 463,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} trackingSignal"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "trackingSignal"
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "function",
    "name": "meanSquaredError",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~meanSquaredError",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "The standard error of the estimate is a measure of the accuracy of predictions made with a regression line. Compares the estimate to the actual value",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];   \nconst MSE = ms.util.meanSquaredError(actuals, estimates); // => 13.5"
    ],
    "see": [
      "{@link http://onlinestatbook.com/2/regression/accuracy.html}"
    ],
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} MSE"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "MSE"
    },
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "function",
    "name": "MADMeanRatio",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~MADMeanRatio",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "MAD over Mean Ratio - The MAD/Mean ratio is an alternative to the MAPE that is better suited to intermittent and low-volume data. As stated previously, percentage errors cannot be calculated when the actual equals zero and can take on extreme values when dealing with low-volume data. These issues become magnified when you start to average MAPEs over multiple time series. The MAD/Mean ratio tries to overcome this problem by dividing the MAD by the Mean—essentially rescaling the error to make it comparable across time series of varying scales",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst MMR = ms.util.MADMeanRatio(actuals, estimates);\nMAPE.toFixed(2) // => 0.08"
    ],
    "see": [
      "{@link https://www.forecastpro.com/Trends/forecasting101August2011.html}"
    ],
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} MMR"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "MMR"
    },
    "ignore": true
  },
  {
    "__docId__": 170,
    "kind": "function",
    "name": "meanAbsolutePercentageError",
    "memberof": "src/util.mjs",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/util.mjs~meanAbsolutePercentageError",
    "access": "public",
    "export": false,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": null,
    "description": "MAPE (Mean Absolute Percent Error) measures the size of the error in percentage terms",
    "examples": [
      "const actuals = [ 45, 38, 43, 39 ];\nconst estimates = [ 41, 43, 41, 42 ];\nconst MAPE = ms.util.meanAbsolutePercentageError(actuals, estimates);\nMAPE.toFixed(2) // => 0.86"
    ],
    "see": [
      "{@link https://www.forecastpro.com/Trends/forecasting101August2011.html}"
    ],
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "util"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Number} MAPE"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "actuals",
        "description": "numerical samples"
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "estimates",
        "description": "estimates values"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "MAPE"
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "util",
    "memberof": "src/util.mjs",
    "static": true,
    "longname": "src/util.mjs~util",
    "access": "public",
    "export": true,
    "importPath": "modelscript/src/util.mjs",
    "importStyle": "{util}",
    "description": "",
    "lineNumber": 527,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "kind": "index",
    "content": "# ModelScript\n\n[![Coverage Status](https://coveralls.io/repos/github/repetere/modelscript/badge.svg?branch=master)](https://coveralls.io/github/repetere/modelscript?branch=master) [![Build Status](https://travis-ci.org/repetere/modelscript.svg?branch=master)](https://travis-ci.org/repetere/modelscript)\n\n## Description\n\n**ModelScript** is a javascript module with simple and efficient tools for data mining and data analysis in JavaScript. **ModelScript** can be used with [ML.js](https://github.com/mljs/ml), [pandas-js](https://github.com/StratoDem/pandas-js), and [numjs](https://github.com/numjs/numjs), to approximate the equivalent R/Python tool chain in JavaScript.\n\nIn Python, data preparation is typically done in a DataFrame, ModelScript encourages a more R like workflow where the data preparation is in it's native structure.\n\n### Installation\n\n```sh\n$ npm i modelscript\n```\n\n### [Full Documentation](https://github.com/repetere/modelscript/blob/master/docs/api.md)\n\n### Usage (basic)\n\nModelScript is an EcmaScript module and designed to be imported in an ES2015+ environment. In order to use in older environment, please use `const modelscript = require('modelscript/build/modelscript.cjs.js')` for older versions of node and `<script type=\"text/javascript\" src=\".../path/to/.../modelscript/build/modelscript.umd.js\"/>`\n\n```javascript\n\"modelscript\" : {\n  ml:{ //see https://github.com/mljs/ml\n    UpperConfidenceBound [Class: UpperConfidenceBound]{ // Implementation of the Upper Confidence Bound algorithm\n      predict(), //returns next action based off of the upper confidence bound\n      learn(), //single step training method\n      train(), //training method for upper confidence bound calculations\n    },\n    ThompsonSampling [Class: ThompsonSampling]{ //Implementation of the Thompson Sampling algorithm\n      predict(), //returns next action based off of the thompson sampling\n      learn(), //single step training method\n      train(), //training method for thompson sampling calculations\n    },\n  },\n  nlp:{ //see https://github.com/NaturalNode/natural\n    ColumnVectorizer [Class: ColumnVectorizer]{ //class creating sparse matrices from a corpus\n      get_tokens(), // Returns a distinct array of all tokens after fit_transform\n      get_vector_array(), //Returns array of arrays of strings for dependent features from sparse matrix word map\n      fit_transform(options), //Fits and transforms data by creating column vectors (a sparse matrix where each row has every word in the corpus as a column and the count of appearances in the corpus)\n      get_limited_features(options), //Returns limited sets of dependent features or all dependent features sorted by word count\n      evaluateString(testString), //returns word map with counts\n      evaluate(testString), //returns new matrix of words with counts in columns\n    }\n  },\n  csv:{\n    loadCSV: [Function: loadCSV], //asynchronously loads CSVs, either a filepath or a remote URI\n    loadTSV: [Function: loadTSV], //asynchronously loads TSVs, either a filepath or a remote URI\n  },\n  model_selection: {\n    train_test_split: [Function: train_test_split], // splits data into training and testing sets\n    cross_validation_split: [Function: kfolds], //splits data into k-folds\n    cross_validate_score: [Function: cross_validate_score],//test model variance and bias\n    grid_search: [Function: grid_search], // tune models with grid search for optimal performance\n  },\n  DataSet [Class: DataSet]: { //class for manipulating an array of objects (typically from CSV data)\n    columnMatrix(vectors), //returns a matrix of values by combining column arrays into a matrix\n    columnArray(columnName, options), // - returns a new array of a selected column from an array of objects, can filter, scale and replace values\n    columnReplace(columnName, options), // - returns a new array of a selected column from an array of objects and replaces empty values, encodes values and scales values\n    columnScale(columnName, options), // - returns a new array of scaled values which can be reverse (descaled). The scaling transformations are stored on the DataSet\n    columnDescale(columnName, options), // - Returns a new array of descaled values\n    selectColumns(columns, options), //returns a list of objects with only selected columns as properties\n    labelEncoder(columnName, options), // - returns a new array and label encodes a selected column\n    labelDecode(columnName, options), // - returns a new array and decodes an encoded column back to the original array values\n    oneHotEncoder(columnName, options), // - returns a new object of one hot encoded values\n    columnMatrix(columnName, options), // - returns a matrix of values from multiple columns\n    columnReducer(newColumnName, options), // - returns a new array of a selected column that is passed a reducer function, this is used to create new columns for aggregate statistics\n    columnMerge(name, data), // - returns a new column that is merged onto the data set\n    filterColumn(options), // - filtered rows of data,\n    fitColumns(options), // - mutates data property of DataSet by replacing multiple columns in a single command\n    static reverseColumnMatrix(options), // returns an array of objects by applying labels to matrix of columns\n    static reverseColumnVector(options), // returns an array of objects by applying labels to column vector\n  },\n  calc:{\n    getTransactions: [Function getTransactions], // Formats an array of transactions into a sparse matrix like format for Apriori/Eclat\n    assocationRuleLearning: [async Function assocationRuleLearning], // returns association rule learning results using apriori\n  },\n  util: {\n    range: [Function], // range helper function\n    rangeRight: [Function], //range right helper function\n    scale: [Function: scale], //scale / normalize data\n    avg: [Function: arithmeticMean], // aritmatic mean\n    mean: [Function: arithmeticMean], // aritmatic mean\n    sum: [Function: sum],\n    max: [Function: max],\n    min: [Function: min],\n    sd: [Function: standardDeviation], // standard deviation\n    StandardScalerTransforms: [Function: StandardScalerTransforms], // returns two functions that can standard scale new inputs and reverse scale new outputs\n    MinMaxScalerTransforms: [Function: MinMaxScalerTransforms], // returns two functions that can mix max scale new inputs and reverse scale new outputs\n    StandardScaler: [Function: StandardScaler], // standardization (z-scores)\n    MinMaxScaler: [Function: MinMaxScaler], // min-max scaling\n    ExpScaler: [Function: ExpScaler], // exponent scaling\n    LogScaler: [Function: LogScaler], // natual log scaling\n    squaredDifference: [Function: squaredDifference], // Returns an array of the squared different of two arrays\n    standardError: [Function: standardError], // The standard error of the estimate is a measure of the accuracy of predictions made with a regression line\n    coefficientOfDetermination: [Function: coefficientOfDetermination],\n    adjustedCoefficentOfDetermination: [Function: adjustedCoefficentOfDetermination],\n    adjustedRSquared: [Function: adjustedCoefficentOfDetermination],\n    rBarSquared: [Function: adjustedCoefficentOfDetermination],\n    r: [Function: coefficientOfCorrelation],\n    coefficientOfCorrelation: [Function: coefficientOfCorrelation],\n    rSquared: [Function: rSquared], //r^2\n    pivotVector: [Function: pivotVector], // returns an array of vectors as an array of arrays\n    pivotArrays: [Function: pivotArrays], // returns a matrix of values by combining arrays into a matrix\n    standardScore: [Function: standardScore], // Calculates the z score of each value in the sample, relative to the sample mean and standard deviation.\n    zScore: [Function: standardScore], // alias for standardScore.\n    approximateZPercentile: [Function: approximateZPercentile], // approximate the p value from a z score\n  },\n  preprocessing: {\n    DataSet: [Class DataSet],\n  },\n}\n```\n\n### Examples (JavaScript / Python / R)\n\n#### Loading CSV Data\n\n##### Javascript\n\n```javascript\nimport { default as jsk } from 'modelscript';\nlet dataset;\n\n//In JavaScript, by default most I/O Operations are asynchronous, see the notes section for more\nms.loadCSV('/some/file/path.csv')\n  .then(csvData=>{\n    dataset = new ms.DataSet(csvData);\n    console.log({csvData});\n    /* csvData [{\n      'Country': 'Brazil',\n      'Age': '44',\n      'Salary': '72000',\n      'Purchased': 'N',\n    },\n    ...\n    {\n      'Country': 'Mexico',\n      'Age': '27',\n      'Salary': '48000',\n      'Purchased': 'Yes',\n    }] */\n  })\n  .catch(console.error);\n\n// or from URL\nms.loadCSV('https://example.com/some/file/path.csv')\n\n```\n\n##### Python\n\n```python\nimport pandas as pd\n\n#Importing the dataset\ndataset = pd.read_csv('/some/file/path.csv')\n```\n\n##### R\n\n```R\n# Importingd the dataset\ndataset = read.csv('Data.csv')\n```\n\n#### Handling Missing Data\n\n##### Javascript\n\n```javascript\n//column Array returns column of data by name\n// [ '44','27','30','38','40','35','','48','50', '37' ]\nconst OringalAgeColumn = dataset.columnArray('Age'); \n\n//column Replace returns new Array with replaced missing data\n//[ '44','27','30','38','40','35',38.77777777777778,'48','50','37' ]\nconst ReplacedAgeMeanColumn = dataset.columnReplace('Age',{strategy:'mean'}); \n\n//fit Columns, mutates dataset\ndataset.fitColumns({\n  columns:[{name:'Age',strategy:'mean'}]\n});\n/*\ndataset\nclass DataSet\n  data:[\n    {\n      'Country': 'Brazil',\n      'Age': '38.77777777777778',\n      'Salary': '72000',\n      'Purchased': 'N',\n    }\n    ...\n  ]\n*/\n```\n\n##### Python\n\n```python\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, 3].values\n\n# Taking care of of missing data\nfrom sklearn.preprocessing import Imputer\nimputer = Imputer(missing_values='NaN', strategy = 'mean', axis=0)\nimputer = imputer.fit(X[:, 1:3])\nX[:, 1:3] = imputer.transform(X[:, 1:3])\n```\n\n##### R\n\n```R\n# Taking care of the missing data\ndataset$Age = ifelse(is.na(dataset$Age),\n                ave(dataset$Age,FUN = function(x) mean(x,na.rm =TRUE)),\n                dataset$Age)\n```\n\n#### One Hot Encoding and Label Encoding\n\n##### Javascript\n\n```javascript\n// [ 'Brazil','Mexico','Ghana','Mexico','Ghana','Brazil','Mexico','Brazil','Ghana', 'Brazil' ]\nconst originalCountry = dataset.columnArray('Country'); \n/*\n{ originalCountry:\n   { Country_Brazil: [ 1, 0, 0, 0, 0, 1, 0, 1, 0, 1 ],\n     Country_Mexico: [ 0, 1, 0, 1, 0, 0, 1, 0, 0, 0 ],\n     Country_Ghana: [ 0, 0, 1, 0, 1, 0, 0, 0, 1, 0 ] },\n    }\n*/\nconst oneHotCountryColumn = dataset.oneHotEncoder('Country');\n\n// [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ]\nconst originalPurchasedColumn = dataset.labelEncoder('Purchased');\n// [ 0, 1, 0, 0, 1, 1, 1, 1, 0, 1 ]\nconst encodedBinaryPurchasedColumn = dataset.labelEncoder('Purchased',{ binary:true });\n// [ 0, 1, 2, 3, 1, 1, 4, 1, 2, 1 ]\nconst encodedPurchasedColumn = dataset.labelEncoder('Purchased');\n// [ 'N', 'Yes', 'No', 'f', 'Yes', 'Yes', 'false', 'Yes', 'No', 'Yes' ]\nconst decodedPurchased = dataset.labelDecode('Purchased', { data: encodedPurchasedColumn, });\n\n\n//fit Columns, mutates dataset\ndataset.fitColumns({\n  columns:[\n    {\n      name: 'Purchased',\n      options: {\n        strategy: 'label',\n        labelOptions: {\n          binary: true,\n        },\n      },\n    },\n    {\n      name: 'Country',\n      options: {\n        strategy: 'onehot',\n      },\n    },\n  ]\n});\n```\n\n##### Python\n\n```python\n# Encoding  categorical data\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nlabelencoder_X = LabelEncoder()\nX[:, 0] = labelencoder_X.fit_transform(X[:, 0])\nonehotencoder = OneHotEncoder(categorical_features=[0])\nX = onehotencoder.fit_transform(X).toarray()\nlabelencoder_y = LabelEncoder()\ny = labelencoder_y.fit_transform(y)\n```\n\n##### R\n\n```R\n# Encoding categorical data\ndataset$Country = factor(dataset$Country,\n                         levels = c('Brazil', 'Mexico', 'Ghana'),\n                         labels = c(1, 2, 3))\n\ndataset$Purchased = factor(dataset$Purchased,\n                         levels = c('No', 'Yes'),\n                         labels = c(0, 1))\n```\n\n#### Cross Validation\n\n##### Javascript\n\n```javascript\nconst testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\n\n// { train: [ 50, 20, 34, 33, 10, 23, 90, 42 ], test: [ 25, 19 ] }\nconst trainTestSplit = ms.cross_validation.train_test_split(testArray,{ test_size:0.2, random_state: 0, });\n\n// [ [ 50, 20, 34, 33, 10 ], [ 23, 90, 42, 19, 25 ] ] \nconst crossValidationArrayKFolds = ms.cross_validation.cross_validation_split(testArray, { folds: 2, random_state: 0, });\n```\n\n##### Python\n\n```python\n#splitting the dataset into trnaing set and test set\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n```\n\n##### R\n\n```R\n# Splitting the dataset into the training set and test set\nlibrary(caTools)\nset.seed(1)\nsplit = sample.split(dataset$Purchased, SplitRatio = 0.8)\ntraining_set = subset(dataset, split == TRUE)\ntest_set = subset(dataset, split == FALSE)\n```\n\n#### Scaling (z-score / min-mix)\n\n##### Javascript\n\n```javascript\ndataset.columnArray('Salary',{ scale:'standard'}); \ndataset.columnArray('Salary',{ scale:'minmax'}); \n```\n\n##### Python\n\n```python\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n```\n\n### Development\n\n*Make sure you have grunt installed*\n\n```sh\n$ npm i -g grunt-cli jsdoc-to-markdown\n```\n\nFor generating documentation\n```sh\n$ grunt doc\n$ jsdoc2md src/**/*.js  > docs/api.md\n```\n\n### Notes\n\nCheck out [https://repetere.github.io/modelscript](https://repetere.github.io/modelscript) for the full modelscript Documentation\n\n#### A quick word about asynchronous JavaScript\n\nMost machine learning tutorials in Python and R are not using their asynchronous equivalents; however, there is a bias in JavaScript to default to non-blocking operations.\n\nWith the advent of ES7 and Node.js 7+ there are syntax helpers with asynchronous functions. It may be easier to use async/await in JS if you want an approximation close to what a workflow would look like in R/Python\n\n```javascript\nimport * as fs from 'fs-extra';\nimport * as np from 'numjs'; \nimport { default as ml } from 'ml';\nimport { default as pd } from 'pandas-js';\nimport { default as mpn } from 'matplotnode';\nimport { loadCSV, preprocessing } from 'modelscript';\nconst plt = mpn.plot;\n\nvoid async () => {\n  const csvData = await loadCSV('../Data.csv');\n  const rawData = new preprocessing.DataSet(csvData);\n  const fittedData = rawData.fitColumns({\n    columns: [\n      { name: 'Age' },\n      { name: 'Salary' },\n      {\n        name: 'Purchased',\n        options: {\n          strategy: 'label',\n          labelOptions: {\n            binary: true,\n          },\n        }\n      },\n    ]\n  });\n  const dataset = new pd.DataFrame(fittedData);\n  const X = dataset.iloc(\n    [ 0, dataset.length ],\n    [ 0, 3 ]).values;\n  const y = dataset.iloc(\n    [ 0, dataset.length ],\n    3).values;\n  console.log({\n    X,\n    y\n  });\n}();\n\n```\n\n### Testing\n\n```sh\n$ npm i\n$ grunt test\n```\n\n### Contributing\n\nFork, write tests and create a pull request!\n\n### Misc\n\nAs of Node 8, ES modules are still used behind a flag, when running natively as an ES module\n\n```sh\n$ node --experimental-modules my-machine-learning-script.mjs\n# Also there are native bindings that require Python 2.x, make sure if you're using Anaconda, you build with your Python 2.x bin\n$ npm i --python=/usr/bin/python\n ```\n\nLicense\n----\n\nMIT",
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 172,
    "kind": "testFile",
    "name": "test/unit/calc_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nconst expect = chai.expect;\r\nconst rawTransactions = [\r\n  ['Cookies', 'Milk', 'Plates', ],\r\n  ['Cups', 'Milk', 'Silverware', ],\r\n  ['Cookies', 'Cups', 'Milk', 'Silverware', ],\r\n  ['Cups', 'Silverware', ],\r\n  ['Cookies', 'Cups', 'Milk', 'Silverware', ],\r\n];\r\n\r\n// if (!Object.values) {\r\n//   ObjectValues.shim();\r\n// }\r\ndescribe('calc', function () { \r\n  describe('getTransactions', () => {\r\n    const gt = ms.calc.getTransactions(rawTransactions);\r\n    // console.log(gt);\r\n    it('should return values', () => {\r\n      expect(gt).to.haveOwnProperty('values');\r\n      expect(gt.values).to.be.a('set');\r\n    });\r\n    it('should contain all unique values of all transactions', () => {\r\n      expect(Array.from(gt.values.values())).to.include.all.members([\r\n        'Cookies', 'Milk', 'Plates', 'Cups', 'Silverware',\r\n      ]);\r\n    });\r\n    it('should have a map of all unique values and indexes', () => {\r\n      expect(gt.valuesMap).to.be.a('map');\r\n      gt.values.forEach((val, i) => {\r\n        expect(gt.valuesMap.has(val.toString())).to.be.true;\r\n        expect(gt.valuesMap.get(val.toString())).to.eql(gt.valuesMap.get(i.toString()));\r\n        expect(gt.valuesMap.has(i.toString())).to.be.true;\r\n        expect(gt.valuesMap.get(i.toString())).to.eql(gt.valuesMap.get(val.toString()));\r\n      });\r\n    });\r\n    it('should map values onto transactions', () => {\r\n      expect(gt.transactions.length).to.eql(rawTransactions.length);\r\n      rawTransactions.forEach((rt, i) => {\r\n        expect(rt.length).to.eql(gt.transactions[ i ].length);\r\n      });\r\n    });\r\n  });\r\n  describe('assocationRuleLearning', () => {\r\n    const gt = ms.calc.getTransactions(rawTransactions);\r\n    it('should use Eclat to associate transactions', (done) => {\r\n      // if (process.platform === 'darwin') {\r\n      ms.calc.assocationRuleLearning(gt.transactions, {\r\n        valuesMap: gt.valuesMap,\r\n      })\r\n        .then(arl => {\r\n          // console.log('arl',arl);\r\n          expect(arl).to.be.an('array');\r\n          done();\r\n        })\r\n        .catch(done);\r\n      expect(ms.calc.assocationRuleLearning).to.be.an('function');\r\n      // }\r\n    });\r\n    it('should use accept options for eclat summary', (done) => {\r\n      // if (process.platform === 'darwin') {\r\n      ms.calc.assocationRuleLearning(gt.transactions, {\r\n        valuesMap: gt.valuesMap,\r\n        summary: false,\r\n      })\r\n        .then(arl => {\r\n          // console.log({ arl });\r\n          expect(arl).to.be.an('array');\r\n          done();\r\n        })\r\n        .catch(done);\r\n      // }\r\n    });\r\n    it('should work with raw transactions', (done) => {\r\n      // if (process.platform === 'darwin') {\r\n      ms.calc.assocationRuleLearning(rawTransactions, {\r\n        summary: false,\r\n      })\r\n        .then(arl => {\r\n          expect(arl).to.be.an('array');\r\n          done();\r\n        })\r\n        .catch(done);\r\n      // }\r\n    });\r\n    it('should handle errors', (done) => {\r\n      ms.calc.assocationRuleLearning(NaN, {\r\n        summary: NaN,\r\n        support: NaN,\r\n        minLength: NaN,\r\n        valuesMap: NaN,\r\n      })\r\n        .then((r) => {\r\n          console.log('r', r)\r\n          done(new Error('should not get to then'))\r\n        })\r\n        .catch(e => {\r\n          expect(e).to.be.a('error');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/calc_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/unit/calc_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0",
    "access": null,
    "description": "calc",
    "lineNumber": 15
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "describe1",
    "testId": 1,
    "memberof": "test/unit/calc_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe1",
    "access": null,
    "description": "getTransactions",
    "lineNumber": 16
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe1.it2",
    "access": null,
    "description": "should return values",
    "lineNumber": 19
  },
  {
    "__docId__": 176,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe1.it3",
    "access": null,
    "description": "should contain all unique values of all transactions",
    "lineNumber": 23
  },
  {
    "__docId__": 177,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe1.it4",
    "access": null,
    "description": "should have a map of all unique values and indexes",
    "lineNumber": 28
  },
  {
    "__docId__": 178,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe1",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe1.it5",
    "access": null,
    "description": "should map values onto transactions",
    "lineNumber": 37
  },
  {
    "__docId__": 179,
    "kind": "test",
    "name": "describe6",
    "testId": 6,
    "memberof": "test/unit/calc_spec.mjs~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe6",
    "access": null,
    "description": "assocationRuleLearning",
    "lineNumber": 44
  },
  {
    "__docId__": 180,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe6.it7",
    "access": null,
    "description": "should use Eclat to associate transactions",
    "lineNumber": 46
  },
  {
    "__docId__": 181,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe6.it8",
    "access": null,
    "description": "should use accept options for eclat summary",
    "lineNumber": 60
  },
  {
    "__docId__": 182,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe6.it9",
    "access": null,
    "description": "should work with raw transactions",
    "lineNumber": 74
  },
  {
    "__docId__": 183,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/unit/calc_spec.mjs~describe0.describe6",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/calc_spec.mjs~describe0.describe6.it10",
    "access": null,
    "description": "should handle errors",
    "lineNumber": 86
  },
  {
    "__docId__": 184,
    "kind": "testFile",
    "name": "test/unit/columnvectorizer_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nconst expect = chai.expect;\r\nconst csvData = [\r\n  {\r\n    'Review': 'This is really good',\r\n    'Liked': 1,\r\n  },\r\n  {\r\n    'Review': 'I would definitely recommend',\r\n    'Liked': 1,\r\n  },\r\n  {\r\n    'Review': 'The wait staff was really rude',\r\n    'Liked': 0,\r\n  },\r\n  {\r\n    'Review': 'Great views',\r\n    'Liked': 1,\r\n  },\r\n  {\r\n    'Review': 'the food was not great',\r\n    'Liked': 0,\r\n  },\r\n  {\r\n    'Review': 'food came out cold, took forever to get seated',\r\n    'Liked': 0,\r\n  },\r\n  {\r\n    'Review': 'we had a great time, and they were really prompt and attentive',\r\n    'Liked': 1,\r\n  },\r\n  {\r\n    'Review': 'the food was bland',\r\n    'Liked': 0,\r\n  },\r\n  {\r\n    'Review': 'not very flavorful',\r\n    'Liked': 0,\r\n  },\r\n  {\r\n    'Review': 'it was kind of so-so',\r\n    'Liked': 0,\r\n  },\r\n];\r\nconst eVString = 'I would rate everything Great, views Great, food Great';\r\n\r\ndescribe('nlp', function() {\r\n  describe('ColumnVectorizer class', () => {\r\n    const CSVDataSet = new ms.DataSet(csvData);\r\n    const nlpVectors = new ms.nlp.ColumnVectorizer({\r\n      data: CSVDataSet.columnArray('Review'),\r\n      maxFeatures: 9,\r\n    });\r\n    nlpVectors.fit_transform();\r\n    // console.log({ nlpVectors });\r\n    describe('constructor', () => {\r\n      it('should instantiate a new ColumnVectorizer Class', () => {\r\n        expect(ms.nlp).to.be.an('object');\r\n        expect(ms.nlp.ColumnVectorizer).to.be.a('function');\r\n        expect(nlpVectors).to.be.instanceof(ms.nlp.ColumnVectorizer);\r\n        expect(nlpVectors.maxFeatures).to.eql(9);\r\n        // console.log({ nlpVectors });\r\n      });\r\n    });\r\n    describe('get_tokens', () => {\r\n      it('should return an array of all tokens', () => {\r\n        const toks = nlpVectors.get_tokens();\r\n        expect(toks).to.be.an('array');\r\n        expect(toks).to.have.lengthOf(nlpVectors.tokens.size);\r\n      });\r\n    });\r\n    describe('get_vector_array', () => {\r\n      it('should return an array of tokens as vectors', () => {\r\n        const toks = nlpVectors.get_vector_array();\r\n        expect(toks).to.be.an('array');\r\n        expect(toks[0]).to.be.an('array');\r\n        expect(toks).to.have.lengthOf(nlpVectors.tokens.size);\r\n      });\r\n    });\r\n    describe('get_limited_features', () => {\r\n      it('should return a count of maxFeatures in array of tokens as vectors', () => {\r\n        const feats = nlpVectors.get_limited_features();\r\n        expect(feats).to.be.an('array');\r\n        expect(feats[0]).to.be.an('array');\r\n        expect(feats).to.have.lengthOf(nlpVectors.maxFeatures);\r\n      });\r\n      it('should limit features in array of tokens as vectors', () => {\r\n        const feats = nlpVectors.get_limited_features({ maxFeatures: 5, });\r\n        expect(feats).to.be.an('array');\r\n        expect(feats[0]).to.be.an('array');\r\n        expect(feats).to.have.lengthOf(5);\r\n      });\r\n    });\r\n    describe('evaluateString', () => {\r\n      it('should return object of tokens and counts', () => {\r\n        const estring = nlpVectors.evaluateString(eVString);\r\n        expect(estring.great).to.eql(3);\r\n        expect(estring.view).to.eql(1);\r\n        expect(estring.food).to.eql(1);\r\n      });\r\n    });\r\n    describe('evaluate', () => {\r\n      it('should return matrix vector for new predictions', () => {\r\n        const estring = nlpVectors.evaluate(eVString);\r\n        // console.log({estring})\r\n        expect(estring).to.be.an('array');\r\n        expect(estring[ 0 ]).to.have.lengthOf(9);\r\n        expect(estring[ 0 ].filter(val => val === 3).length).to.eql(1);\r\n      });\r\n    });\r\n    describe('fit_transform', () => {\r\n      it('should create a set of unique tokens this.tokens', () => {\r\n        const tokens = csvData.reduce((result, value) => {\r\n          const val = value.Review.toLowerCase();\r\n          const stringVal = ms.nlp.PorterStemmer.tokenizeAndStem(val).join(' ');\r\n          result += stringVal+' ';\r\n          return result;\r\n        }, '');\r\n        const tokenSet = new Set(tokens.split(' ').filter(val => val));\r\n        expect(nlpVectors.tokens.size).to.eql(tokenSet.size);\r\n        tokenSet.forEach((val) => {\r\n          expect(nlpVectors.tokens.has(val)).to.be.true;\r\n        });\r\n      });\r\n      it('should create a dictionary of total word counts in this.wordCountMap', () => {\r\n        const wordCountMap = csvData.reduce((result, value) => {\r\n          const val = value.Review.toLowerCase();\r\n          const stringVals = ms.nlp.PorterStemmer.tokenizeAndStem(val);\r\n          stringVals.forEach(token => {\r\n            result[ token ] = (result[ token ])\r\n              ? result[ token ] + 1\r\n              : 1;\r\n          });\r\n          return result;\r\n        }, {});\r\n        Object.keys(wordCountMap).forEach(word => {\r\n          expect(wordCountMap[ word ]).to.eql(nlpVectors.wordCountMap[ word ]);\r\n        });\r\n      });\r\n      it('should create a dictionary of all words this.wordMap', () => {\r\n        Array.from(nlpVectors.tokens).forEach(token => {\r\n          expect(nlpVectors.wordMap[ token ]).to.eql(0);\r\n        });\r\n      });\r\n      it('should create an array of all sorted words in this.sortedWordCount by word count', () => {\r\n        nlpVectors.sortedWordCount.forEach((wordObj, i) => { \r\n          if (i < nlpVectors.sortedWordCount.length-1) {\r\n            const currentSWC = nlpVectors.sortedWordCount[ i ];\r\n            const nextSWC = nlpVectors.sortedWordCount[ i + 1 ];\r\n            expect(nlpVectors.wordCountMap[ currentSWC ]).to.be.gte(nlpVectors.wordCountMap[ nextSWC ]);\r\n          }\r\n        });\r\n      });\r\n      it('should create a sparse matrix dictionary words from corpus in this.data as this.vectors', () => {\r\n        const firstSentence = csvData[ 0 ].Review;\r\n        const firstSentenceWordMap = nlpVectors.evaluateString(firstSentence);\r\n        expect(firstSentenceWordMap).to.eql(nlpVectors.vectors[ 0 ]);\r\n      });\r\n      it('should create a sparse matrix of words from corpus in this.data', () => {\r\n        const firstSentence = csvData[ 0 ].Review;\r\n        const firstSentenceWordMap = nlpVectors.evaluate(firstSentence);\r\n        expect(firstSentenceWordMap[0]).to.eql(nlpVectors.matrix[ 0 ]);\r\n      });\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/columnvectorizer_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/unit/columnvectorizer_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11",
    "access": null,
    "description": "nlp",
    "lineNumber": 48
  },
  {
    "__docId__": 186,
    "kind": "test",
    "name": "describe12",
    "testId": 12,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "access": null,
    "description": "ColumnVectorizer class",
    "lineNumber": 49
  },
  {
    "__docId__": 187,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe13",
    "access": null,
    "description": "constructor",
    "lineNumber": 57
  },
  {
    "__docId__": 188,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe13.it14",
    "access": null,
    "description": "should instantiate a new ColumnVectorizer Class",
    "lineNumber": 58
  },
  {
    "__docId__": 189,
    "kind": "test",
    "name": "describe15",
    "testId": 15,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe15",
    "access": null,
    "description": "get_tokens",
    "lineNumber": 66
  },
  {
    "__docId__": 190,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe15",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe15.it16",
    "access": null,
    "description": "should return an array of all tokens",
    "lineNumber": 67
  },
  {
    "__docId__": 191,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe17",
    "access": null,
    "description": "get_vector_array",
    "lineNumber": 73
  },
  {
    "__docId__": 192,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe17",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe17.it18",
    "access": null,
    "description": "should return an array of tokens as vectors",
    "lineNumber": 74
  },
  {
    "__docId__": 193,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe19",
    "access": null,
    "description": "get_limited_features",
    "lineNumber": 81
  },
  {
    "__docId__": 194,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe19",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe19.it20",
    "access": null,
    "description": "should return a count of maxFeatures in array of tokens as vectors",
    "lineNumber": 82
  },
  {
    "__docId__": 195,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe19",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe19.it21",
    "access": null,
    "description": "should limit features in array of tokens as vectors",
    "lineNumber": 88
  },
  {
    "__docId__": 196,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe22",
    "access": null,
    "description": "evaluateString",
    "lineNumber": 95
  },
  {
    "__docId__": 197,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe22",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe22.it23",
    "access": null,
    "description": "should return object of tokens and counts",
    "lineNumber": 96
  },
  {
    "__docId__": 198,
    "kind": "test",
    "name": "describe24",
    "testId": 24,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe24",
    "access": null,
    "description": "evaluate",
    "lineNumber": 103
  },
  {
    "__docId__": 199,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe24",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe24.it25",
    "access": null,
    "description": "should return matrix vector for new predictions",
    "lineNumber": 104
  },
  {
    "__docId__": 200,
    "kind": "test",
    "name": "describe26",
    "testId": 26,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "access": null,
    "description": "fit_transform",
    "lineNumber": 112
  },
  {
    "__docId__": 201,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it27",
    "access": null,
    "description": "should create a set of unique tokens this.tokens",
    "lineNumber": 113
  },
  {
    "__docId__": 202,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it28",
    "access": null,
    "description": "should create a dictionary of total word counts in this.wordCountMap",
    "lineNumber": 126
  },
  {
    "__docId__": 203,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it29",
    "access": null,
    "description": "should create a dictionary of all words this.wordMap",
    "lineNumber": 141
  },
  {
    "__docId__": 204,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it30",
    "access": null,
    "description": "should create an array of all sorted words in this.sortedWordCount by word count",
    "lineNumber": 146
  },
  {
    "__docId__": 205,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it31",
    "access": null,
    "description": "should create a sparse matrix dictionary words from corpus in this.data as this.vectors",
    "lineNumber": 155
  },
  {
    "__docId__": 206,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/columnvectorizer_spec.mjs~describe11.describe12.describe26.it32",
    "access": null,
    "description": "should create a sparse matrix of words from corpus in this.data",
    "lineNumber": 160
  },
  {
    "__docId__": 207,
    "kind": "testFile",
    "name": "test/unit/cross_validation_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nimport path from 'path';\r\nimport expose from './expose.js';\r\nconst { __dirname, } = expose;\r\nconst expect = chai.expect;\r\nconst testArray = [20, 25, 10, 33, 50, 42, 19, 34, 90, 23, ];\r\nconst ml = ms.ml;\r\nconst DTClassifier = ml.SL.DecisionTreeClassifier;\r\nconst RFRegression = ml.Regression.RandomForestRegression;\r\nconst dependentFeatures = [['Age', ], ['EstimatedSalary', ], ];\r\nconst independentFeatures = [['Purchased', ], ];\r\nconst regressionDependentFeatures = [['R&D Spend', ], ['Administration', ], ['Marketing Spend', ], ];\r\nconst regressionIndependentFeatures = [['Profit', ], ];\r\nlet SNA_csv;\r\nlet Start50_csv;\r\nlet Start50DataSet;\r\n\r\ndescribe('cross_validation', function () { \r\n  this.timeout(10000);\r\n  before((done) => {\r\n    Promise.all([\r\n      ms.loadCSV(path.join(__dirname, '../mock/Social_Network_Ads.csv'), {\r\n        colParser: {\r\n          Age: 'number',\r\n          EstimatedSalary: 'number',\r\n          Purchased: 'number',\r\n        },\r\n      }),\r\n      ms.loadCSV(path.join(__dirname, '../mock/50_Startups.csv'), {\r\n        colParser: {\r\n          'Administration': 'number',\r\n          'R&D Spend': 'number',\r\n          'Marketing Spend': 'number',\r\n          'Profit': 'number',\r\n        },\r\n      }),\r\n    ])\r\n      .then(csvs => {\r\n        const [\r\n          SNA_csv_list,\r\n          S50_csv_list,\r\n        ] = csvs;\r\n        SNA_csv = SNA_csv_list;\r\n        Start50_csv = S50_csv_list;\r\n        Start50DataSet = new ms.DataSet(Start50_csv)\r\n          .fitColumns({\r\n            columns: [\r\n              {\r\n                name: 'State',\r\n                options: {\r\n                  strategy: 'onehot',\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        done();\r\n      })\r\n      .catch(done);\r\n  });\r\n  describe('train_test_split', () => {\r\n    const defaultTrainTestSplit = ms.cross_validation.train_test_split(testArray);\r\n    it('should split dataset with default values', () => {\r\n      expect(ms.cross_validation).to.be.an('object');\r\n      expect(defaultTrainTestSplit.train.length).to.equal(8);\r\n      expect(defaultTrainTestSplit.test.length).to.equal(2);\r\n    });\r\n    it('should split the data into two arrays', () => {\r\n      const defaultTrainTestSplitArray = ms.cross_validation.train_test_split(testArray, { return_array: true, });\r\n      const [train, test,] = defaultTrainTestSplitArray;\r\n      expect(train.length).to.equal(8);\r\n      expect(test.length).to.equal(2);\r\n    });\r\n    it('should split with defined test size', () => {\r\n      const defaultTrainTestSplitSize = ms.cross_validation.train_test_split(testArray, { test_size: 0.4, });\r\n      const { train, test, } = defaultTrainTestSplitSize;\r\n      expect(train.length).to.equal(6);\r\n      expect(test.length).to.equal(4);\r\n    });\r\n    it('should split with defined train size', () => {\r\n      const defaultTrainTestSplitSize = ms.cross_validation.train_test_split(testArray, { train_size: 0.5, });\r\n      const { train, test, } = defaultTrainTestSplitSize;\r\n      expect(train.length).to.equal(5);\r\n      expect(test.length).to.equal(5);\r\n    });\r\n    it('should use a randomized seed', () => {\r\n      const defaultTrainTestSplitSeed0 = ms.cross_validation.train_test_split(testArray, { random_state: 0, return_array: true, });\r\n      const defaultTrainTestSplitSeed0a = ms.cross_validation.train_test_split(testArray, { random_state: 0, return_array: true, });\r\n      const defaultTrainTestSplitSeed1 = ms.cross_validation.train_test_split(testArray, { random_state: 1, return_array: true, });\r\n      const [train0,] = defaultTrainTestSplitSeed0;\r\n      const [train0a,] = defaultTrainTestSplitSeed0a;\r\n      const [train1,] = defaultTrainTestSplitSeed1;\r\n      expect(train0.toString()).to.equal(train0a.toString());\r\n      expect(train0.toString()).to.not.equal(train1.toString());\r\n    });\r\n  });\r\n  describe('cross_validation_split', () => {\r\n    const defaultCrossValidation = ms.cross_validation.cross_validation_split(testArray);\r\n    it('should split dataset with default values', () => {\r\n      expect(defaultCrossValidation.length).to.equal(3);\r\n    });\r\n    it('should split the data into k-folds', () => {\r\n      const defaultCrossValidationArray = ms.cross_validation.cross_validation_split(testArray, {\r\n        folds: 2,\r\n      });\r\n      expect(defaultCrossValidationArray[0].length).to.equal(5);\r\n      expect(defaultCrossValidationArray.length).to.equal(2);\r\n    });\r\n    it('should use a randomized seed', () => {\r\n      const defaultCrossValidationSeed0 = ms.cross_validation.cross_validation_split(testArray, { random_state: 0, });\r\n      const defaultCrossValidationSeed0a = ms.cross_validation.cross_validation_split(testArray, { random_state: 0, });\r\n      const defaultCrossValidationSeed1 = ms.cross_validation.cross_validation_split(testArray, { random_state: 1, });\r\n      \r\n      expect(JSON.stringify(defaultCrossValidationSeed0)).to.equal(JSON.stringify(defaultCrossValidationSeed0a));\r\n      expect(JSON.stringify(defaultCrossValidationSeed0)).to.not.equal(JSON.stringify(defaultCrossValidationSeed1));\r\n    });\r\n  });\r\n  describe('cross_validate_score', () => {\r\n    it('should validate classification', () => {\r\n      // console.log({ SNA_csv });\r\n      const { train, test, } = ms.cross_validation.train_test_split(SNA_csv, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      });\r\n      const classifier = new DTClassifier({\r\n        gainFunction: 'gini',\r\n        minNumSamples: 4,\r\n      });\r\n      const accuracy = ms.cross_validation.cross_validate_score({\r\n        dataset: train,\r\n        testingset: test,\r\n        classifier,\r\n        dependentFeatures,\r\n        independentFeatures,\r\n      });\r\n      expect(accuracy).to.have.lengthOf(10);\r\n      expect(ms.util.mean(accuracy)).to.be.greaterThan(0.75);\r\n      expect(ms.util.sd(accuracy)).to.be.lessThan(0.08);\r\n      // console.log('accuracy', accuracy);\r\n      // console.log('acc avg', ms.util.mean(accuracy));\r\n      // console.log('acc sd', ms.util.sd(accuracy));   \r\n    });\r\n    it('should validate classification constructor', () => {\r\n      // console.log({ SNA_csv });\r\n      const { train, test, } = ms.cross_validation.train_test_split(SNA_csv, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      });\r\n      const classifier = ml.KNN;\r\n      const accuracy = ms.cross_validation.cross_validate_score({\r\n        dataset: train,\r\n        testingset: test,\r\n        classifier,\r\n        modelOptions: { k: 5, },\r\n        use_estimates_y_vector: true,\r\n        dependentFeatures,\r\n        independentFeatures,\r\n      });\r\n      expect(accuracy).to.have.lengthOf(10);\r\n      expect(ms.util.mean(accuracy)).to.be.greaterThan(0.65);\r\n      expect(ms.util.sd(accuracy)).to.be.lessThan(0.08);\r\n      // console.log('accuracy', accuracy);\r\n      // console.log('acc avg', ms.util.mean(accuracy));\r\n      // console.log('acc sd', ms.util.sd(accuracy));   \r\n    });\r\n    it('should validate regression with train method', () => {\r\n      const { train, test, } = ms.cross_validation.train_test_split(Start50DataSet, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      });\r\n      const regression = new RFRegression({\r\n        seed: 3,\r\n        maxFeatures: 2,\r\n        replacement: false,\r\n        nEstimators: 300,\r\n      });\r\n      const accuracy = ms.cross_validation.cross_validate_score({\r\n        dataset: train,\r\n        testingset: test,\r\n        folds: 2,\r\n        // accuracy:'rSquared',\r\n        use_train_y_vector:true,\r\n        regression,\r\n        dependentFeatures: regressionDependentFeatures,\r\n        independentFeatures: regressionIndependentFeatures,\r\n      });\r\n      // console.log('accuracy', accuracy);\r\n      // console.log('acc avg', ms.util.mean(accuracy));\r\n      expect(accuracy).to.have.lengthOf(2);\r\n      expect(ms.util.mean(accuracy)).to.be.lessThan(40000);\r\n      // expect(ms.util.sd(accuracy)).to.be.lessThan(0.08);\r\n      // console.log('acc sd', ms.util.sd(accuracy));   \r\n    });\r\n    it('should validate regression with constructor methods', () => {\r\n      const { train, test, } = ms.cross_validation.train_test_split(Start50DataSet, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      });\r\n      const regression = ml.MultivariateLinearRegression;\r\n      const accuracy = ms.cross_validation.cross_validate_score({\r\n        dataset: train,\r\n        testingset: test,\r\n        folds: 2,\r\n        // accuracy:'rSquared',\r\n        use_train_y_vector:false,\r\n        regression,\r\n        dependentFeatures: regressionDependentFeatures,\r\n        independentFeatures: regressionIndependentFeatures,\r\n      });\r\n      // console.log('accuracy', accuracy);\r\n      // console.log('acc avg', ms.util.mean(accuracy));\r\n      expect(accuracy).to.have.lengthOf(2);\r\n      expect(ms.util.mean(accuracy)).to.be.lessThan(9000);\r\n      // expect(ms.util.sd(accuracy)).to.be.lessThan(0.08);\r\n      // console.log('acc sd', ms.util.sd(accuracy));   \r\n    });\r\n  });\r\n  describe('grid_search', () => {\r\n    it('should return sorted best regression parameters', (done) => {\r\n      const { train, test, } = ms.cross_validation.train_test_split(Start50DataSet, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      }); \r\n      const optimizedParameters = ms.cross_validation.grid_search({\r\n        regression: ml.Regression.RandomForestRegression,\r\n        parameters: {\r\n          seed: [2, ],\r\n          maxFeatures: [2, 3, ],\r\n          replacement: [false, true, ],\r\n          nEstimators: [300, 500, ],\r\n        },\r\n        dataset: train,\r\n        testingset: test,\r\n        folds: 2,\r\n        // accuracy:'rSquared',\r\n        use_train_y_vector:true,\r\n        dependentFeatures: regressionDependentFeatures,\r\n        independentFeatures: regressionIndependentFeatures,\r\n      });\r\n      // console.log(JSON.stringify(optimizedParameters, null, 2));\r\n      expect(optimizedParameters).to.haveOwnProperty('params');\r\n      expect(optimizedParameters).to.haveOwnProperty('results');\r\n      done();\r\n    });\r\n    it('should return sorted best classification parameters', () => {\r\n      const { train, test, } = ms.cross_validation.train_test_split(SNA_csv, {\r\n        test_size: 0.25,\r\n        random_state: 0,\r\n        parse_int_train_size: true,\r\n      });\r\n      const optimizedParameters = ms.cross_validation.grid_search({\r\n        dataset: train,\r\n        testingset: test,\r\n        classifier: ml.SL.RandomForestClassifier,\r\n        return_parameters:true,\r\n        parameters: {\r\n          maxFeatures: [1.0, 0.5,],\r\n          // replacement: [true, false, ],\r\n          // useSampleBagging: [true, false, ],\r\n          nEstimators: [10, 20,],\r\n          treeOptions: [\r\n            { minNumSamples: 3, },\r\n            { minNumSamples: 2, },\r\n          ],\r\n        },\r\n        dependentFeatures,\r\n        independentFeatures,\r\n      });\r\n      // console.log(JSON.stringify(optimizedParameters, null, 2));\r\n      expect(optimizedParameters).to.be.an('array');\r\n      expect(optimizedParameters).to.have.lengthOf(8);\r\n    });\r\n    it('should sort parameter performance logically for regression', () => {\r\n      //TODO\r\n    });\r\n    it('should sort parameter performance logically for classification', () => {\r\n      //TODO\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/cross_validation_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "test",
    "name": "describe33",
    "testId": 33,
    "memberof": "test/unit/cross_validation_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33",
    "access": null,
    "description": "cross_validation",
    "lineNumber": 19
  },
  {
    "__docId__": 209,
    "kind": "test",
    "name": "describe34",
    "testId": 34,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "access": null,
    "description": "train_test_split",
    "lineNumber": 61
  },
  {
    "__docId__": 210,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34.it35",
    "access": null,
    "description": "should split dataset with default values",
    "lineNumber": 63
  },
  {
    "__docId__": 211,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34.it36",
    "access": null,
    "description": "should split the data into two arrays",
    "lineNumber": 68
  },
  {
    "__docId__": 212,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34.it37",
    "access": null,
    "description": "should split with defined test size",
    "lineNumber": 74
  },
  {
    "__docId__": 213,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34.it38",
    "access": null,
    "description": "should split with defined train size",
    "lineNumber": 80
  },
  {
    "__docId__": 214,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe34",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe34.it39",
    "access": null,
    "description": "should use a randomized seed",
    "lineNumber": 86
  },
  {
    "__docId__": 215,
    "kind": "test",
    "name": "describe40",
    "testId": 40,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe40",
    "access": null,
    "description": "cross_validation_split",
    "lineNumber": 97
  },
  {
    "__docId__": 216,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe40.it41",
    "access": null,
    "description": "should split dataset with default values",
    "lineNumber": 99
  },
  {
    "__docId__": 217,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe40.it42",
    "access": null,
    "description": "should split the data into k-folds",
    "lineNumber": 102
  },
  {
    "__docId__": 218,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe40",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe40.it43",
    "access": null,
    "description": "should use a randomized seed",
    "lineNumber": 109
  },
  {
    "__docId__": 219,
    "kind": "test",
    "name": "describe44",
    "testId": 44,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe44",
    "access": null,
    "description": "cross_validate_score",
    "lineNumber": 118
  },
  {
    "__docId__": 220,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe44.it45",
    "access": null,
    "description": "should validate classification",
    "lineNumber": 119
  },
  {
    "__docId__": 221,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe44.it46",
    "access": null,
    "description": "should validate classification constructor",
    "lineNumber": 144
  },
  {
    "__docId__": 222,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe44.it47",
    "access": null,
    "description": "should validate regression with train method",
    "lineNumber": 168
  },
  {
    "__docId__": 223,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe44",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe44.it48",
    "access": null,
    "description": "should validate regression with constructor methods",
    "lineNumber": 197
  },
  {
    "__docId__": 224,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe49",
    "access": null,
    "description": "grid_search",
    "lineNumber": 222
  },
  {
    "__docId__": 225,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe49.it50",
    "access": null,
    "description": "should return sorted best regression parameters",
    "lineNumber": 223
  },
  {
    "__docId__": 226,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe49.it51",
    "access": null,
    "description": "should return sorted best classification parameters",
    "lineNumber": 250
  },
  {
    "__docId__": 227,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe49.it52",
    "access": null,
    "description": "should sort parameter performance logically for regression",
    "lineNumber": 278
  },
  {
    "__docId__": 228,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/unit/cross_validation_spec.mjs~describe33.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/cross_validation_spec.mjs~describe33.describe49.it53",
    "access": null,
    "description": "should sort parameter performance logically for classification",
    "lineNumber": 281
  },
  {
    "__docId__": 229,
    "kind": "testFile",
    "name": "test/unit/load_csv_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nimport path from 'path';\r\nimport expose from './expose.js';\r\nconst { __dirname, } = expose;\r\nconst expect = chai.expect;\r\n\r\ndescribe('loadCSV', function () { \r\n  this.timeout(5000);\r\n  describe('loading CSV from File', () => {\r\n    it('should load a csv from a filepath', (done) => {\r\n      expect(ms.loadCSV).to.be.an('function');\r\n      ms.loadCSV(path.join(__dirname, '../mock/data.csv'))\r\n        .then(csv => {\r\n          expect(csv.length).to.be.greaterThan(0);\r\n          done();\r\n        })\r\n        .catch(done);    \r\n    });\r\n    it('should handle errors with invalid files', (done) => {\r\n      ms.loadCSV(path.join(__dirname, '../mock/invalid-file.csv'))\r\n        .then(() => {\r\n          done(new Error('should not load CSV'));\r\n        })\r\n        .catch(err => {\r\n          expect(err).to.be.an('error');\r\n          done();\r\n        });\r\n    });\r\n  });\r\n  describe('loading CSV from remote URI', () => {\r\n    it('should load a csv from a remote URI', (done) => {\r\n      // ms.loadCSV('https://www.arttimesjournal.com/data/events-August-2015.csv')\r\n      ms.loadCSV('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv')\r\n        .then(csv => {\r\n          expect(csv.length).to.be.greaterThan(0);\r\n          done();\r\n        })\r\n        .catch(done);      \r\n    });\r\n    it('should handle errors with invalid url', (done) => {\r\n      ms.loadCSV('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/INVALID.csv')\r\n        .then(csv => {\r\n          expect(csv.length).to.be.equal(0);\r\n          done();\r\n        })\r\n        .catch(done); \r\n    });\r\n    it('should load a csv from a remote URI directly', (done) => {\r\n      expect(ms.loadCSVURI).to.be.an('function');\r\n      // ms.loadCSV('https://www.arttimesjournal.com/data/events-August-2015.csv')\r\n      ms.loadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/data.csv')\r\n        .then(csv => {\r\n          expect(csv.length).to.be.greaterThan(0);\r\n          done();\r\n        })\r\n        .catch(done);      \r\n    });\r\n    it('should handle errors with invalid url directly', (done) => {\r\n      ms.loadCSVURI('https://raw.githubusercontent.com/repetere/modelscript/master/test/mock/INVALID.csv')\r\n        .then(csv => {\r\n          expect(csv.length).to.be.equal(0);\r\n          done();\r\n        })\r\n        .catch(done); \r\n    });\r\n  });\r\n  describe('loadTSV', () => {\r\n    it('should load tab separated values', (done) => {\r\n      expect(ms.csv.loadTSV).to.be.an('function');\r\n      ms.csv.loadTSV(path.join(__dirname, '../mock/Restaurant_Reviews.tsv'))\r\n        .then(tsv => {\r\n          const firstRow = tsv[ 0 ];\r\n          expect(tsv.length).to.be.greaterThan(0);\r\n          expect(firstRow.Review).to.be.a('string');\r\n          expect(firstRow.Liked).to.be.a('number');\r\n          done();\r\n        })\r\n        .catch(done);  \r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/load_csv_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "test",
    "name": "describe54",
    "testId": 54,
    "memberof": "test/unit/load_csv_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54",
    "access": null,
    "description": "loadCSV",
    "lineNumber": 8
  },
  {
    "__docId__": 231,
    "kind": "test",
    "name": "describe55",
    "testId": 55,
    "memberof": "test/unit/load_csv_spec.mjs~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe55",
    "access": null,
    "description": "loading CSV from File",
    "lineNumber": 10
  },
  {
    "__docId__": 232,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe55.it56",
    "access": null,
    "description": "should load a csv from a filepath",
    "lineNumber": 11
  },
  {
    "__docId__": 233,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe55",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe55.it57",
    "access": null,
    "description": "should handle errors with invalid files",
    "lineNumber": 20
  },
  {
    "__docId__": 234,
    "kind": "test",
    "name": "describe58",
    "testId": 58,
    "memberof": "test/unit/load_csv_spec.mjs~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe58",
    "access": null,
    "description": "loading CSV from remote URI",
    "lineNumber": 31
  },
  {
    "__docId__": 235,
    "kind": "test",
    "name": "it59",
    "testId": 59,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe58.it59",
    "access": null,
    "description": "should load a csv from a remote URI",
    "lineNumber": 32
  },
  {
    "__docId__": 236,
    "kind": "test",
    "name": "it60",
    "testId": 60,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe58.it60",
    "access": null,
    "description": "should handle errors with invalid url",
    "lineNumber": 41
  },
  {
    "__docId__": 237,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe58.it61",
    "access": null,
    "description": "should load a csv from a remote URI directly",
    "lineNumber": 49
  },
  {
    "__docId__": 238,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe58",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe58.it62",
    "access": null,
    "description": "should handle errors with invalid url directly",
    "lineNumber": 59
  },
  {
    "__docId__": 239,
    "kind": "test",
    "name": "describe63",
    "testId": 63,
    "memberof": "test/unit/load_csv_spec.mjs~describe54",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe63",
    "access": null,
    "description": "loadTSV",
    "lineNumber": 68
  },
  {
    "__docId__": 240,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/unit/load_csv_spec.mjs~describe54.describe63",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/load_csv_spec.mjs~describe54.describe63.it64",
    "access": null,
    "description": "should load tab separated values",
    "lineNumber": 69
  },
  {
    "__docId__": 241,
    "kind": "testFile",
    "name": "test/unit/ml_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nimport path from 'path';\r\nimport expose from './expose.js';\r\nconst { __dirname, } = expose;\r\nconst expect = chai.expect;\r\nlet SNA_csv;\r\nconst {\r\n  ReinforcedLearningBase,\r\n  UpperConfidenceBound,\r\n  ThompsonSampling,\r\n} = ms.ml.RL;\r\n\r\ndescribe('ml', function () { \r\n  this.timeout(20000);\r\n  before((done) => {\r\n    Promise.all([\r\n      ms.loadCSV(path.join(__dirname, '../mock/Ads_CTR_Optimisation.csv'), {\r\n        colParser: 'Ad 1,Ad 2,Ad 3,Ad 4,Ad 5,Ad 6,Ad 7,Ad 8,Ad 9,Ad 10'\r\n          .split(',')\r\n          .reduce((result, value) => {\r\n            result[ value ] = 'number';\r\n            return result;  \r\n          }, {}),\r\n      }),\r\n    ])\r\n      .then(csvs => {\r\n        const [\r\n          SNA_csv_list,\r\n        ] = csvs;\r\n        SNA_csv = SNA_csv_list;\r\n        done();\r\n      })\r\n      .catch(done);\r\n  });\r\n  describe('ReinforcedLearningBase', () => {\r\n    it('should create an instance with default values', () => {\r\n      const baseRL = new ReinforcedLearningBase();\r\n      expect(baseRL.bounds).to.eql(5);\r\n      expect(baseRL.last_selected).to.be.an('array');\r\n      expect(baseRL.total_reward).to.eql(0);\r\n      expect(baseRL.iteration).to.eql(0);\r\n    });\r\n    it('should create configurable instance', () => {\r\n      const baseRL = new ReinforcedLearningBase({ bounds:10, });\r\n      expect(baseRL.bounds).to.eql(10);\r\n    });\r\n    it('should require implementations of learn, train and predict methods', () => {\r\n      const baseRL = new ReinforcedLearningBase();\r\n      try {\r\n        baseRL.learn();\r\n      } catch (e) {\r\n        expect(e.message).to.eql('Missing learn method implementation');\r\n      }\r\n      try {\r\n        baseRL.train();\r\n      } catch (e) {\r\n        expect(e.message).to.eql('Missing train method implementation');\r\n      }\r\n      try {\r\n        baseRL.predict();\r\n      } catch (e) {\r\n        expect(e.message).to.eql('Missing predict method implementation');\r\n      }\r\n    });\r\n  });\r\n  describe('UpperConfidenceBound', () => {\r\n    const UCB = new UpperConfidenceBound({\r\n      bounds: 10,\r\n    });\r\n    it('should create number of selections and sum of selections', () => {\r\n      expect(UCB.numbers_of_selections.size).to.equal(10);\r\n      expect(UCB.numbers_of_selections).to.be.a('map');\r\n      expect(UCB.sums_of_rewards.size).to.equal(10);\r\n      expect(UCB.sums_of_rewards).to.be.a('map');\r\n      for (let value of UCB.numbers_of_selections.values()) {\r\n        expect(value).to.eql(0);\r\n      }\r\n      for (let value of UCB.sums_of_rewards.values()) {\r\n        expect(value).to.eql(0);\r\n      }\r\n    });\r\n    it('should predict the next value using the upper confidence bound', () => {\r\n      const UCBPred = new UpperConfidenceBound({\r\n        bounds: 10,\r\n      });\r\n      UCBPred.train({\r\n        ucbRow: SNA_csv, //csvData[ x ],\r\n        getBound: ad => `Ad ${ad + 1}`,\r\n      });\r\n      const prediction = UCBPred.predict();\r\n      expect(prediction).to.eql(4);\r\n      expect(prediction).to.be.a('number');\r\n    });\r\n    it('should initially select each bandit', () => {\r\n      const UCBPredNew = new UpperConfidenceBound({\r\n        bounds: 10,\r\n      });\r\n      for (let i = 0; i < 10; i++){\r\n        expect(UCBPredNew.predict()).to.eql(i);\r\n        UCBPredNew.train({\r\n          ucbRow: SNA_csv.concat([]).slice(i, i+1), //csvData[ x ],\r\n          getBound: ad => `Ad ${ad + 1}`,\r\n        });\r\n        expect(UCBPredNew.iteration).to.eql(i + 1);\r\n      }\r\n    });\r\n    it('should train the next upper confidence bound', () => {\r\n      const UCBTrain = new UpperConfidenceBound({\r\n        bounds: 10,\r\n      });\r\n      const getBound= ad => `Ad ${ad + 1}`;\r\n      UCBTrain.train({\r\n        ucbRow: SNA_csv.slice(0, 9998), //csvData[ x ],\r\n        getBound,\r\n      });\r\n      expect(UCBTrain.iteration).to.eql(9998);\r\n      expect(UCBTrain.predict()).to.eql(4);\r\n      expect(UCBTrain.last_selected).to.be.lengthOf(9998);\r\n\r\n      const trainedUCB = UCBTrain.train({\r\n        ucbRow: SNA_csv[ 9998 ],\r\n        getBound,\r\n      });\r\n      expect(UCBTrain.iteration).to.eql(9999);\r\n      expect(trainedUCB).to.be.an.instanceOf(UpperConfidenceBound);\r\n\r\n      const learnedUCB = UCBTrain.learn({\r\n        ucbRow: SNA_csv[ 9999 ],\r\n        getBound,\r\n      });\r\n      expect(UCBTrain.iteration).to.eql(10000);\r\n      expect(learnedUCB).to.be.an.instanceOf(UpperConfidenceBound);\r\n    });\r\n  });\r\n  describe('ThompsonSampling', () => {\r\n    const TS = new ThompsonSampling({\r\n      bounds: 10,\r\n    });\r\n    it('should create the number of rewards', () => {\r\n      expect(TS.numbers_of_rewards_1.size).to.equal(10);\r\n      expect(TS.numbers_of_rewards_1).to.be.a('map');\r\n      expect(TS.numbers_of_rewards_0.size).to.equal(10);\r\n      expect(TS.numbers_of_rewards_0).to.be.a('map');\r\n      for (let value of TS.numbers_of_rewards_1.values()) {\r\n        expect(value).to.eql(0);\r\n      }\r\n      for (let value of TS.numbers_of_rewards_0.values()) {\r\n        expect(value).to.eql(0);\r\n      }\r\n    });\r\n    it('should predict the next value using thompson sampling', () => {\r\n      const TSPred = new ThompsonSampling({\r\n        bounds: 10,\r\n      });\r\n      TSPred.train({\r\n        tsRow: SNA_csv, //csvData[ x ],\r\n        getBound: ad => `Ad ${ad + 1}`,\r\n      });\r\n      const prediction = TSPred.predict();\r\n      expect(prediction).to.eql(4);\r\n      expect(prediction).to.be.a('number');\r\n    });\r\n    it('should evaluate the next thompson sampling sample', () => {\r\n      const getBound= ad => `Ad ${ad + 1}`;\r\n      const TSTrain = new ThompsonSampling({\r\n        bounds: 10,\r\n        getBound,\r\n      });\r\n      TSTrain.train({\r\n        tsRow: SNA_csv.slice(0, 9998), //csvData[ x ],\r\n      });\r\n      expect(TSTrain.iteration).to.eql(9998);\r\n      expect(TSTrain.predict()).to.eql(4);\r\n      expect(TSTrain.last_selected).to.be.lengthOf(9998);\r\n\r\n      const trainedTS = TSTrain.train({\r\n        tsRow: SNA_csv[ 9998 ],\r\n      });\r\n      expect(TSTrain.iteration).to.eql(9999);\r\n      expect(trainedTS).to.be.an.instanceOf(ThompsonSampling);\r\n\r\n      const learnedTS = TSTrain.learn({\r\n        tsRow: SNA_csv[ 9999 ],\r\n        getBound,\r\n      });\r\n      expect(TSTrain.iteration).to.eql(10000);\r\n      expect(learnedTS).to.be.an.instanceOf(ThompsonSampling);\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/ml_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "test",
    "name": "describe65",
    "testId": 65,
    "memberof": "test/unit/ml_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65",
    "access": null,
    "description": "ml",
    "lineNumber": 14
  },
  {
    "__docId__": 243,
    "kind": "test",
    "name": "describe66",
    "testId": 66,
    "memberof": "test/unit/ml_spec.mjs~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe66",
    "access": null,
    "description": "ReinforcedLearningBase",
    "lineNumber": 36
  },
  {
    "__docId__": 244,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe66.it67",
    "access": null,
    "description": "should create an instance with default values",
    "lineNumber": 37
  },
  {
    "__docId__": 245,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe66.it68",
    "access": null,
    "description": "should create configurable instance",
    "lineNumber": 44
  },
  {
    "__docId__": 246,
    "kind": "test",
    "name": "it69",
    "testId": 69,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe66",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe66.it69",
    "access": null,
    "description": "should require implementations of learn, train and predict methods",
    "lineNumber": 48
  },
  {
    "__docId__": 247,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/unit/ml_spec.mjs~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe70",
    "access": null,
    "description": "UpperConfidenceBound",
    "lineNumber": 67
  },
  {
    "__docId__": 248,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe70.it71",
    "access": null,
    "description": "should create number of selections and sum of selections",
    "lineNumber": 71
  },
  {
    "__docId__": 249,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe70.it72",
    "access": null,
    "description": "should predict the next value using the upper confidence bound",
    "lineNumber": 83
  },
  {
    "__docId__": 250,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe70.it73",
    "access": null,
    "description": "should initially select each bandit",
    "lineNumber": 95
  },
  {
    "__docId__": 251,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe70.it74",
    "access": null,
    "description": "should train the next upper confidence bound",
    "lineNumber": 108
  },
  {
    "__docId__": 252,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/unit/ml_spec.mjs~describe65",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe75",
    "access": null,
    "description": "ThompsonSampling",
    "lineNumber": 136
  },
  {
    "__docId__": 253,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe75.it76",
    "access": null,
    "description": "should create the number of rewards",
    "lineNumber": 140
  },
  {
    "__docId__": 254,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe75.it77",
    "access": null,
    "description": "should predict the next value using thompson sampling",
    "lineNumber": 152
  },
  {
    "__docId__": 255,
    "kind": "test",
    "name": "it78",
    "testId": 78,
    "memberof": "test/unit/ml_spec.mjs~describe65.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/ml_spec.mjs~describe65.describe75.it78",
    "access": null,
    "description": "should evaluate the next thompson sampling sample",
    "lineNumber": 164
  },
  {
    "__docId__": 256,
    "kind": "testFile",
    "name": "test/unit/preprocessing_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nimport { fullData, fullDataDouble, } from '../mock/dataset';\r\nconst DataSet = ms.preprocessing.DataSet;\r\n// import path from 'path';\r\n// const __dirname = path.dirname(new URL(import.meta.url).pathname);\r\nconst expect = chai.expect;\r\nconst csvData = [{\r\n  'Country': 'Brazil',\r\n  'Age': '44',\r\n  'Salary': '72000',\r\n  'Purchased': 'N',\r\n},\r\n{\r\n  'Country': 'Mexico',\r\n  'Age': '27',\r\n  'Salary': '48000',\r\n  'Purchased': 'Yes',\r\n},\r\n{\r\n  'Country': 'Ghana',\r\n  'Age': '30',\r\n  'Salary': '54000',\r\n  'Purchased': 'No',\r\n},\r\n{\r\n  'Country': 'Mexico',\r\n  'Age': '38',\r\n  'Salary': '61000',\r\n  'Purchased': 'f',\r\n},\r\n{\r\n  'Country': 'Ghana',\r\n  'Age': '40',\r\n  'Salary': '',\r\n  'Purchased': 'Yes',\r\n},\r\n{\r\n  'Country': 'Brazil',\r\n  'Age': '35',\r\n  'Salary': '58000',\r\n  'Purchased': 'Yes',\r\n},\r\n{\r\n  'Country': 'Mexico',\r\n  'Age': '',\r\n  'Salary': '52000',\r\n  'Purchased': 'false',\r\n},\r\n{\r\n  'Country': 'Brazil',\r\n  'Age': '48',\r\n  'Salary': '79000',\r\n  'Purchased': 'Yes',\r\n},\r\n{\r\n  'Country': 'Ghana',\r\n  'Age': '50',\r\n  'Salary': '83000',\r\n  'Purchased': 'No',\r\n},\r\n{\r\n  'Country': 'Brazil',\r\n  'Age': '37',\r\n  'Salary': '67000',\r\n  'Purchased': 'Yes',\r\n},\r\n];\r\nconst unmodifiedCSVData = [...csvData,];\r\n\r\ndescribe('preprocessing', function() {\r\n  describe('DataSet class', () => {\r\n    const CSVDataSet = new ms.preprocessing.DataSet(csvData, { debug: false, });\r\n    const CSVFullDataSet = new ms.preprocessing.DataSet(fullData, { debug: false,  });\r\n    const EncodedCSVDataSet = new ms.preprocessing.DataSet(csvData, { debug: false, });\r\n    EncodedCSVDataSet.fitColumns({\r\n      Country:'onehot',\r\n      Salary:'parseNumber',\r\n      Age:['scale', 'standard',],\r\n      Purchased:['label', { binary:true, }, ],\r\n    });\r\n\r\n    describe('constructor', () => {\r\n      it('should instantiate a new DataSet Class', () => {\r\n        expect(ms.preprocessing).to.be.an('object');\r\n        expect(ms.preprocessing.DataSet).to.be.a('function');\r\n        expect(CSVDataSet).to.be.instanceof(ms.preprocessing.DataSet);\r\n      });\r\n    });\r\n    describe('static getBinaryValue', () => {\r\n      it('should return 0 or 1 depending on input values', () => {\r\n        const truthy = [' ', true, 1, 100, 'true', 'T', ];\r\n        const falsey = [undefined, null, '', 0, 'N', 'n', 'NO', 'No', 'no', 'False', 'F', 'f', ];\r\n        truthy.forEach(truthVal => {\r\n          expect(DataSet.getBinaryValue(truthVal)).to.eql(1);\r\n        });\r\n        falsey.forEach(falseVal => {\r\n          expect(DataSet.getBinaryValue(falseVal)).to.eql(0);\r\n        });\r\n      });\r\n    });\r\n    describe('static mapToObject', () => {\r\n      const mapToObject = ms.preprocessing.DataSet.mapToObject;\r\n      const testArray = ['some', 'values', 'in', 'array', ];\r\n      const testMap = new Map([\r\n        ['foo', 'bar', ],\r\n        ['hello', testArray, ],\r\n      ]);\r\n      const nestMap = new Map([\r\n        ['nested_string', 'this is nested', ],\r\n        ['nested_array', [1, 2, 3, 4, ], ],\r\n      ]);\r\n      const nestedMap = new Map(testMap);\r\n      nestedMap.set('deep_nest', nestMap);\r\n      it('should convert a map into an equivalent JavaScript Object', () => {\r\n        const convertedMaptoObject = ms.preprocessing.DataSet.mapToObject(testMap);\r\n        const correctObject = { foo: 'bar', hello: ['some', 'values', 'in', 'array', ], };\r\n        // console.log({ convertedMaptoObject, correctObject, });\r\n        expect(JSON.stringify(convertedMaptoObject)).to.eql(JSON.stringify(correctObject));\r\n        expect(convertedMaptoObject.hello).to.be.an('array').and.to.include.members(testArray);\r\n      });\r\n      it('should convert nested map objects', () => {\r\n        const correctFullyNested = {\r\n          foo: 'bar',\r\n          hello: ['some', 'values', 'in', 'array',],\r\n          deep_nest: {\r\n            nested_string: 'this is nested',\r\n            nested_array: [1, 2, 3, 4,],\r\n          },\r\n        };\r\n        const convertedMaptoObject = mapToObject(nestedMap);\r\n        expect(JSON.stringify(convertedMaptoObject)).to.eql(JSON.stringify(correctFullyNested));\r\n      });\r\n      it('should handle empty maps', () => {\r\n        const emptyConverted = mapToObject(new Map());\r\n        expect(emptyConverted).to.deep.eql({});\r\n      });\r\n    });\r\n    describe('exportFeatures', () => {\r\n      it('should export JavaScript Object of encoders,labels and scalers', () => {\r\n        const expectedFeatures = {\r\n          'encoders': {\r\n            'Country': {\r\n              'name': 'Country',\r\n              'labels': [\r\n                'Brazil',\r\n                'Mexico',\r\n                'Ghana',\r\n              ],\r\n              'prefix': 'Country_',\r\n            },\r\n          },\r\n          'labels': {\r\n            'Purchased': {\r\n              '0': false,\r\n              '1': true,\r\n              'N': 0,\r\n              'Yes': 1,\r\n              'No': 0,\r\n              'f': 0,\r\n              'false': 1,\r\n            },\r\n          },\r\n          'scalers': {\r\n            'Age': {\r\n              'name': 'Age',\r\n              'components': {\r\n                'average': 34.9,\r\n                'standard_dev': 14.24741691988021,\r\n                'maximum': 50,\r\n                'minimum': 0,\r\n              },\r\n              'config': {\r\n                'forced_coercion': false,\r\n                'strategy': 'standard',\r\n              },\r\n            },\r\n          },\r\n        };\r\n        const features = EncodedCSVDataSet.exportFeatures();\r\n        expect(features).to.deep.equal(expectedFeatures);\r\n      });\r\n    });\r\n    describe('importFeatures', () => { \r\n      const FeatureDataSet = new DataSet(fullDataDouble);\r\n      FeatureDataSet.fitColumns({\r\n        Country: 'onehot',\r\n        'Sister Country': 'onehot',\r\n        Salary: 'parseNumber',\r\n        Age: ['scale', { strategy: 'standard', forced_coercion: true, },],\r\n        'Scale Age': ['scale', 'standard',],\r\n        'Scale Age Half': ['scale', 'log',],\r\n        Purchased: ['label', { binary: true, },],\r\n        Rating: ['label',],\r\n      });\r\n      const features = FeatureDataSet.exportFeatures();\r\n      it('should import exported Features', () => {\r\n        const newFeatureDataSet = new DataSet();\r\n        newFeatureDataSet.importFeatures(features);\r\n        const transformedObject = newFeatureDataSet.transformObject(fullDataDouble[ 0 ]);\r\n        expect(transformedObject).to.deep.eql(FeatureDataSet.data[ 0 ]);\r\n      });\r\n    });\r\n    describe('filterColumn', () => {\r\n      it('should by default return full dataset', () => {\r\n        expect(CSVDataSet.filterColumn()).to.eql(CSVDataSet.data);\r\n      });\r\n      it('should filter data by a filter function', () => {\r\n        expect(CSVDataSet.filterColumn(row => row.Salary.toString() === '83000')).to.have.lengthOf(1);\r\n      });\r\n    });\r\n    describe('columnMatrix', () => { \r\n      it('should create a matrix of values from columns', () => {\r\n        const AgeSalMatrix = CSVDataSet.columnMatrix([['Age', ], ['Salary', ], ]);\r\n        const AgeArray = CSVDataSet.columnArray('Age');\r\n        expect(AgeSalMatrix).to.be.lengthOf(AgeArray.length);\r\n        expect(AgeSalMatrix[ 0 ][0]).to.eql(AgeArray[0]);\r\n      });\r\n      it('should create a matrix of values from an array of column names', () => {\r\n        const columns = [\r\n          'Age', 'Salary',\r\n        ];\r\n        const AgeSalMatrix = CSVDataSet.columnMatrix(columns);\r\n        const AgeArray = CSVDataSet.columnArray('Age');\r\n        expect(AgeSalMatrix).to.be.lengthOf(AgeArray.length);\r\n        expect(AgeSalMatrix[ 0 ][0]).to.eql(AgeArray[0]);\r\n      });\r\n      it('should handle invalid columns', () => {\r\n        const invalidMatrix = CSVDataSet.columnMatrix([\r\n          ['iojf',],\r\n        ]);\r\n        expect(invalidMatrix).to.be.an('Array');\r\n        expect(invalidMatrix[ 0 ][ 0 ]).to.be.undefined;\r\n      });\r\n    });\r\n    describe('static reverseColumnMatrix', () => {\r\n      it('should reverse a matrix of values into labeled object', () => {\r\n        const dependentVariables = [['Age', ], ['Salary', ], ];\r\n        const dependentVariables2 = ['Age', 'Salary',];\r\n        const AgeSalMatrix = CSVDataSet.columnMatrix(dependentVariables);\r\n        const AgeSalMatrix2 = CSVDataSet.columnMatrix(dependentVariables2);\r\n        const AgeArray = CSVDataSet.columnArray('Age');\r\n        const reversedAgeSalMatrix = ms.DataSet.reverseColumnMatrix({ vectors: AgeSalMatrix, labels: dependentVariables, });\r\n        const selectedCols = CSVDataSet.selectColumns(['Age', 'Salary', ]);\r\n        expect(AgeSalMatrix).to.be.lengthOf(AgeArray.length);\r\n        expect(AgeSalMatrix).to.eql(AgeSalMatrix2);\r\n        expect(reversedAgeSalMatrix).to.be.lengthOf(AgeArray.length);\r\n        expect(reversedAgeSalMatrix).to.eql(selectedCols);\r\n      });\r\n    });\r\n    describe('static reverseColumnVector', () => {\r\n      it('should reverse a vector of values into labeled object', () => {\r\n        const dependentVariables = [['Age', ], ['Salary', ], ];\r\n        const dependentVariables2 = ['Age', 'Salary',];\r\n        const AgeArray = CSVDataSet.columnArray('Age');\r\n        const reversedAgeSalVector = ms.DataSet.reverseColumnVector({ vector: AgeArray, labels: dependentVariables, });\r\n        const reversedAgeSalVector2 = ms.DataSet.reverseColumnVector({ vector: AgeArray, labels: dependentVariables2, });\r\n        const selectedCols = CSVDataSet.selectColumns(['Age', ]);\r\n        expect(reversedAgeSalVector).to.be.lengthOf(AgeArray.length);\r\n        expect(reversedAgeSalVector).to.eql(selectedCols);\r\n        expect(reversedAgeSalVector).to.eql(reversedAgeSalVector2);\r\n      });\r\n    });\r\n    describe('selectColumns', () => { \r\n      it('should return a list of objects with only selected columns as properties', () => {\r\n        const cols = ['Age', 'Salary', ];\r\n        const selectedCols = CSVDataSet.selectColumns(cols);\r\n        expect(Object.keys(selectedCols[ 0 ])).to.eql(cols);\r\n        expect(Object.keys(selectedCols[ 0 ])).to.have.lengthOf(cols.length);\r\n        expect(selectedCols[ 0 ].Age).to.eql(CSVDataSet.data[ 0 ].Age);\r\n        expect(selectedCols[ 0 ].Salary).to.eql(CSVDataSet.data[ 0 ].Salary);\r\n      });\r\n    });\r\n    describe('columnArray', () => {\r\n      const countryColumn = CSVDataSet.columnArray('Country');\r\n      it('should select a column from CSV Data by name', () => {\r\n        expect(countryColumn.length).to.equal(10);\r\n        expect(countryColumn[0]).to.equal(csvData[0].Country);\r\n      });\r\n      it('should prefilter the dataset', () => {\r\n        const countryColumnPreFiltered = CSVDataSet.columnArray('Country', {\r\n          prefilter: row => row.Country === 'Ghana',\r\n        });\r\n        expect(countryColumnPreFiltered.length).to.equal(3);\r\n      });\r\n      it('should filter the dataset', () => {\r\n        const countryColumnPostFiltered = CSVDataSet.columnArray('Country', {\r\n          filter: val => val === 'Brazil',\r\n        });\r\n        expect(countryColumnPostFiltered.length).to.equal(4);\r\n      });\r\n      it('should replace values in dataset', () => {\r\n        const countryColumnReplaced = CSVDataSet.columnArray('Country', {\r\n          replace: {\r\n            test: val => val === 'Brazil',\r\n            value: 'China',\r\n          },\r\n        });\r\n        const ageColumnReplacedFuncVal = CSVDataSet.columnArray('Age', {\r\n          replace: {\r\n            test: val => val,\r\n            value: (result, val, index, arr, name) => parseInt(val[name]) * 10,\r\n          },\r\n        });\r\n        expect(ageColumnReplacedFuncVal[0]).to.equal(440);\r\n        expect(countryColumnReplaced[0]).to.equal('China');\r\n      });\r\n      it('should convert vals to numbers', () => {\r\n        const ageColumnInt = CSVDataSet.columnArray('Age', {\r\n          parseInt: true,\r\n        });\r\n        const ageColumnFloat = CSVDataSet.columnArray('Age', {\r\n          parseFloat: true,\r\n        });\r\n        expect(ageColumnInt[0]).to.be.a('number');\r\n        expect(ageColumnFloat[0]).to.be.a('number');\r\n      });\r\n      it('should standardize scale values', () => {\r\n        const salaryColumn = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          parseInt: true,\r\n        });\r\n        const standardScaleSalary = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          scale: 'standard',\r\n        });\r\n        expect(JSON.stringify(standardScaleSalary)).to.equal(JSON.stringify(ms.util.StandardScaler(salaryColumn)));\r\n        expect(ms.util.sd(standardScaleSalary)).to.equal(1);\r\n        expect(parseInt(Math.round(ms.util.mean(standardScaleSalary)))).to.equal(0);\r\n      });\r\n      it('should z-score / MinMax scale values', () => {\r\n        const salaryColumn = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          parseInt: true,\r\n        });\r\n        const minMaxScaleSalary = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          scale: 'minMax',\r\n        });\r\n        // console.log('ms.util.mean(minMaxScaleSalary)', ms.util.mean(minMaxScaleSalary));\r\n        expect(JSON.stringify(minMaxScaleSalary)).to.equal(JSON.stringify(ms.util.MinMaxScaler(salaryColumn)));\r\n        expect(parseInt(Math.round(ms.util.sd(minMaxScaleSalary)))).to.equal(0);\r\n        expect(parseInt(Math.round(ms.util.mean(minMaxScaleSalary)))).to.equal(0);\r\n      });\r\n      it('should log scale values', () => {\r\n        const salaryColumn = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          parseInt: true,\r\n        });\r\n        const logScaleSalary = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          scale: 'log',\r\n        });\r\n        expect(JSON.stringify(logScaleSalary)).to.equal(JSON.stringify(ms.util.LogScaler(salaryColumn)));\r\n      });\r\n      it('should exp scale values', () => {\r\n        const salaryColumn = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          parseInt: true,\r\n        });\r\n        const logScaleSalary = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          scale: 'exp',\r\n        });\r\n        expect(JSON.stringify(logScaleSalary)).to.equal(JSON.stringify(ms.util.ExpScaler(salaryColumn)));\r\n      });\r\n    });\r\n    describe('columnScale / columnDescale', () => {\r\n      const salaryColumn = CSVFullDataSet.columnArray('Salary', { parseInt:true, });\r\n      const salaryColumnScaled = CSVFullDataSet.columnArray('Salary', { scale:'log', });\r\n      const scaledSalaryColumn = CSVFullDataSet.columnScale('Salary', { strategy: 'log', });\r\n      it('should scale a column and store the transform functions', () => {\r\n        expect(CSVFullDataSet.scalers).to.be.a('map');\r\n        expect(CSVFullDataSet.scalers.has('Salary')).to.be.true;\r\n        expect(scaledSalaryColumn).to.eql(salaryColumnScaled);\r\n        expect(CSVFullDataSet.scalers.get('Salary').scale(72000)).to.eql(11.184421397998193);\r\n        expect(CSVFullDataSet.scalers.get('Salary').scale(44)).to.eql( 3.784189633918261);\r\n      });\r\n      it('should descale a column', () => {\r\n        const descaledColumn = CSVFullDataSet.columnDescale('Salary', { data: scaledSalaryColumn, });\r\n        expect(parseInt(CSVFullDataSet.scalers.get('Salary').descale(11.184421397998193))).to.eql(72000);\r\n        expect(descaledColumn.map(Math.round)).to.eql(salaryColumn);\r\n      });\r\n    });\r\n    describe('labelEncoder', () => {\r\n      const purchasedColumn = CSVDataSet.columnArray('Purchased');\r\n      let encodedPurchased;\r\n      let encodedCountry;\r\n      it('should binary label encode', () => {\r\n        const binaryEncodedColumn = CSVDataSet.labelEncoder('Purchased', {\r\n          data: purchasedColumn,\r\n          binary: true,\r\n        });\r\n        encodedPurchased = binaryEncodedColumn;\r\n        expect(binaryEncodedColumn).to.include.members([0, 1,]);\r\n      });\r\n      it('should label encode', () => {\r\n        const labelEncodedColumn = CSVDataSet.labelEncoder('Country');\r\n        encodedCountry = labelEncodedColumn;\r\n        // console.log({ CSVDataSet }, CSVDataSet.data);\r\n        expect(labelEncodedColumn).to.include.members([0, 1, 2,]);\r\n        labelEncodedColumn.forEach(lec => expect(lec).to.be.a('number'));\r\n        expect(CSVDataSet.labels.size).equal(2);\r\n      });\r\n      it('should decode labels', () => {\r\n        const decodedCountry = CSVDataSet.labelDecode('Country', { data: encodedCountry, });\r\n        // console.log({ decodedCountry, encodedCountry });\r\n        expect(decodedCountry[0]).to.be.a('string');\r\n        expect(decodedCountry[0]).to.eql('Brazil');\r\n        expect(CSVDataSet.labels.get('Country').get(decodedCountry[0])).to.equal(encodedCountry[0]);\r\n      });\r\n    });\r\n    describe('getTransforms', () => {\r\n      it('should take column fit options as an array', () => {\r\n        const e = EncodedCSVDataSet.getTransforms({\r\n          Age: ['scale', ],\r\n          Rating: ['label', ],  });\r\n        const e1 = EncodedCSVDataSet.getTransforms({\r\n          Age: 'scale',\r\n          Rating:  'label',  });\r\n        const e2 = EncodedCSVDataSet.getTransforms({\r\n        });\r\n        const e3 = EncodedCSVDataSet.getTransforms({\r\n          Age: ['scale', 'standard',],\r\n          Rating: 'label',\r\n        });\r\n        const fitConf1 = [\r\n          { name: 'Age', options: { strategy: 'scale', }, \r\n          },\r\n          { name: 'Rating', options: { strategy: 'label', }, \r\n          },\r\n        ];\r\n        expect(e).to.eql(fitConf1);\r\n        expect(e1).to.eql(fitConf1);\r\n        expect(e2).to.eql([]);\r\n        expect(e3).to.eql([\r\n          {\r\n            name: 'Age',\r\n            options: {\r\n              strategy: 'scale',\r\n              scaleOptions: 'standard',\r\n            },\r\n          }, {\r\n            name: 'Rating',\r\n            options: {\r\n              strategy: 'label',\r\n            },\r\n          },\r\n        ]);\r\n      });\r\n    });\r\n    describe('encodeObject', () => {\r\n      it('should onehot encode an object', () => {\r\n        const labels = ['apple', 'orange', 'banana',];\r\n        const prefix = 'fruit_';\r\n        const name = 'fruit';\r\n        const options = { labels, prefix, name, };\r\n        const data = {\r\n          fruit: 'apple',\r\n        };\r\n        const encodedObject = EncodedCSVDataSet.encodeObject(data, options);\r\n        expect(encodedObject).to.eql({ fruit_apple: 1, fruit_orange: 0, fruit_banana: 0, });\r\n        expect(EncodedCSVDataSet.encodeObject({ fruit:'orange',  }, options)).to.eql({ fruit_apple: 0, fruit_orange: 1, fruit_banana: 0, });\r\n        expect(EncodedCSVDataSet.encodeObject({ fruit:'banana', }, options)).to.eql({ fruit_apple: 0, fruit_orange: 0, fruit_banana: 1, });\r\n        expect(EncodedCSVDataSet.encodeObject({ fruit: 'kiwi', veggie:true, }, options)).to.eql({ fruit_apple: 0, fruit_orange: 0, fruit_banana: 0, });\r\n      });\r\n    });\r\n    describe('transformObject / inverseTransformObject', () => {\r\n      it('should encode new data using existing transforms', () => {\r\n        const transformedObject = EncodedCSVDataSet.transformObject({\r\n          'Country': 'Brazil',\r\n          'Age': '44',\r\n          'Salary': 72000,\r\n          'Purchased': 'N',\r\n        });\r\n        const transformedObject2 = EncodedCSVDataSet.transformObject({\r\n          'Country': 'Brazil',\r\n          'Age': '44',\r\n          'Salary': 72000,\r\n          'Purchased': 'N',\r\n        }, { removeValues: true, });\r\n        expect(transformedObject).to.eql(EncodedCSVDataSet.data[ 0 ]);\r\n        expect(transformedObject2).to.not.haveOwnProperty('Country');\r\n        // console.log({ transformedObject2, });\r\n      });\r\n      it('should inverse transform objects', () => {\r\n        const tranformedObj = {\r\n          Age: 0.6387122698222066,\r\n          Salary: '72000',\r\n          Purchased: 0,\r\n          Country_Brazil: 1,\r\n          Country_Mexico: 0,\r\n          Country_Ghana: 0,\r\n        };\r\n        const inverseTransformedObject = EncodedCSVDataSet.inverseTransformObject(tranformedObj);\r\n        const inverseTransformedObject2 = EncodedCSVDataSet.inverseTransformObject(tranformedObj, { removeValues: true, });\r\n\r\n        expect(inverseTransformedObject.Age.toString()).to.eql(csvData[0].Age);\r\n        expect(inverseTransformedObject2.Age.toString()).to.eql(csvData[0].Age);\r\n        expect(inverseTransformedObject.Salary).to.eql(csvData[0].Salary);\r\n        expect(inverseTransformedObject2.Salary).to.eql(csvData[0].Salary);\r\n        expect(inverseTransformedObject2.Purchased).to.eql(Boolean(ms.preprocessing.DataSet.getBinaryValue(csvData[0].Purchased)));\r\n        expect(inverseTransformedObject2.Country).to.eql(csvData[0].Country);\r\n      });\r\n    });\r\n    describe('oneHotDecoder', () => {\r\n      it('should one hot decode', () => {\r\n        const oneHotDecodeCountry = EncodedCSVDataSet.oneHotDecoder('Country');\r\n        const countryColumn = EncodedCSVDataSet.selectColumns(['Country',]);\r\n        expect(oneHotDecodeCountry).to.eql(countryColumn);\r\n      });\r\n    });\r\n    describe('oneHotColumnArray', () => {\r\n      it('should return all encoded columns', () => {\r\n        const selectedColumns = EncodedCSVDataSet.selectColumns(['Country_Brazil', 'Country_Mexico', 'Country_Ghana',]);\r\n        const oneHotArrayed = EncodedCSVDataSet.oneHotColumnArray('Country');\r\n        expect(oneHotArrayed).to.eql(selectedColumns);\r\n      });\r\n    });\r\n    describe('oneHotEncoder', () => {\r\n      it('should one hot encode', () => {\r\n        const oneHotCountry = CSVDataSet.oneHotEncoder('Country');\r\n        expect(Object.keys(oneHotCountry).length).to.equal(3);\r\n        expect(oneHotCountry).to.haveOwnProperty('Country_Brazil');\r\n        expect(csvData[0].Country).to.equal('Brazil');\r\n        expect(oneHotCountry.Country_Brazil[0]).to.eql(1);\r\n        expect(oneHotCountry.Country_Mexico[0]).to.eql(0);\r\n        expect(oneHotCountry.Country_Ghana[0]).to.eql(0);\r\n        expect(CSVDataSet.encoders.size).to.equal(1);\r\n        expect(CSVDataSet.encoders.has('Country')).to.be.true;\r\n      });\r\n    });\r\n    describe('columnReducer', () => { \r\n      it('should reduce column and greate a new column', () => {\r\n        const reducer = (result, value, index, arr) => {\r\n          result.push(value * 2);\r\n          return result;\r\n        };\r\n        const DoubleAgeColumn = CSVDataSet.columnReducer('DoubleAge', {\r\n          columnName: 'Age',\r\n          reducer,\r\n        });\r\n        const AgeColumn = CSVDataSet.columnArray('Age');\r\n        // console.log({ DoubleAgeColumn, AgeColumn, });\r\n        expect(AgeColumn[ 0 ] * 2).to.eql(DoubleAgeColumn.DoubleAge[ 0 ]);\r\n        expect(DoubleAgeColumn.DoubleAge).to.eql(AgeColumn.reduce(reducer, []));\r\n      });\r\n    });\r\n    describe('columnReplace', () => {\r\n      it('should label encode', () => {\r\n        const leCountry = CSVDataSet.labelEncoder('Country');\r\n        const crCountry = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'label',\r\n        });\r\n        const cr2Country = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'labelEncoder',\r\n        });\r\n        expect(leCountry).to.have.ordered.members(crCountry);\r\n        expect(leCountry).to.have.ordered.members(cr2Country);\r\n      });\r\n      it('should onehot encode', () => {\r\n        const ohCountry = CSVDataSet.oneHotEncoder('Country');\r\n        const oh1Country = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'onehot',\r\n        });\r\n        const oh2Country = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'oneHot',\r\n        });\r\n        const oh3Country = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'oneHotEncode',\r\n        });\r\n        const oh4Country = CSVDataSet.columnReplace('Country', {\r\n          strategy: 'oneHotEncoder',\r\n        });\r\n        expect(ohCountry).to.deep.eq(oh1Country);\r\n        expect(ohCountry).to.deep.eq(oh2Country);\r\n        expect(ohCountry).to.deep.eq(oh3Country);\r\n        expect(ohCountry).to.deep.eq(oh4Country);\r\n      });\r\n      it('should replace empty values with mean by default', () => {\r\n        const colSalary = CSVDataSet.columnArray('Salary', {\r\n          parseFloat: true,\r\n          filter: val => val,\r\n        });\r\n        const meanColSalary = CSVDataSet.columnReplace('Salary');\r\n        const meanSal = ms.util.mean(colSalary);\r\n        expect(meanColSalary).to.include(meanSal);\r\n      });\r\n      it('should replace empty values with stat function from ml.js', () => {\r\n        const colSalary = CSVDataSet.columnArray('Salary', {\r\n          parseFloat: true,\r\n          filter: val => val,\r\n        });\r\n        const standardDeviationColSalary = CSVDataSet.columnReplace('Salary', { strategy: 'standardDeviation', });\r\n        const sdSal = ms.util.sd(colSalary);\r\n        expect(standardDeviationColSalary).to.include(sdSal);\r\n      });\r\n      it('should replace values by standard scaling', () => {\r\n        const salaryColumn = CSVDataSet.columnArray('Salary', {\r\n          prefilter: row => row.Salary,\r\n          parseInt: true,\r\n        });\r\n        const salaryMean = ms.util.mean(salaryColumn);\r\n        const formattedSalaryColumn = CSVDataSet.columnArray('Salary', {\r\n          replace: {\r\n            test: val => !val,\r\n            value: salaryMean,\r\n          },\r\n          parseFloat: true,\r\n        });\r\n        const scaledSalaryColumn = ms.util.StandardScaler(formattedSalaryColumn);\r\n        const standardScaleSalary = CSVDataSet.columnReplace('Salary', {\r\n          scale: 'standard',\r\n        });\r\n        expect(standardScaleSalary).to.include.ordered.members(scaledSalaryColumn);\r\n      });\r\n    });\r\n    describe('fitColumns', () => {\r\n      const extraColumn = [89, 12, 32, 45, 53, 52, 56, 21, 34, 56, ];\r\n      it('should accept simple format for transformations', () => {\r\n        const trainningData = [\r\n          {\r\n            'Country': 'Brazil',\r\n            'Age': '',\r\n            'Salary': '58000',\r\n            'Purchased': 'Yes',\r\n          },\r\n          {\r\n            'Country': 'Mexico',\r\n            'Age': '',\r\n            'Salary': '52000',\r\n            'Purchased': 'false',\r\n          },\r\n          {\r\n            'Country': 'China',\r\n            'Age': '58',\r\n            'Salary': '48000',\r\n            'Purchased': undefined,\r\n          },\r\n        ].concat(csvData);\r\n        const fittingOptions = {\r\n          Country: 'onehot',\r\n          Salary: ['scale', 'standard', ],\r\n          Age: ['parseNumber', ],\r\n        };\r\n        const preprocessingOptions = {\r\n          Salary: ['parseNumber', ],\r\n          Purchased: ['label', { binary:true, }, ],\r\n          Age: ['median', ],\r\n        };\r\n    \r\n        const trainningDataSet = new ms.DataSet(trainningData);\r\n        trainningDataSet.fitColumns(preprocessingOptions);\r\n        trainningDataSet.fitColumns(fittingOptions);\r\n      });\r\n      it('should merge columns', () => {\r\n        const fittedOriginalData = new ms.DataSet([...unmodifiedCSVData,]);\r\n        fittedOriginalData.fitColumns({\r\n          columns: [\r\n            { name: 'Age', },\r\n            {\r\n              name: 'Extra',\r\n              options: {\r\n                strategy: 'merge',\r\n                mergeData: extraColumn,\r\n              },\r\n            },\r\n          ],\r\n        });\r\n        expect(fittedOriginalData.columnArray('Extra')).to.eql(extraColumn);\r\n      });\r\n      it('should only merge columns if data length matches', () => { \r\n        const fittedOriginalData = new ms.DataSet([...unmodifiedCSVData, ]);\r\n        const newColumn = fittedOriginalData.columnMerge('err', [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, ]);\r\n        expect(newColumn).to.be.an('Object');\r\n        expect(newColumn).to.haveOwnProperty('err');\r\n        expect(newColumn.err).to.be.an('array');\r\n        try {\r\n          fittedOriginalData.columnMerge('err', [1, 2, ]);\r\n        } catch (e) {\r\n          expect(e).to.be.an('error');\r\n          expect(e.toString()).to.eql(`RangeError: Merged data column must have the same length(2) as the DataSet's length (${10})`);\r\n        }\r\n      });\r\n      it('should fit multiple columns', () => {\r\n        const unmodifiedData = new ms.DataSet(unmodifiedCSVData);\r\n        const fittedOriginalData = new ms.DataSet([...unmodifiedCSVData,]);\r\n        const reducer = (result, value, index, arr) => {\r\n          result.push(value * 2);\r\n          return result;\r\n        };\r\n\r\n        const fitdata = fittedOriginalData.fitColumns({\r\n          columns: [\r\n            { name: 'Age', },\r\n            {\r\n              name: 'Salary',\r\n              options: {\r\n                scale: 'standard',\r\n              },\r\n            },\r\n            {\r\n              name: 'DoubleSalary',\r\n              options: {\r\n                strategy:'reduce',\r\n                reducerOptions: {\r\n                  columnName: 'Salary',\r\n                  reducer,\r\n                },\r\n              },\r\n            },\r\n            {\r\n              name: 'Purchased',\r\n              options: {\r\n                strategy: 'label',\r\n                labelOptions: {\r\n                  binary: true,\r\n                },\r\n              },\r\n            },\r\n            {\r\n              name: 'Country',\r\n              options: {\r\n                strategy: 'onehot',\r\n                labelOptions: {\r\n                  binary: true,\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        });\r\n        expect(fitdata).to.eql(fittedOriginalData.data);\r\n        const fitObject = fittedOriginalData.fitColumns({\r\n          returnData: false,\r\n          columns: [\r\n            {\r\n              name: 'DoubleAge',\r\n              options: {\r\n                strategy:'reduce',\r\n                reducerOptions: {\r\n                  columnName: 'Age',\r\n                  reducer,\r\n                },\r\n              },\r\n            },\r\n          ],\r\n        });\r\n        expect(fitObject).to.eql(fittedOriginalData);\r\n        expect(unmodifiedData === fittedOriginalData).to.be.false;\r\n        expect(fittedOriginalData.data).to.not.eq(unmodifiedCSVData);\r\n        expect(fittedOriginalData.columnArray('Age')).to.have.ordered.members(unmodifiedData.columnReplace('Age'));\r\n        expect(fittedOriginalData.columnArray('Salary')).to.have.ordered.members(unmodifiedData.columnReplace('Salary', {\r\n          scale: 'standard',\r\n        }));\r\n      });\r\n    });\r\n    describe('fitInverseTransforms / fitTransforms', () => {\r\n      it('should inverse transforms on dataset', () => {\r\n        const refitDataSet = new ms.preprocessing.DataSet(csvData, { debug: false, });\r\n        const transformedObject = {\r\n          Age: 0.6387122698222066,\r\n          Salary: 72000,\r\n          Purchased: 0,\r\n          Country_Brazil: 1,\r\n          Country_Mexico: 0,\r\n          Country_Ghana: 0,\r\n        };\r\n        const transformedFullObject = {\r\n          Age: 0.6387122698222066,\r\n          Salary: 72000,\r\n          Purchased: 0,\r\n          Country: 'Brazil',\r\n          Country_Brazil: 1,\r\n          Country_Mexico: 0,\r\n          Country_Ghana: 0,\r\n        };\r\n        const originalObject = { Country: 'Brazil', Age: 44, Salary: 72000, Purchased: 'N', };\r\n        refitDataSet.fitColumns({\r\n          Country:'onehot',\r\n          Salary:'parseNumber',\r\n          Age:['scale', 'standard',],\r\n          Purchased:['label',],\r\n        });\r\n        expect(refitDataSet.data[ 0 ]).to.eql(transformedFullObject);\r\n        refitDataSet.fitInverseTransforms({ removeValues: true, });\r\n        expect(refitDataSet.data[ 0 ]).to.eql(originalObject);\r\n        refitDataSet.fitTransforms({ removeValues: true, });\r\n        expect(refitDataSet.data[ 0 ]).to.eql(transformedObject);\r\n        // console.log('BEFORE refitDataSet.data', refitDataSet.data);\r\n        // console.log('AFTER refitDataSet.data', refitDataSet.data);\r\n        // console.log('AFTER REFITREFIT refitDataSet.data', refitDataSet.data);\r\n      });\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/preprocessing_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "test",
    "name": "describe79",
    "testId": 79,
    "memberof": "test/unit/preprocessing_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79",
    "access": null,
    "description": "preprocessing",
    "lineNumber": 71
  },
  {
    "__docId__": 258,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "access": null,
    "description": "DataSet class",
    "lineNumber": 72
  },
  {
    "__docId__": 259,
    "kind": "test",
    "name": "describe81",
    "testId": 81,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe81",
    "access": null,
    "description": "constructor",
    "lineNumber": 83
  },
  {
    "__docId__": 260,
    "kind": "test",
    "name": "it82",
    "testId": 82,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe81",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe81.it82",
    "access": null,
    "description": "should instantiate a new DataSet Class",
    "lineNumber": 84
  },
  {
    "__docId__": 261,
    "kind": "test",
    "name": "describe83",
    "testId": 83,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe83",
    "access": null,
    "description": "static getBinaryValue",
    "lineNumber": 90
  },
  {
    "__docId__": 262,
    "kind": "test",
    "name": "it84",
    "testId": 84,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe83",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe83.it84",
    "access": null,
    "description": "should return 0 or 1 depending on input values",
    "lineNumber": 91
  },
  {
    "__docId__": 263,
    "kind": "test",
    "name": "describe85",
    "testId": 85,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85",
    "access": null,
    "description": "static mapToObject",
    "lineNumber": 102
  },
  {
    "__docId__": 264,
    "kind": "test",
    "name": "it86",
    "testId": 86,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85.it86",
    "access": null,
    "description": "should convert a map into an equivalent JavaScript Object",
    "lineNumber": 115
  },
  {
    "__docId__": 265,
    "kind": "test",
    "name": "it87",
    "testId": 87,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85.it87",
    "access": null,
    "description": "should convert nested map objects",
    "lineNumber": 122
  },
  {
    "__docId__": 266,
    "kind": "test",
    "name": "it88",
    "testId": 88,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe85.it88",
    "access": null,
    "description": "should handle empty maps",
    "lineNumber": 134
  },
  {
    "__docId__": 267,
    "kind": "test",
    "name": "describe89",
    "testId": 89,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe89",
    "access": null,
    "description": "exportFeatures",
    "lineNumber": 139
  },
  {
    "__docId__": 268,
    "kind": "test",
    "name": "it90",
    "testId": 90,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe89",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe89.it90",
    "access": null,
    "description": "should export JavaScript Object of encoders,labels and scalers",
    "lineNumber": 140
  },
  {
    "__docId__": 269,
    "kind": "test",
    "name": "describe91",
    "testId": 91,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe91",
    "access": null,
    "description": "importFeatures",
    "lineNumber": 184
  },
  {
    "__docId__": 270,
    "kind": "test",
    "name": "it92",
    "testId": 92,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe91",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe91.it92",
    "access": null,
    "description": "should import exported Features",
    "lineNumber": 197
  },
  {
    "__docId__": 271,
    "kind": "test",
    "name": "describe93",
    "testId": 93,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe93",
    "access": null,
    "description": "filterColumn",
    "lineNumber": 204
  },
  {
    "__docId__": 272,
    "kind": "test",
    "name": "it94",
    "testId": 94,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe93",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe93.it94",
    "access": null,
    "description": "should by default return full dataset",
    "lineNumber": 205
  },
  {
    "__docId__": 273,
    "kind": "test",
    "name": "it95",
    "testId": 95,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe93",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe93.it95",
    "access": null,
    "description": "should filter data by a filter function",
    "lineNumber": 208
  },
  {
    "__docId__": 274,
    "kind": "test",
    "name": "describe96",
    "testId": 96,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96",
    "access": null,
    "description": "columnMatrix",
    "lineNumber": 212
  },
  {
    "__docId__": 275,
    "kind": "test",
    "name": "it97",
    "testId": 97,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96.it97",
    "access": null,
    "description": "should create a matrix of values from columns",
    "lineNumber": 213
  },
  {
    "__docId__": 276,
    "kind": "test",
    "name": "it98",
    "testId": 98,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96.it98",
    "access": null,
    "description": "should create a matrix of values from an array of column names",
    "lineNumber": 219
  },
  {
    "__docId__": 277,
    "kind": "test",
    "name": "it99",
    "testId": 99,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe96.it99",
    "access": null,
    "description": "should handle invalid columns",
    "lineNumber": 228
  },
  {
    "__docId__": 278,
    "kind": "test",
    "name": "describe100",
    "testId": 100,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe100",
    "access": null,
    "description": "static reverseColumnMatrix",
    "lineNumber": 236
  },
  {
    "__docId__": 279,
    "kind": "test",
    "name": "it101",
    "testId": 101,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe100",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe100.it101",
    "access": null,
    "description": "should reverse a matrix of values into labeled object",
    "lineNumber": 237
  },
  {
    "__docId__": 280,
    "kind": "test",
    "name": "describe102",
    "testId": 102,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe102",
    "access": null,
    "description": "static reverseColumnVector",
    "lineNumber": 251
  },
  {
    "__docId__": 281,
    "kind": "test",
    "name": "it103",
    "testId": 103,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe102",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe102.it103",
    "access": null,
    "description": "should reverse a vector of values into labeled object",
    "lineNumber": 252
  },
  {
    "__docId__": 282,
    "kind": "test",
    "name": "describe104",
    "testId": 104,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe104",
    "access": null,
    "description": "selectColumns",
    "lineNumber": 264
  },
  {
    "__docId__": 283,
    "kind": "test",
    "name": "it105",
    "testId": 105,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe104",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe104.it105",
    "access": null,
    "description": "should return a list of objects with only selected columns as properties",
    "lineNumber": 265
  },
  {
    "__docId__": 284,
    "kind": "test",
    "name": "describe106",
    "testId": 106,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "access": null,
    "description": "columnArray",
    "lineNumber": 274
  },
  {
    "__docId__": 285,
    "kind": "test",
    "name": "it107",
    "testId": 107,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it107",
    "access": null,
    "description": "should select a column from CSV Data by name",
    "lineNumber": 276
  },
  {
    "__docId__": 286,
    "kind": "test",
    "name": "it108",
    "testId": 108,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it108",
    "access": null,
    "description": "should prefilter the dataset",
    "lineNumber": 280
  },
  {
    "__docId__": 287,
    "kind": "test",
    "name": "it109",
    "testId": 109,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it109",
    "access": null,
    "description": "should filter the dataset",
    "lineNumber": 286
  },
  {
    "__docId__": 288,
    "kind": "test",
    "name": "it110",
    "testId": 110,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it110",
    "access": null,
    "description": "should replace values in dataset",
    "lineNumber": 292
  },
  {
    "__docId__": 289,
    "kind": "test",
    "name": "it111",
    "testId": 111,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it111",
    "access": null,
    "description": "should convert vals to numbers",
    "lineNumber": 308
  },
  {
    "__docId__": 290,
    "kind": "test",
    "name": "it112",
    "testId": 112,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it112",
    "access": null,
    "description": "should standardize scale values",
    "lineNumber": 318
  },
  {
    "__docId__": 291,
    "kind": "test",
    "name": "it113",
    "testId": 113,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it113",
    "access": null,
    "description": "should z-score / MinMax scale values",
    "lineNumber": 331
  },
  {
    "__docId__": 292,
    "kind": "test",
    "name": "it114",
    "testId": 114,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it114",
    "access": null,
    "description": "should log scale values",
    "lineNumber": 345
  },
  {
    "__docId__": 293,
    "kind": "test",
    "name": "it115",
    "testId": 115,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe106.it115",
    "access": null,
    "description": "should exp scale values",
    "lineNumber": 356
  },
  {
    "__docId__": 294,
    "kind": "test",
    "name": "describe116",
    "testId": 116,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe116",
    "access": null,
    "description": "columnScale / columnDescale",
    "lineNumber": 368
  },
  {
    "__docId__": 295,
    "kind": "test",
    "name": "it117",
    "testId": 117,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe116.it117",
    "access": null,
    "description": "should scale a column and store the transform functions",
    "lineNumber": 372
  },
  {
    "__docId__": 296,
    "kind": "test",
    "name": "it118",
    "testId": 118,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe116",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe116.it118",
    "access": null,
    "description": "should descale a column",
    "lineNumber": 379
  },
  {
    "__docId__": 297,
    "kind": "test",
    "name": "describe119",
    "testId": 119,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119",
    "access": null,
    "description": "labelEncoder",
    "lineNumber": 385
  },
  {
    "__docId__": 298,
    "kind": "test",
    "name": "it120",
    "testId": 120,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119.it120",
    "access": null,
    "description": "should binary label encode",
    "lineNumber": 389
  },
  {
    "__docId__": 299,
    "kind": "test",
    "name": "it121",
    "testId": 121,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119.it121",
    "access": null,
    "description": "should label encode",
    "lineNumber": 397
  },
  {
    "__docId__": 300,
    "kind": "test",
    "name": "it122",
    "testId": 122,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe119.it122",
    "access": null,
    "description": "should decode labels",
    "lineNumber": 405
  },
  {
    "__docId__": 301,
    "kind": "test",
    "name": "describe123",
    "testId": 123,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe123",
    "access": null,
    "description": "getTransforms",
    "lineNumber": 413
  },
  {
    "__docId__": 302,
    "kind": "test",
    "name": "it124",
    "testId": 124,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe123",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe123.it124",
    "access": null,
    "description": "should take column fit options as an array",
    "lineNumber": 414
  },
  {
    "__docId__": 303,
    "kind": "test",
    "name": "describe125",
    "testId": 125,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe125",
    "access": null,
    "description": "encodeObject",
    "lineNumber": 452
  },
  {
    "__docId__": 304,
    "kind": "test",
    "name": "it126",
    "testId": 126,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe125",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe125.it126",
    "access": null,
    "description": "should onehot encode an object",
    "lineNumber": 453
  },
  {
    "__docId__": 305,
    "kind": "test",
    "name": "describe127",
    "testId": 127,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe127",
    "access": null,
    "description": "transformObject / inverseTransformObject",
    "lineNumber": 468
  },
  {
    "__docId__": 306,
    "kind": "test",
    "name": "it128",
    "testId": 128,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe127",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe127.it128",
    "access": null,
    "description": "should encode new data using existing transforms",
    "lineNumber": 469
  },
  {
    "__docId__": 307,
    "kind": "test",
    "name": "it129",
    "testId": 129,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe127",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe127.it129",
    "access": null,
    "description": "should inverse transform objects",
    "lineNumber": 486
  },
  {
    "__docId__": 308,
    "kind": "test",
    "name": "describe130",
    "testId": 130,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe130",
    "access": null,
    "description": "oneHotDecoder",
    "lineNumber": 506
  },
  {
    "__docId__": 309,
    "kind": "test",
    "name": "it131",
    "testId": 131,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe130",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe130.it131",
    "access": null,
    "description": "should one hot decode",
    "lineNumber": 507
  },
  {
    "__docId__": 310,
    "kind": "test",
    "name": "describe132",
    "testId": 132,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe132",
    "access": null,
    "description": "oneHotColumnArray",
    "lineNumber": 513
  },
  {
    "__docId__": 311,
    "kind": "test",
    "name": "it133",
    "testId": 133,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe132",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe132.it133",
    "access": null,
    "description": "should return all encoded columns",
    "lineNumber": 514
  },
  {
    "__docId__": 312,
    "kind": "test",
    "name": "describe134",
    "testId": 134,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe134",
    "access": null,
    "description": "oneHotEncoder",
    "lineNumber": 520
  },
  {
    "__docId__": 313,
    "kind": "test",
    "name": "it135",
    "testId": 135,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe134",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe134.it135",
    "access": null,
    "description": "should one hot encode",
    "lineNumber": 521
  },
  {
    "__docId__": 314,
    "kind": "test",
    "name": "describe136",
    "testId": 136,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe136",
    "access": null,
    "description": "columnReducer",
    "lineNumber": 533
  },
  {
    "__docId__": 315,
    "kind": "test",
    "name": "it137",
    "testId": 137,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe136",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe136.it137",
    "access": null,
    "description": "should reduce column and greate a new column",
    "lineNumber": 534
  },
  {
    "__docId__": 316,
    "kind": "test",
    "name": "describe138",
    "testId": 138,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "access": null,
    "description": "columnReplace",
    "lineNumber": 549
  },
  {
    "__docId__": 317,
    "kind": "test",
    "name": "it139",
    "testId": 139,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138.it139",
    "access": null,
    "description": "should label encode",
    "lineNumber": 550
  },
  {
    "__docId__": 318,
    "kind": "test",
    "name": "it140",
    "testId": 140,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138.it140",
    "access": null,
    "description": "should onehot encode",
    "lineNumber": 561
  },
  {
    "__docId__": 319,
    "kind": "test",
    "name": "it141",
    "testId": 141,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138.it141",
    "access": null,
    "description": "should replace empty values with mean by default",
    "lineNumber": 580
  },
  {
    "__docId__": 320,
    "kind": "test",
    "name": "it142",
    "testId": 142,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138.it142",
    "access": null,
    "description": "should replace empty values with stat function from ml.js",
    "lineNumber": 589
  },
  {
    "__docId__": 321,
    "kind": "test",
    "name": "it143",
    "testId": 143,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe138.it143",
    "access": null,
    "description": "should replace values by standard scaling",
    "lineNumber": 598
  },
  {
    "__docId__": 322,
    "kind": "test",
    "name": "describe144",
    "testId": 144,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144",
    "access": null,
    "description": "fitColumns",
    "lineNumber": 618
  },
  {
    "__docId__": 323,
    "kind": "test",
    "name": "it145",
    "testId": 145,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144.it145",
    "access": null,
    "description": "should accept simple format for transformations",
    "lineNumber": 620
  },
  {
    "__docId__": 324,
    "kind": "test",
    "name": "it146",
    "testId": 146,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144.it146",
    "access": null,
    "description": "should merge columns",
    "lineNumber": 656
  },
  {
    "__docId__": 325,
    "kind": "test",
    "name": "it147",
    "testId": 147,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144.it147",
    "access": null,
    "description": "should only merge columns if data length matches",
    "lineNumber": 672
  },
  {
    "__docId__": 326,
    "kind": "test",
    "name": "it148",
    "testId": 148,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe144.it148",
    "access": null,
    "description": "should fit multiple columns",
    "lineNumber": 685
  },
  {
    "__docId__": 327,
    "kind": "test",
    "name": "describe149",
    "testId": 149,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe149",
    "access": null,
    "description": "fitInverseTransforms / fitTransforms",
    "lineNumber": 757
  },
  {
    "__docId__": 328,
    "kind": "test",
    "name": "it150",
    "testId": 150,
    "memberof": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe149",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/preprocessing_spec.mjs~describe79.describe80.describe149.it150",
    "access": null,
    "description": "should inverse transforms on dataset",
    "lineNumber": 758
  },
  {
    "__docId__": 329,
    "kind": "testFile",
    "name": "test/unit/util_spec.mjs",
    "content": "import * as ms from '../../index.mjs';\r\nimport chai from 'chai';\r\nconst expect = chai.expect;\r\nconst testArray = [20, 25, 10, 33, 50, 42, 19, ];\r\nconst vectors = [\r\n  [1, 2, 3,],\r\n  [1, 2, 3,],\r\n  [3, 3, 4,],\r\n  [3, 3, 3,],\r\n];\r\nconst arrays = [\r\n  [1, 1, 3, 3, ],\r\n  [2, 2, 3, 3, ],\r\n  [3, 3, 4, 3, ],\r\n];\r\n\r\ndescribe('util', function () { \r\n  describe('forecasting metrics', () => {\r\n    const actuals = [45, 38, 43, 39,];\r\n    const estimates = [41, 43, 41, 42,];\r\n    const actuals2 = [120, 90, 101, 91, 115, 83,];\r\n    const estimates2 = [100, 106, 102, 101, 98, 103,];\r\n    describe('forecastErrors', () => {\r\n      it('should return array of residuals', () => {\r\n        expect(ms.util.forecastErrors).to.be.a('function');\r\n        expect(ms.util.forecastErrors(actuals, estimates)).to.eql([4, -5, 2, -3,]);\r\n      });\r\n      it('should throw an error if array lengths are not the same', () => {\r\n        expect(ms.util.forecastErrors.bind({},[1,2,3],[1,2,3,4])).to.throw(/must equal/);\r\n      });\r\n    });\r\n    describe('meanForecastError', () => {\r\n      it('should return bias of forecast accuracy', () => {\r\n        expect(ms.util.meanForecastError).to.be.a('function');\r\n        expect(ms.util.MFE).to.eql(ms.util.meanForecastError);\r\n        expect(ms.util.meanForecastError(actuals, estimates)).to.eql(-0.5);\r\n      });\r\n    });\r\n    describe('meanAbsoluteDeviation', () => {\r\n      it('should return absolute size of the errors', () => {\r\n        expect(ms.util.meanAbsoluteDeviation).to.be.a('function');\r\n        expect(ms.util.MAD).to.eql(ms.util.meanAbsoluteDeviation);\r\n        expect(ms.util.meanAbsoluteDeviation(actuals, estimates)).to.eql(3.5);\r\n      });\r\n    });\r\n    describe('trackingSignal', () => {\r\n      it('should return tracking Signal', () => {\r\n        expect(ms.util.trackingSignal).to.be.a('function');\r\n        expect(ms.util.TS).to.eql(ms.util.trackingSignal);\r\n        const TSig = ms.util.trackingSignal(actuals, estimates);\r\n        expect(TSig.toFixed(2)).to.eql('-0.57');\r\n      });\r\n    });\r\n    describe('meanSquaredError', () => {\r\n      it('should return MSE', () => {\r\n        expect(ms.util.meanSquaredError).to.be.a('function');\r\n        expect(ms.util.MSE).to.eql(ms.util.meanSquaredError);\r\n        expect(ms.util.meanSquaredError(actuals, estimates)).to.eql(13.5);\r\n      });\r\n    });\r\n    describe('MADMeanRatio', () => {\r\n      it('should return MMR', () => {\r\n        expect(ms.util.MADMeanRatio).to.be.a('function');\r\n        expect(ms.util.MMR).to.eql(ms.util.MADMeanRatio);\r\n        const MMR = ms.util.MADMeanRatio(actuals, estimates);\r\n        expect(MMR.toFixed(2)).to.eql('0.08');\r\n      });\r\n    });\r\n    describe('meanAbsolutePercentageError', () => {\r\n      it('should return MAPE', () => {\r\n        expect(ms.util.meanAbsolutePercentageError).to.be.a('function');\r\n        expect(ms.util.MAPE).to.eql(ms.util.meanAbsolutePercentageError);\r\n        const MAPE = ms.util.meanAbsolutePercentageError(actuals, estimates);\r\n        expect(MAPE.toFixed(2)).to.eql('0.09');\r\n      });\r\n    });\r\n  });\r\n  describe('max', () => {\r\n    it('should return max value', () => {\r\n      expect(ms.util).to.be.an('object');\r\n      expect(ms.util.max(testArray)).to.equal(50);   \r\n    });\r\n  });\r\n  describe('min', () => {\r\n    it('should return min value', () => {\r\n      expect(ms.util.min(testArray)).to.equal(10);   \r\n    });\r\n  });\r\n  describe('mean', () => {\r\n    it('should return mean value', () => {\r\n      expect(ms.util.mean(testArray)).to.equal(ms.util.sum(testArray) / testArray.length);   \r\n    });\r\n  });\r\n  describe('Standard Scaler Transforms', () => { \r\n    const standardScaledTestArray = ms.util.StandardScaler(testArray);\r\n    const standardScaledTransformsTestObj = ms.util.StandardScalerTransforms(testArray);\r\n    it('should return an object with a scale function, descale function and values array', () => {\r\n      expect(standardScaledTransformsTestObj).to.be.an('object');\r\n      expect(standardScaledTransformsTestObj).to.have.property('scale');\r\n      expect(standardScaledTransformsTestObj).to.have.property('descale');\r\n      expect(standardScaledTransformsTestObj).to.have.property('values');\r\n      expect(standardScaledTransformsTestObj.scale).to.be.a('function');\r\n      expect(standardScaledTransformsTestObj.descale).to.be.a('function');\r\n      expect(standardScaledTransformsTestObj.values).to.be.an('array');\r\n    });\r\n    it('should have a values array that is equal to the array produced by StandardScaler function', () => {\r\n      expect(standardScaledTransformsTestObj.values).to.eql(standardScaledTestArray);\r\n    });\r\n    it('should have a values array that is equal to the array produced by StandardScaler function', () => {\r\n      expect(standardScaledTransformsTestObj.values).to.eql(standardScaledTestArray);\r\n    });\r\n    it('should properly scale single values', () => {\r\n      expect(standardScaledTransformsTestObj.scale(testArray[0])).to.equal(standardScaledTestArray[0]);\r\n      expect(standardScaledTransformsTestObj.scale(testArray[1])).to.equal(standardScaledTestArray[1]);\r\n    });\r\n    it('should properly descale single values', () => {\r\n      expect(standardScaledTransformsTestObj.descale(standardScaledTestArray[0])).to.equal(testArray[0]);\r\n      expect(standardScaledTransformsTestObj.descale(standardScaledTestArray[1])).to.equal(testArray[1]);\r\n    });\r\n  });\r\n  describe('MinMax Scaler Transforms', () => { \r\n    const minMaxScaledTestArray = ms.util.MinMaxScaler(testArray);\r\n    const minMaxScaledTransformsTestObj = ms.util.MinMaxScalerTransforms(testArray);\r\n    it('should return an object with a scale function, descale function and values array', () => {\r\n      expect(minMaxScaledTransformsTestObj).to.be.an('object');\r\n      expect(minMaxScaledTransformsTestObj).to.have.property('scale');\r\n      expect(minMaxScaledTransformsTestObj).to.have.property('descale');\r\n      expect(minMaxScaledTransformsTestObj).to.have.property('values');\r\n      expect(minMaxScaledTransformsTestObj.scale).to.be.a('function');\r\n      expect(minMaxScaledTransformsTestObj.descale).to.be.a('function');\r\n      expect(minMaxScaledTransformsTestObj.values).to.be.an('array');\r\n      expect(minMaxScaledTransformsTestObj.values).to.eql(minMaxScaledTestArray);\r\n    });\r\n    it('should have a values array that is equal to the array produced by MinMaxScaler function', () => {\r\n      expect(minMaxScaledTransformsTestObj.values).to.eql(minMaxScaledTestArray);\r\n    });\r\n    it('should properly scale single values', () => {\r\n      expect(minMaxScaledTransformsTestObj.scale(testArray[0])).to.equal(minMaxScaledTestArray[0]);\r\n      expect(minMaxScaledTransformsTestObj.scale(testArray[1])).to.equal(minMaxScaledTestArray[1]);\r\n    });\r\n    it('should properly descale single values', () => {\r\n      expect(minMaxScaledTransformsTestObj.descale(minMaxScaledTestArray[0])).to.equal(testArray[0]);\r\n      expect(minMaxScaledTransformsTestObj.descale(minMaxScaledTestArray[1])).to.equal(testArray[1]);\r\n    });\r\n  });\r\n  describe('Log Scaler', () => { \r\n    it('should return log scaled values', () => {\r\n      const logScaledTestArray = ms.util.LogScaler(testArray);\r\n      expect(logScaledTestArray[ 0 ]).to.equal(Math.log(testArray[ 0 ]));\r\n      expect(logScaledTestArray[ 3 ]).to.equal(Math.log(testArray[ 3 ]));\r\n    });\r\n  });\r\n  describe('Exponent Scaler', () => {\r\n    it('should return exponent scaled values', () => {\r\n      const expScaledTestArray = ms.util.ExpScaler(testArray);\r\n      expect(expScaledTestArray[ 0 ]).to.equal(Math.exp(testArray[ 0 ]));\r\n      expect(expScaledTestArray[ 3 ]).to.equal(Math.exp(testArray[ 3 ]));\r\n    });\r\n  });\r\n  describe('Standard Error of the Estimate', () => {\r\n    const actuals = [2, 4, 5, 4, 5, ];\r\n    const estimates = [2.8, 3.4, 4, 4.6, 5.2, ];\r\n    it('should return the Standard Error of the Estimate', () => {\r\n      const SE = ms.util.standardError(actuals, estimates);\r\n      expect(SE.toFixed(2)).to.eql(0.89.toString());\r\n    });\r\n    it('should return an error if array lengths are not the same', () => {\r\n      try {\r\n        ms.util.standardError(actuals, [2, ]);\r\n      } catch (e) {\r\n        expect(e).to.be.an('error');\r\n      }\r\n    });\r\n  });\r\n  describe('getSafePropertyName', () => {\r\n    it('should sanitize property names', () => {\r\n      const names = [\r\n        'sa les',\r\n        'sa.les',\r\n        'sa.les!!!',\r\n        'Sa.les!!!',\r\n        'Sa.leS',\r\n        'Sa---leS',\r\n        'Sa---l#eS',\r\n      ];\r\n      const sanitizedNames = names.map(ms.util.getSafePropertyName);\r\n      const ranSanitized = ['sa les',\r\n        'sa_les',\r\n        'sa_les___',\r\n        'Sa_les___',\r\n        'Sa_leS',\r\n        'Sa___leS',\r\n        'Sa___l_eS',\r\n      ];\r\n      expect(sanitizedNames).to.eql(ranSanitized);\r\n      // console.log({ sanitizedNames });\r\n    });\r\n  });\r\n  describe('Coefficient of correlation', () => {\r\n    const actuals = [39, 42, 67, 76,];\r\n    const estimates = [44, 40, 60, 84,];\r\n    it('should return the Coefficient of correlation', () => {\r\n      const R = ms.util.coefficientOfCorrelation(actuals, estimates);\r\n      expect(R.toFixed(4)).to.eql(0.9408.toString());\r\n\r\n    });\r\n    it('should return an error if array lengths are not the same', () => {\r\n      try {\r\n        ms.util.coefficientOfCorrelation(actuals, [2, ]);\r\n      } catch (e) {\r\n        expect(e).to.be.an('error');\r\n      }\r\n    });\r\n  });\r\n  describe('rSquared', () => {\r\n    const actuals = [39, 42, 67, 76,];\r\n    const estimates = [44, 40, 60, 84,];\r\n    it('should return r^2', () => {\r\n      const R = ms.util.coefficientOfCorrelation(actuals, estimates);\r\n      const rSquared = ms.util.rSquared(actuals, estimates);\r\n      const COD = ms.util.coefficientOfDetermination(actuals, estimates);\r\n      expect(Math.pow(R, 2)).to.eql(rSquared);\r\n      expect(rSquared.toFixed(1)).to.eql(COD.toFixed(1));\r\n    });\r\n  });\r\n  describe('Coefficient of determination', () => {\r\n    const actuals = [2, 4, 5, 4, 5, ];\r\n    const estimates = [2.8, 3.4, 4, 4.6, 5.2, ];\r\n    it('should return the Coefficient of determination', () => {\r\n      const r2 = ms.util.coefficientOfDetermination(actuals, estimates);\r\n      expect(r2.toFixed(1)).to.eql(0.6.toString());\r\n    });\r\n    it('should return an error if array lengths are not the same', () => {\r\n      try {\r\n        ms.util.coefficientOfDetermination(actuals, [2, ]);\r\n      } catch (e) {\r\n        expect(e).to.be.an('error');\r\n      }\r\n    });\r\n  });\r\n  describe('adjusted coefficient of determination', () => {\r\n    it('should return the adjusted Coefficient of determination', () => {\r\n      const adjr2 = ms.util.adjustedCoefficentOfDetermination({\r\n        rSquared: 0.944346527,\r\n        sampleSize: 8,\r\n        independentVariables: 2,\r\n      }); \r\n      expect(adjr2.toFixed(3)).to.eql(0.922.toString());\r\n    });\r\n  });\r\n  describe('pivotVector', () => {\r\n    it('should pivot vectors into arrays', () => {\r\n      const arrays = ms.util.pivotVector(vectors); // => [ [1,2,3,3], [2,2,3,3], [3,3,4,3] ];\r\n      expect(arrays[ 0 ]).to.be.lengthOf(4);\r\n      expect(arrays[ 0 ]).to.eql([1, 1, 3, 3,]);\r\n      expect(arrays[ 1 ]).to.be.lengthOf(4);\r\n      expect(arrays[ 1 ]).to.eql([2, 2, 3, 3,]);\r\n      expect(arrays[ 2 ]).to.be.lengthOf(4);\r\n      expect(arrays[ 2 ]).to.eql([3, 3, 4, 3,]);\r\n    });\r\n  });\r\n  describe('pivotArrays', () => {\r\n    it('should pivot arrays into vectors', () => {\r\n      const translatedVectors = ms.util.pivotArrays(arrays);\r\n      expect(translatedVectors).to.eql(vectors);\r\n    });\r\n  });\r\n  describe('Z Scores / Standard Scores', () => {\r\n    it('should calculate standard scores', () => {\r\n      const observations = [\r\n        7, 8, 8, 7.5, 9,\r\n      ];\r\n      const zscores = ms.util.standardScore(observations);\r\n      const roundedZScores = zscores.map(z => parseFloat(z.toFixed(2), 10));\r\n      expect(roundedZScores[ 3 ]).to.eql(-0.54);\r\n      // console.log({ zscores,roundedZScores });\r\n    });\r\n    it('should approximate the p-value from the z score', () => { \r\n      const z1 = 2.87;\r\n      const z2 = 1.96;\r\n      const p1 = parseFloat(ms.util.approximateZPercentile(z1).toFixed(3), 10);\r\n      const p2 = parseFloat(ms.util.approximateZPercentile(z2).toFixed(3), 10);\r\n      const p3 = parseFloat(ms.util.approximateZPercentile(z1, false).toFixed(3), 10);\r\n      const p4 = parseFloat(ms.util.approximateZPercentile(z2, false).toFixed(3), 10);\r\n      expect(p1).to.eql(0.002);\r\n      expect(p3).to.eql(0.998);\r\n      expect(p2).to.eql(0.025);\r\n      expect(p4).to.eql(0.975);\r\n      expect(ms.util.approximateZPercentile(-10)).to.eql(0);\r\n      expect(ms.util.approximateZPercentile(10)).to.eql(1);\r\n      // console.log('ms.util.approximateZPercentile(-10)', ms.util.approximateZPercentile(-10));\r\n    });\r\n  });\r\n});",
    "static": true,
    "longname": "/Users/yawjosephetse/Developer/github/repetere/modelscript/test/unit/util_spec.mjs",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "test",
    "name": "describe151",
    "testId": 151,
    "memberof": "test/unit/util_spec.mjs",
    "testDepth": 0,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151",
    "access": null,
    "description": "util",
    "lineNumber": 17
  },
  {
    "__docId__": 331,
    "kind": "test",
    "name": "describe152",
    "testId": 152,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152",
    "access": null,
    "description": "forecasting metrics",
    "lineNumber": 18
  },
  {
    "__docId__": 332,
    "kind": "test",
    "name": "describe153",
    "testId": 153,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe153",
    "access": null,
    "description": "forecastErrors",
    "lineNumber": 23
  },
  {
    "__docId__": 333,
    "kind": "test",
    "name": "it154",
    "testId": 154,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe153",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe153.it154",
    "access": null,
    "description": "should return array of residuals",
    "lineNumber": 24
  },
  {
    "__docId__": 334,
    "kind": "test",
    "name": "it155",
    "testId": 155,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe153",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe153.it155",
    "access": null,
    "description": "should throw an error if array lengths are not the same",
    "lineNumber": 28
  },
  {
    "__docId__": 335,
    "kind": "test",
    "name": "describe156",
    "testId": 156,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe156",
    "access": null,
    "description": "meanForecastError",
    "lineNumber": 32
  },
  {
    "__docId__": 336,
    "kind": "test",
    "name": "it157",
    "testId": 157,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe156",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe156.it157",
    "access": null,
    "description": "should return bias of forecast accuracy",
    "lineNumber": 33
  },
  {
    "__docId__": 337,
    "kind": "test",
    "name": "describe158",
    "testId": 158,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe158",
    "access": null,
    "description": "meanAbsoluteDeviation",
    "lineNumber": 39
  },
  {
    "__docId__": 338,
    "kind": "test",
    "name": "it159",
    "testId": 159,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe158",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe158.it159",
    "access": null,
    "description": "should return absolute size of the errors",
    "lineNumber": 40
  },
  {
    "__docId__": 339,
    "kind": "test",
    "name": "describe160",
    "testId": 160,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe160",
    "access": null,
    "description": "trackingSignal",
    "lineNumber": 46
  },
  {
    "__docId__": 340,
    "kind": "test",
    "name": "it161",
    "testId": 161,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe160",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe160.it161",
    "access": null,
    "description": "should return tracking Signal",
    "lineNumber": 47
  },
  {
    "__docId__": 341,
    "kind": "test",
    "name": "describe162",
    "testId": 162,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe162",
    "access": null,
    "description": "meanSquaredError",
    "lineNumber": 54
  },
  {
    "__docId__": 342,
    "kind": "test",
    "name": "it163",
    "testId": 163,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe162",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe162.it163",
    "access": null,
    "description": "should return MSE",
    "lineNumber": 55
  },
  {
    "__docId__": 343,
    "kind": "test",
    "name": "describe164",
    "testId": 164,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe164",
    "access": null,
    "description": "MADMeanRatio",
    "lineNumber": 61
  },
  {
    "__docId__": 344,
    "kind": "test",
    "name": "it165",
    "testId": 165,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe164",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe164.it165",
    "access": null,
    "description": "should return MMR",
    "lineNumber": 62
  },
  {
    "__docId__": 345,
    "kind": "test",
    "name": "describe166",
    "testId": 166,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe166",
    "access": null,
    "description": "meanAbsolutePercentageError",
    "lineNumber": 69
  },
  {
    "__docId__": 346,
    "kind": "test",
    "name": "it167",
    "testId": 167,
    "memberof": "test/unit/util_spec.mjs~describe151.describe152.describe166",
    "testDepth": 3,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe152.describe166.it167",
    "access": null,
    "description": "should return MAPE",
    "lineNumber": 70
  },
  {
    "__docId__": 347,
    "kind": "test",
    "name": "describe168",
    "testId": 168,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe168",
    "access": null,
    "description": "max",
    "lineNumber": 78
  },
  {
    "__docId__": 348,
    "kind": "test",
    "name": "it169",
    "testId": 169,
    "memberof": "test/unit/util_spec.mjs~describe151.describe168",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe168.it169",
    "access": null,
    "description": "should return max value",
    "lineNumber": 79
  },
  {
    "__docId__": 349,
    "kind": "test",
    "name": "describe170",
    "testId": 170,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe170",
    "access": null,
    "description": "min",
    "lineNumber": 84
  },
  {
    "__docId__": 350,
    "kind": "test",
    "name": "it171",
    "testId": 171,
    "memberof": "test/unit/util_spec.mjs~describe151.describe170",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe170.it171",
    "access": null,
    "description": "should return min value",
    "lineNumber": 85
  },
  {
    "__docId__": 351,
    "kind": "test",
    "name": "describe172",
    "testId": 172,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe172",
    "access": null,
    "description": "mean",
    "lineNumber": 89
  },
  {
    "__docId__": 352,
    "kind": "test",
    "name": "it173",
    "testId": 173,
    "memberof": "test/unit/util_spec.mjs~describe151.describe172",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe172.it173",
    "access": null,
    "description": "should return mean value",
    "lineNumber": 90
  },
  {
    "__docId__": 353,
    "kind": "test",
    "name": "describe174",
    "testId": 174,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174",
    "access": null,
    "description": "Standard Scaler Transforms",
    "lineNumber": 94
  },
  {
    "__docId__": 354,
    "kind": "test",
    "name": "it175",
    "testId": 175,
    "memberof": "test/unit/util_spec.mjs~describe151.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174.it175",
    "access": null,
    "description": "should return an object with a scale function, descale function and values array",
    "lineNumber": 97
  },
  {
    "__docId__": 355,
    "kind": "test",
    "name": "it176",
    "testId": 176,
    "memberof": "test/unit/util_spec.mjs~describe151.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174.it176",
    "access": null,
    "description": "should have a values array that is equal to the array produced by StandardScaler function",
    "lineNumber": 106
  },
  {
    "__docId__": 356,
    "kind": "test",
    "name": "it177",
    "testId": 177,
    "memberof": "test/unit/util_spec.mjs~describe151.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174.it177",
    "access": null,
    "description": "should have a values array that is equal to the array produced by StandardScaler function",
    "lineNumber": 109
  },
  {
    "__docId__": 357,
    "kind": "test",
    "name": "it178",
    "testId": 178,
    "memberof": "test/unit/util_spec.mjs~describe151.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174.it178",
    "access": null,
    "description": "should properly scale single values",
    "lineNumber": 112
  },
  {
    "__docId__": 358,
    "kind": "test",
    "name": "it179",
    "testId": 179,
    "memberof": "test/unit/util_spec.mjs~describe151.describe174",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe174.it179",
    "access": null,
    "description": "should properly descale single values",
    "lineNumber": 116
  },
  {
    "__docId__": 359,
    "kind": "test",
    "name": "describe180",
    "testId": 180,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe180",
    "access": null,
    "description": "MinMax Scaler Transforms",
    "lineNumber": 121
  },
  {
    "__docId__": 360,
    "kind": "test",
    "name": "it181",
    "testId": 181,
    "memberof": "test/unit/util_spec.mjs~describe151.describe180",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe180.it181",
    "access": null,
    "description": "should return an object with a scale function, descale function and values array",
    "lineNumber": 124
  },
  {
    "__docId__": 361,
    "kind": "test",
    "name": "it182",
    "testId": 182,
    "memberof": "test/unit/util_spec.mjs~describe151.describe180",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe180.it182",
    "access": null,
    "description": "should have a values array that is equal to the array produced by MinMaxScaler function",
    "lineNumber": 134
  },
  {
    "__docId__": 362,
    "kind": "test",
    "name": "it183",
    "testId": 183,
    "memberof": "test/unit/util_spec.mjs~describe151.describe180",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe180.it183",
    "access": null,
    "description": "should properly scale single values",
    "lineNumber": 137
  },
  {
    "__docId__": 363,
    "kind": "test",
    "name": "it184",
    "testId": 184,
    "memberof": "test/unit/util_spec.mjs~describe151.describe180",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe180.it184",
    "access": null,
    "description": "should properly descale single values",
    "lineNumber": 141
  },
  {
    "__docId__": 364,
    "kind": "test",
    "name": "describe185",
    "testId": 185,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe185",
    "access": null,
    "description": "Log Scaler",
    "lineNumber": 146
  },
  {
    "__docId__": 365,
    "kind": "test",
    "name": "it186",
    "testId": 186,
    "memberof": "test/unit/util_spec.mjs~describe151.describe185",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe185.it186",
    "access": null,
    "description": "should return log scaled values",
    "lineNumber": 147
  },
  {
    "__docId__": 366,
    "kind": "test",
    "name": "describe187",
    "testId": 187,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe187",
    "access": null,
    "description": "Exponent Scaler",
    "lineNumber": 153
  },
  {
    "__docId__": 367,
    "kind": "test",
    "name": "it188",
    "testId": 188,
    "memberof": "test/unit/util_spec.mjs~describe151.describe187",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe187.it188",
    "access": null,
    "description": "should return exponent scaled values",
    "lineNumber": 154
  },
  {
    "__docId__": 368,
    "kind": "test",
    "name": "describe189",
    "testId": 189,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe189",
    "access": null,
    "description": "Standard Error of the Estimate",
    "lineNumber": 160
  },
  {
    "__docId__": 369,
    "kind": "test",
    "name": "it190",
    "testId": 190,
    "memberof": "test/unit/util_spec.mjs~describe151.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe189.it190",
    "access": null,
    "description": "should return the Standard Error of the Estimate",
    "lineNumber": 163
  },
  {
    "__docId__": 370,
    "kind": "test",
    "name": "it191",
    "testId": 191,
    "memberof": "test/unit/util_spec.mjs~describe151.describe189",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe189.it191",
    "access": null,
    "description": "should return an error if array lengths are not the same",
    "lineNumber": 167
  },
  {
    "__docId__": 371,
    "kind": "test",
    "name": "describe192",
    "testId": 192,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe192",
    "access": null,
    "description": "getSafePropertyName",
    "lineNumber": 175
  },
  {
    "__docId__": 372,
    "kind": "test",
    "name": "it193",
    "testId": 193,
    "memberof": "test/unit/util_spec.mjs~describe151.describe192",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe192.it193",
    "access": null,
    "description": "should sanitize property names",
    "lineNumber": 176
  },
  {
    "__docId__": 373,
    "kind": "test",
    "name": "describe194",
    "testId": 194,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe194",
    "access": null,
    "description": "Coefficient of correlation",
    "lineNumber": 199
  },
  {
    "__docId__": 374,
    "kind": "test",
    "name": "it195",
    "testId": 195,
    "memberof": "test/unit/util_spec.mjs~describe151.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe194.it195",
    "access": null,
    "description": "should return the Coefficient of correlation",
    "lineNumber": 202
  },
  {
    "__docId__": 375,
    "kind": "test",
    "name": "it196",
    "testId": 196,
    "memberof": "test/unit/util_spec.mjs~describe151.describe194",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe194.it196",
    "access": null,
    "description": "should return an error if array lengths are not the same",
    "lineNumber": 207
  },
  {
    "__docId__": 376,
    "kind": "test",
    "name": "describe197",
    "testId": 197,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe197",
    "access": null,
    "description": "rSquared",
    "lineNumber": 215
  },
  {
    "__docId__": 377,
    "kind": "test",
    "name": "it198",
    "testId": 198,
    "memberof": "test/unit/util_spec.mjs~describe151.describe197",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe197.it198",
    "access": null,
    "description": "should return r^2",
    "lineNumber": 218
  },
  {
    "__docId__": 378,
    "kind": "test",
    "name": "describe199",
    "testId": 199,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe199",
    "access": null,
    "description": "Coefficient of determination",
    "lineNumber": 226
  },
  {
    "__docId__": 379,
    "kind": "test",
    "name": "it200",
    "testId": 200,
    "memberof": "test/unit/util_spec.mjs~describe151.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe199.it200",
    "access": null,
    "description": "should return the Coefficient of determination",
    "lineNumber": 229
  },
  {
    "__docId__": 380,
    "kind": "test",
    "name": "it201",
    "testId": 201,
    "memberof": "test/unit/util_spec.mjs~describe151.describe199",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe199.it201",
    "access": null,
    "description": "should return an error if array lengths are not the same",
    "lineNumber": 233
  },
  {
    "__docId__": 381,
    "kind": "test",
    "name": "describe202",
    "testId": 202,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe202",
    "access": null,
    "description": "adjusted coefficient of determination",
    "lineNumber": 241
  },
  {
    "__docId__": 382,
    "kind": "test",
    "name": "it203",
    "testId": 203,
    "memberof": "test/unit/util_spec.mjs~describe151.describe202",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe202.it203",
    "access": null,
    "description": "should return the adjusted Coefficient of determination",
    "lineNumber": 242
  },
  {
    "__docId__": 383,
    "kind": "test",
    "name": "describe204",
    "testId": 204,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe204",
    "access": null,
    "description": "pivotVector",
    "lineNumber": 251
  },
  {
    "__docId__": 384,
    "kind": "test",
    "name": "it205",
    "testId": 205,
    "memberof": "test/unit/util_spec.mjs~describe151.describe204",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe204.it205",
    "access": null,
    "description": "should pivot vectors into arrays",
    "lineNumber": 252
  },
  {
    "__docId__": 385,
    "kind": "test",
    "name": "describe206",
    "testId": 206,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe206",
    "access": null,
    "description": "pivotArrays",
    "lineNumber": 262
  },
  {
    "__docId__": 386,
    "kind": "test",
    "name": "it207",
    "testId": 207,
    "memberof": "test/unit/util_spec.mjs~describe151.describe206",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe206.it207",
    "access": null,
    "description": "should pivot arrays into vectors",
    "lineNumber": 263
  },
  {
    "__docId__": 387,
    "kind": "test",
    "name": "describe208",
    "testId": 208,
    "memberof": "test/unit/util_spec.mjs~describe151",
    "testDepth": 1,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe208",
    "access": null,
    "description": "Z Scores / Standard Scores",
    "lineNumber": 268
  },
  {
    "__docId__": 388,
    "kind": "test",
    "name": "it209",
    "testId": 209,
    "memberof": "test/unit/util_spec.mjs~describe151.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe208.it209",
    "access": null,
    "description": "should calculate standard scores",
    "lineNumber": 269
  },
  {
    "__docId__": 389,
    "kind": "test",
    "name": "it210",
    "testId": 210,
    "memberof": "test/unit/util_spec.mjs~describe151.describe208",
    "testDepth": 2,
    "static": true,
    "longname": "test/unit/util_spec.mjs~describe151.describe208.it210",
    "access": null,
    "description": "should approximate the p-value from the z score",
    "lineNumber": 278
  }
]